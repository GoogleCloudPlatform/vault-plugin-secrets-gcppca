// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/security/privateca/v1alpha1/service.proto

package privateca

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request message for
// [CertificateAuthorityService.ListCertificateAuthorities][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.ListCertificateAuthorities].
type ListCertificateAuthoritiesRequest struct {
	// Required. The resource name of the location associated with the
	// [CertificateAuthorities][google.cloud.security.privateca.v1alpha1.CertificateAuthority], in the format
	// `projects/*/locations/*`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. Limit on the number of [CertificateAuthorities][google.cloud.security.privateca.v1alpha1.CertificateAuthority] to
	// include in the response.
	// Further [CertificateAuthorities][google.cloud.security.privateca.v1alpha1.CertificateAuthority] can subsequently be
	// obtained by including the
	// [ListCertificateAuthoritiesResponse.next_page_token][google.cloud.security.privateca.v1alpha1.ListCertificateAuthoritiesResponse.next_page_token] in a subsequent
	// request. If unspecified, the server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. Pagination token, returned earlier via
	// [ListCertificateAuthoritiesResponse.next_page_token][google.cloud.security.privateca.v1alpha1.ListCertificateAuthoritiesResponse.next_page_token].
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. Only include resources that match the filter in the response.
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. Specify how the results should be sorted.
	OrderBy              string   `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCertificateAuthoritiesRequest) Reset()         { *m = ListCertificateAuthoritiesRequest{} }
func (m *ListCertificateAuthoritiesRequest) String() string { return proto.CompactTextString(m) }
func (*ListCertificateAuthoritiesRequest) ProtoMessage()    {}
func (*ListCertificateAuthoritiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{0}
}

func (m *ListCertificateAuthoritiesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCertificateAuthoritiesRequest.Unmarshal(m, b)
}
func (m *ListCertificateAuthoritiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCertificateAuthoritiesRequest.Marshal(b, m, deterministic)
}
func (m *ListCertificateAuthoritiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCertificateAuthoritiesRequest.Merge(m, src)
}
func (m *ListCertificateAuthoritiesRequest) XXX_Size() int {
	return xxx_messageInfo_ListCertificateAuthoritiesRequest.Size(m)
}
func (m *ListCertificateAuthoritiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCertificateAuthoritiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCertificateAuthoritiesRequest proto.InternalMessageInfo

func (m *ListCertificateAuthoritiesRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListCertificateAuthoritiesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListCertificateAuthoritiesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListCertificateAuthoritiesRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListCertificateAuthoritiesRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

// Request message for
// [CertificateAuthorityService.ListCertificateRevocationLists][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.ListCertificateRevocationLists].
type ListCertificateRevocationListsRequest struct {
	// Required. The resource name of the location associated with the
	// [CertificateRevocationLists][google.cloud.security.privateca.v1alpha1.CertificateRevocationList], in the format
	// `projects/*/locations/*/certificateauthorities/*`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. Limit on the number of
	// [CertificateRevocationLists][google.cloud.security.privateca.v1alpha1.CertificateRevocationList] to include in the
	// response. Further [CertificateRevocationLists][google.cloud.security.privateca.v1alpha1.CertificateRevocationList]
	// can subsequently be obtained by including the
	// [ListCertificateRevocationListsResponse.next_page_token][google.cloud.security.privateca.v1alpha1.ListCertificateRevocationListsResponse.next_page_token] in a subsequent
	// request. If unspecified, the server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. Pagination token, returned earlier via
	// [ListCertificateRevocationListsResponse.next_page_token][google.cloud.security.privateca.v1alpha1.ListCertificateRevocationListsResponse.next_page_token].
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. Only include resources that match the filter in the response.
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. Specify how the results should be sorted.
	OrderBy              string   `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCertificateRevocationListsRequest) Reset()         { *m = ListCertificateRevocationListsRequest{} }
func (m *ListCertificateRevocationListsRequest) String() string { return proto.CompactTextString(m) }
func (*ListCertificateRevocationListsRequest) ProtoMessage()    {}
func (*ListCertificateRevocationListsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{1}
}

func (m *ListCertificateRevocationListsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCertificateRevocationListsRequest.Unmarshal(m, b)
}
func (m *ListCertificateRevocationListsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCertificateRevocationListsRequest.Marshal(b, m, deterministic)
}
func (m *ListCertificateRevocationListsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCertificateRevocationListsRequest.Merge(m, src)
}
func (m *ListCertificateRevocationListsRequest) XXX_Size() int {
	return xxx_messageInfo_ListCertificateRevocationListsRequest.Size(m)
}
func (m *ListCertificateRevocationListsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCertificateRevocationListsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCertificateRevocationListsRequest proto.InternalMessageInfo

func (m *ListCertificateRevocationListsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListCertificateRevocationListsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListCertificateRevocationListsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListCertificateRevocationListsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListCertificateRevocationListsRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

// Request message for [CertificateAuthorityService.ListCertificates][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.ListCertificates].
type ListCertificatesRequest struct {
	// Required. The resource name of the location associated with the
	// [Certificates][google.cloud.security.privateca.v1alpha1.Certificate], in the format
	// `projects/*/locations/*/certificateauthorities/*`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. Limit on the number of
	// [Certificates][google.cloud.security.privateca.v1alpha1.Certificate] to include in the
	// response. Further [Certificates][google.cloud.security.privateca.v1alpha1.Certificate] can subsequently be obtained
	// by including the
	// [ListCertificatesResponse.next_page_token][google.cloud.security.privateca.v1alpha1.ListCertificatesResponse.next_page_token] in a subsequent
	// request. If unspecified, the server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. Pagination token, returned earlier via
	// [ListCertificatesResponse.next_page_token][google.cloud.security.privateca.v1alpha1.ListCertificatesResponse.next_page_token].
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. Only include resources that match the filter in the response.
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. Specify how the results should be sorted.
	OrderBy              string   `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCertificatesRequest) Reset()         { *m = ListCertificatesRequest{} }
func (m *ListCertificatesRequest) String() string { return proto.CompactTextString(m) }
func (*ListCertificatesRequest) ProtoMessage()    {}
func (*ListCertificatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{2}
}

func (m *ListCertificatesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCertificatesRequest.Unmarshal(m, b)
}
func (m *ListCertificatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCertificatesRequest.Marshal(b, m, deterministic)
}
func (m *ListCertificatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCertificatesRequest.Merge(m, src)
}
func (m *ListCertificatesRequest) XXX_Size() int {
	return xxx_messageInfo_ListCertificatesRequest.Size(m)
}
func (m *ListCertificatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCertificatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCertificatesRequest proto.InternalMessageInfo

func (m *ListCertificatesRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListCertificatesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListCertificatesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListCertificatesRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListCertificatesRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

// Request message for
// [CertificateAuthorityService.ListReusableConfigs][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.ListReusableConfigs].
type ListReusableConfigsRequest struct {
	// Required. The resource name of the location associated with the
	// [ReusableConfigs][google.cloud.security.privateca.v1alpha1.ReusableConfig], in the format
	// `projects/*/locations/*`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. Limit on the number of
	// [ReusableConfigs][google.cloud.security.privateca.v1alpha1.ReusableConfig] to include in the response.
	// Further [ReusableConfigs][google.cloud.security.privateca.v1alpha1.ReusableConfig] can subsequently be
	// obtained by including the
	// [ListReusableConfigsResponse.next_page_token][google.cloud.security.privateca.v1alpha1.ListReusableConfigsResponse.next_page_token] in a subsequent request. If
	// unspecified, the server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. Pagination token, returned earlier via
	// [ListReusableConfigsResponse.next_page_token][google.cloud.security.privateca.v1alpha1.ListReusableConfigsResponse.next_page_token].
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. Only include resources that match the filter in the response.
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. Specify how the results should be sorted.
	OrderBy              string   `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListReusableConfigsRequest) Reset()         { *m = ListReusableConfigsRequest{} }
func (m *ListReusableConfigsRequest) String() string { return proto.CompactTextString(m) }
func (*ListReusableConfigsRequest) ProtoMessage()    {}
func (*ListReusableConfigsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{3}
}

func (m *ListReusableConfigsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListReusableConfigsRequest.Unmarshal(m, b)
}
func (m *ListReusableConfigsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListReusableConfigsRequest.Marshal(b, m, deterministic)
}
func (m *ListReusableConfigsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListReusableConfigsRequest.Merge(m, src)
}
func (m *ListReusableConfigsRequest) XXX_Size() int {
	return xxx_messageInfo_ListReusableConfigsRequest.Size(m)
}
func (m *ListReusableConfigsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListReusableConfigsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListReusableConfigsRequest proto.InternalMessageInfo

func (m *ListReusableConfigsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListReusableConfigsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListReusableConfigsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListReusableConfigsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListReusableConfigsRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

// Response message for
// [CertificateAuthorityService.ListCertificateAuthorities][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.ListCertificateAuthorities].
type ListCertificateAuthoritiesResponse struct {
	// The list of [CertificateAuthorities][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	CertificateAuthorities []*CertificateAuthority `protobuf:"bytes,1,rep,name=certificate_authorities,json=certificateAuthorities,proto3" json:"certificate_authorities,omitempty"`
	// A token to retrieve next page of results. Pass this value in
	// [ListCertificateAuthoritiesRequest.next_page_token][] to retrieve the next
	// page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// A list of locations (e.g. "us-west1") that could not be reached.
	Unreachable          []string `protobuf:"bytes,3,rep,name=unreachable,proto3" json:"unreachable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCertificateAuthoritiesResponse) Reset()         { *m = ListCertificateAuthoritiesResponse{} }
func (m *ListCertificateAuthoritiesResponse) String() string { return proto.CompactTextString(m) }
func (*ListCertificateAuthoritiesResponse) ProtoMessage()    {}
func (*ListCertificateAuthoritiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{4}
}

func (m *ListCertificateAuthoritiesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCertificateAuthoritiesResponse.Unmarshal(m, b)
}
func (m *ListCertificateAuthoritiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCertificateAuthoritiesResponse.Marshal(b, m, deterministic)
}
func (m *ListCertificateAuthoritiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCertificateAuthoritiesResponse.Merge(m, src)
}
func (m *ListCertificateAuthoritiesResponse) XXX_Size() int {
	return xxx_messageInfo_ListCertificateAuthoritiesResponse.Size(m)
}
func (m *ListCertificateAuthoritiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCertificateAuthoritiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCertificateAuthoritiesResponse proto.InternalMessageInfo

func (m *ListCertificateAuthoritiesResponse) GetCertificateAuthorities() []*CertificateAuthority {
	if m != nil {
		return m.CertificateAuthorities
	}
	return nil
}

func (m *ListCertificateAuthoritiesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *ListCertificateAuthoritiesResponse) GetUnreachable() []string {
	if m != nil {
		return m.Unreachable
	}
	return nil
}

// Response message for
// [CertificateAuthorityService.ListCertificateRevocationLists][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.ListCertificateRevocationLists].
type ListCertificateRevocationListsResponse struct {
	// The list of [CertificateRevocationLists][google.cloud.security.privateca.v1alpha1.CertificateRevocationList].
	CertificateRevocationLists []*CertificateRevocationList `protobuf:"bytes,1,rep,name=certificate_revocation_lists,json=certificateRevocationLists,proto3" json:"certificate_revocation_lists,omitempty"`
	// A token to retrieve next page of results. Pass this value in
	// [ListCertificateRevocationListsRequest.next_page_token][] to retrieve the
	// next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// A list of locations (e.g. "us-west1") that could not be reached.
	Unreachable          []string `protobuf:"bytes,3,rep,name=unreachable,proto3" json:"unreachable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCertificateRevocationListsResponse) Reset() {
	*m = ListCertificateRevocationListsResponse{}
}
func (m *ListCertificateRevocationListsResponse) String() string { return proto.CompactTextString(m) }
func (*ListCertificateRevocationListsResponse) ProtoMessage()    {}
func (*ListCertificateRevocationListsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{5}
}

func (m *ListCertificateRevocationListsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCertificateRevocationListsResponse.Unmarshal(m, b)
}
func (m *ListCertificateRevocationListsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCertificateRevocationListsResponse.Marshal(b, m, deterministic)
}
func (m *ListCertificateRevocationListsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCertificateRevocationListsResponse.Merge(m, src)
}
func (m *ListCertificateRevocationListsResponse) XXX_Size() int {
	return xxx_messageInfo_ListCertificateRevocationListsResponse.Size(m)
}
func (m *ListCertificateRevocationListsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCertificateRevocationListsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCertificateRevocationListsResponse proto.InternalMessageInfo

func (m *ListCertificateRevocationListsResponse) GetCertificateRevocationLists() []*CertificateRevocationList {
	if m != nil {
		return m.CertificateRevocationLists
	}
	return nil
}

func (m *ListCertificateRevocationListsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *ListCertificateRevocationListsResponse) GetUnreachable() []string {
	if m != nil {
		return m.Unreachable
	}
	return nil
}

// Response message for [CertificateAuthorityService.ListCertificates][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.ListCertificates].
type ListCertificatesResponse struct {
	// The list of [Certificates][google.cloud.security.privateca.v1alpha1.Certificate].
	Certificates []*Certificate `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates,omitempty"`
	// A token to retrieve next page of results. Pass this value in
	// [ListCertificatesRequest.next_page_token][] to retrieve the
	// next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// A list of locations (e.g. "us-west1") that could not be reached.
	Unreachable          []string `protobuf:"bytes,3,rep,name=unreachable,proto3" json:"unreachable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCertificatesResponse) Reset()         { *m = ListCertificatesResponse{} }
func (m *ListCertificatesResponse) String() string { return proto.CompactTextString(m) }
func (*ListCertificatesResponse) ProtoMessage()    {}
func (*ListCertificatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{6}
}

func (m *ListCertificatesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCertificatesResponse.Unmarshal(m, b)
}
func (m *ListCertificatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCertificatesResponse.Marshal(b, m, deterministic)
}
func (m *ListCertificatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCertificatesResponse.Merge(m, src)
}
func (m *ListCertificatesResponse) XXX_Size() int {
	return xxx_messageInfo_ListCertificatesResponse.Size(m)
}
func (m *ListCertificatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCertificatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCertificatesResponse proto.InternalMessageInfo

func (m *ListCertificatesResponse) GetCertificates() []*Certificate {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func (m *ListCertificatesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *ListCertificatesResponse) GetUnreachable() []string {
	if m != nil {
		return m.Unreachable
	}
	return nil
}

// Response message for
// [CertificateAuthorityService.ListReusableConfigs][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.ListReusableConfigs].
type ListReusableConfigsResponse struct {
	// The list of [ReusableConfigs][google.cloud.security.privateca.v1alpha1.ReusableConfig].
	ReusableConfigs []*ReusableConfig `protobuf:"bytes,1,rep,name=reusable_configs,json=reusableConfigs,proto3" json:"reusable_configs,omitempty"`
	// A token to retrieve next page of results. Pass this value in
	// [ListReusableConfigsRequest.next_page_token][] to retrieve
	// the next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// A list of locations (e.g. "us-west1") that could not be reached.
	Unreachable          []string `protobuf:"bytes,3,rep,name=unreachable,proto3" json:"unreachable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListReusableConfigsResponse) Reset()         { *m = ListReusableConfigsResponse{} }
func (m *ListReusableConfigsResponse) String() string { return proto.CompactTextString(m) }
func (*ListReusableConfigsResponse) ProtoMessage()    {}
func (*ListReusableConfigsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{7}
}

func (m *ListReusableConfigsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListReusableConfigsResponse.Unmarshal(m, b)
}
func (m *ListReusableConfigsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListReusableConfigsResponse.Marshal(b, m, deterministic)
}
func (m *ListReusableConfigsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListReusableConfigsResponse.Merge(m, src)
}
func (m *ListReusableConfigsResponse) XXX_Size() int {
	return xxx_messageInfo_ListReusableConfigsResponse.Size(m)
}
func (m *ListReusableConfigsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListReusableConfigsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListReusableConfigsResponse proto.InternalMessageInfo

func (m *ListReusableConfigsResponse) GetReusableConfigs() []*ReusableConfig {
	if m != nil {
		return m.ReusableConfigs
	}
	return nil
}

func (m *ListReusableConfigsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *ListReusableConfigsResponse) GetUnreachable() []string {
	if m != nil {
		return m.Unreachable
	}
	return nil
}

// Request message for [CertificateAuthorityService.GetCertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.GetCertificateAuthority].
type GetCertificateAuthorityRequest struct {
	// Required. The [name][google.cloud.security.privateca.v1alpha1.CertificateAuthority.name] of the [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] to
	// get.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCertificateAuthorityRequest) Reset()         { *m = GetCertificateAuthorityRequest{} }
func (m *GetCertificateAuthorityRequest) String() string { return proto.CompactTextString(m) }
func (*GetCertificateAuthorityRequest) ProtoMessage()    {}
func (*GetCertificateAuthorityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{8}
}

func (m *GetCertificateAuthorityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCertificateAuthorityRequest.Unmarshal(m, b)
}
func (m *GetCertificateAuthorityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCertificateAuthorityRequest.Marshal(b, m, deterministic)
}
func (m *GetCertificateAuthorityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCertificateAuthorityRequest.Merge(m, src)
}
func (m *GetCertificateAuthorityRequest) XXX_Size() int {
	return xxx_messageInfo_GetCertificateAuthorityRequest.Size(m)
}
func (m *GetCertificateAuthorityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCertificateAuthorityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCertificateAuthorityRequest proto.InternalMessageInfo

func (m *GetCertificateAuthorityRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request message for
// [CertificateAuthorityService.GetCertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.GetCertificateRevocationList].
type GetCertificateRevocationListRequest struct {
	// Required. The [name][google.cloud.security.privateca.v1alpha1.CertificateRevocationList.name] of the
	// [CertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateRevocationList] to get.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCertificateRevocationListRequest) Reset()         { *m = GetCertificateRevocationListRequest{} }
func (m *GetCertificateRevocationListRequest) String() string { return proto.CompactTextString(m) }
func (*GetCertificateRevocationListRequest) ProtoMessage()    {}
func (*GetCertificateRevocationListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{9}
}

func (m *GetCertificateRevocationListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCertificateRevocationListRequest.Unmarshal(m, b)
}
func (m *GetCertificateRevocationListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCertificateRevocationListRequest.Marshal(b, m, deterministic)
}
func (m *GetCertificateRevocationListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCertificateRevocationListRequest.Merge(m, src)
}
func (m *GetCertificateRevocationListRequest) XXX_Size() int {
	return xxx_messageInfo_GetCertificateRevocationListRequest.Size(m)
}
func (m *GetCertificateRevocationListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCertificateRevocationListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCertificateRevocationListRequest proto.InternalMessageInfo

func (m *GetCertificateRevocationListRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request message for
// [CertificateAuthorityService.GetCertificate][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.GetCertificate].
type GetCertificateRequest struct {
	// Required. The [name][google.cloud.security.privateca.v1alpha1.Certificate.name] of the [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] to get.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCertificateRequest) Reset()         { *m = GetCertificateRequest{} }
func (m *GetCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*GetCertificateRequest) ProtoMessage()    {}
func (*GetCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{10}
}

func (m *GetCertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCertificateRequest.Unmarshal(m, b)
}
func (m *GetCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCertificateRequest.Marshal(b, m, deterministic)
}
func (m *GetCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCertificateRequest.Merge(m, src)
}
func (m *GetCertificateRequest) XXX_Size() int {
	return xxx_messageInfo_GetCertificateRequest.Size(m)
}
func (m *GetCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCertificateRequest proto.InternalMessageInfo

func (m *GetCertificateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request message for
// [CertificateAuthorityService.GetReusableConfig][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.GetReusableConfig].
type GetReusableConfigRequest struct {
	// Required. The [name][ReusableConfigs.name] of the [ReusableConfigs][] to get.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReusableConfigRequest) Reset()         { *m = GetReusableConfigRequest{} }
func (m *GetReusableConfigRequest) String() string { return proto.CompactTextString(m) }
func (*GetReusableConfigRequest) ProtoMessage()    {}
func (*GetReusableConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{11}
}

func (m *GetReusableConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReusableConfigRequest.Unmarshal(m, b)
}
func (m *GetReusableConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReusableConfigRequest.Marshal(b, m, deterministic)
}
func (m *GetReusableConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReusableConfigRequest.Merge(m, src)
}
func (m *GetReusableConfigRequest) XXX_Size() int {
	return xxx_messageInfo_GetReusableConfigRequest.Size(m)
}
func (m *GetReusableConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReusableConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReusableConfigRequest proto.InternalMessageInfo

func (m *GetReusableConfigRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Request message for
// [CertificateAuthorityService.CreateCertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.CreateCertificateAuthority].
type CreateCertificateAuthorityRequest struct {
	// Required. The resource name of the location associated with the
	// [CertificateAuthorities][google.cloud.security.privateca.v1alpha1.CertificateAuthority], in the format
	// `projects/*/locations/*`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. It must be unique within a location and match the regular
	// expression `[a-zA-Z0-9_-]{1,63}`
	CertificateAuthorityId string `protobuf:"bytes,2,opt,name=certificate_authority_id,json=certificateAuthorityId,proto3" json:"certificate_authority_id,omitempty"`
	// Required. A [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] with initial field values.
	CertificateAuthority *CertificateAuthority `protobuf:"bytes,3,opt,name=certificate_authority,json=certificateAuthority,proto3" json:"certificate_authority,omitempty"`
	// Optional. An ID to identify requests. Specify a unique request ID so that if you must
	// retry your request, the server will know to ignore the request if it has
	// already been completed. The server will guarantee that for at least 60
	// minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and t
	// he request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId            string   `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateCertificateAuthorityRequest) Reset()         { *m = CreateCertificateAuthorityRequest{} }
func (m *CreateCertificateAuthorityRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCertificateAuthorityRequest) ProtoMessage()    {}
func (*CreateCertificateAuthorityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{12}
}

func (m *CreateCertificateAuthorityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCertificateAuthorityRequest.Unmarshal(m, b)
}
func (m *CreateCertificateAuthorityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCertificateAuthorityRequest.Marshal(b, m, deterministic)
}
func (m *CreateCertificateAuthorityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCertificateAuthorityRequest.Merge(m, src)
}
func (m *CreateCertificateAuthorityRequest) XXX_Size() int {
	return xxx_messageInfo_CreateCertificateAuthorityRequest.Size(m)
}
func (m *CreateCertificateAuthorityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCertificateAuthorityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCertificateAuthorityRequest proto.InternalMessageInfo

func (m *CreateCertificateAuthorityRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateCertificateAuthorityRequest) GetCertificateAuthorityId() string {
	if m != nil {
		return m.CertificateAuthorityId
	}
	return ""
}

func (m *CreateCertificateAuthorityRequest) GetCertificateAuthority() *CertificateAuthority {
	if m != nil {
		return m.CertificateAuthority
	}
	return nil
}

func (m *CreateCertificateAuthorityRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// Request message for
// [CertificateAuthorityService.CreateCertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.CreateCertificateRevocationList].
type CreateCertificateRevocationListRequest struct {
	// Required. The resource name of the location and [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority]
	// associated with the [CertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateRevocationList], in the format
	// `projects/*/locations/*/certificateAuthorities/*`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. It must be unique within a location and match the regular expression
	// `[a-zA-Z0-9_-]{1,63}`
	CertificateRevocationListId string `protobuf:"bytes,2,opt,name=certificate_revocation_list_id,json=certificateRevocationListId,proto3" json:"certificate_revocation_list_id,omitempty"`
	// Required. A [CertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateRevocationList] with initial field values.
	CertificateRevocationList *CertificateRevocationList `protobuf:"bytes,3,opt,name=certificate_revocation_list,json=certificateRevocationList,proto3" json:"certificate_revocation_list,omitempty"`
	// Optional. An ID to identify requests. Specify a unique request ID so that if you must
	// retry your request, the server will know to ignore the request if it has
	// already been completed. The server will guarantee that for at least 60
	// minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and t
	// he request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId            string   `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateCertificateRevocationListRequest) Reset() {
	*m = CreateCertificateRevocationListRequest{}
}
func (m *CreateCertificateRevocationListRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCertificateRevocationListRequest) ProtoMessage()    {}
func (*CreateCertificateRevocationListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{13}
}

func (m *CreateCertificateRevocationListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCertificateRevocationListRequest.Unmarshal(m, b)
}
func (m *CreateCertificateRevocationListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCertificateRevocationListRequest.Marshal(b, m, deterministic)
}
func (m *CreateCertificateRevocationListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCertificateRevocationListRequest.Merge(m, src)
}
func (m *CreateCertificateRevocationListRequest) XXX_Size() int {
	return xxx_messageInfo_CreateCertificateRevocationListRequest.Size(m)
}
func (m *CreateCertificateRevocationListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCertificateRevocationListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCertificateRevocationListRequest proto.InternalMessageInfo

func (m *CreateCertificateRevocationListRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateCertificateRevocationListRequest) GetCertificateRevocationListId() string {
	if m != nil {
		return m.CertificateRevocationListId
	}
	return ""
}

func (m *CreateCertificateRevocationListRequest) GetCertificateRevocationList() *CertificateRevocationList {
	if m != nil {
		return m.CertificateRevocationList
	}
	return nil
}

func (m *CreateCertificateRevocationListRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// Request message for [CertificateAuthorityService.CreateCertificate][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.CreateCertificate].
type CreateCertificateRequest struct {
	// Required. The resource name of the location and [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority]
	// associated with the [Certificate][google.cloud.security.privateca.v1alpha1.Certificate], in the format
	// `projects/*/locations/*/certificateAuthorities/*`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. It must be unique within a location and match the regular
	// expression `[a-zA-Z0-9_-]{1,63}`
	CertificateId string `protobuf:"bytes,2,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	// Required. A [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] with initial field values.
	Certificate *Certificate `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// Optional. An ID to identify requests. Specify a unique request ID so that if you must
	// retry your request, the server will know to ignore the request if it has
	// already been completed. The server will guarantee that for at least 60
	// minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and t
	// he request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId            string   `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateCertificateRequest) Reset()         { *m = CreateCertificateRequest{} }
func (m *CreateCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCertificateRequest) ProtoMessage()    {}
func (*CreateCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{14}
}

func (m *CreateCertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCertificateRequest.Unmarshal(m, b)
}
func (m *CreateCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCertificateRequest.Marshal(b, m, deterministic)
}
func (m *CreateCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCertificateRequest.Merge(m, src)
}
func (m *CreateCertificateRequest) XXX_Size() int {
	return xxx_messageInfo_CreateCertificateRequest.Size(m)
}
func (m *CreateCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCertificateRequest proto.InternalMessageInfo

func (m *CreateCertificateRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateCertificateRequest) GetCertificateId() string {
	if m != nil {
		return m.CertificateId
	}
	return ""
}

func (m *CreateCertificateRequest) GetCertificate() *Certificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *CreateCertificateRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// Request message for
// [CertificateAuthorityService.CreateReusableConfig][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.CreateReusableConfig].
type CreateReusableConfigRequest struct {
	// Required. The resource name of the location associated with the
	// [ReusableConfig][google.cloud.security.privateca.v1alpha1.ReusableConfig], in the format
	// `projects/*/locations/*`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. It must be unique within a location and match the regular
	// expression `[a-zA-Z0-9_-]{1,63}`
	ReusableConfigId string `protobuf:"bytes,2,opt,name=reusable_config_id,json=reusableConfigId,proto3" json:"reusable_config_id,omitempty"`
	// Required. A [ReusableConfig][google.cloud.security.privateca.v1alpha1.ReusableConfig] with initial field values.
	ReusableConfig *ReusableConfig `protobuf:"bytes,3,opt,name=reusable_config,json=reusableConfig,proto3" json:"reusable_config,omitempty"`
	// Optional. An ID to identify requests. Specify a unique request ID so that if you must
	// retry your request, the server will know to ignore the request if it has
	// already been completed. The server will guarantee that for at least 60
	// minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and t
	// he request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId            string   `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateReusableConfigRequest) Reset()         { *m = CreateReusableConfigRequest{} }
func (m *CreateReusableConfigRequest) String() string { return proto.CompactTextString(m) }
func (*CreateReusableConfigRequest) ProtoMessage()    {}
func (*CreateReusableConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{15}
}

func (m *CreateReusableConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateReusableConfigRequest.Unmarshal(m, b)
}
func (m *CreateReusableConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateReusableConfigRequest.Marshal(b, m, deterministic)
}
func (m *CreateReusableConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateReusableConfigRequest.Merge(m, src)
}
func (m *CreateReusableConfigRequest) XXX_Size() int {
	return xxx_messageInfo_CreateReusableConfigRequest.Size(m)
}
func (m *CreateReusableConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateReusableConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateReusableConfigRequest proto.InternalMessageInfo

func (m *CreateReusableConfigRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateReusableConfigRequest) GetReusableConfigId() string {
	if m != nil {
		return m.ReusableConfigId
	}
	return ""
}

func (m *CreateReusableConfigRequest) GetReusableConfig() *ReusableConfig {
	if m != nil {
		return m.ReusableConfig
	}
	return nil
}

func (m *CreateReusableConfigRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// Request message for
// [CertificateAuthorityService.UpdateCertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.UpdateCertificateAuthority].
type UpdateCertificateAuthorityRequest struct {
	// Required. [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] with updated values.
	CertificateAuthority *CertificateAuthority `protobuf:"bytes,1,opt,name=certificate_authority,json=certificateAuthority,proto3" json:"certificate_authority,omitempty"`
	// Required. A list of fields to be updated in this request.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Optional. An ID to identify requests. Specify a unique request ID so that if you must
	// retry your request, the server will know to ignore the request if it has
	// already been completed. The server will guarantee that for at least 60
	// minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and t
	// he request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId            string   `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateCertificateAuthorityRequest) Reset()         { *m = UpdateCertificateAuthorityRequest{} }
func (m *UpdateCertificateAuthorityRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateCertificateAuthorityRequest) ProtoMessage()    {}
func (*UpdateCertificateAuthorityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{16}
}

func (m *UpdateCertificateAuthorityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCertificateAuthorityRequest.Unmarshal(m, b)
}
func (m *UpdateCertificateAuthorityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCertificateAuthorityRequest.Marshal(b, m, deterministic)
}
func (m *UpdateCertificateAuthorityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCertificateAuthorityRequest.Merge(m, src)
}
func (m *UpdateCertificateAuthorityRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateCertificateAuthorityRequest.Size(m)
}
func (m *UpdateCertificateAuthorityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCertificateAuthorityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCertificateAuthorityRequest proto.InternalMessageInfo

func (m *UpdateCertificateAuthorityRequest) GetCertificateAuthority() *CertificateAuthority {
	if m != nil {
		return m.CertificateAuthority
	}
	return nil
}

func (m *UpdateCertificateAuthorityRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateCertificateAuthorityRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// Request message for
// [CertificateAuthorityService.UpdateCertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.UpdateCertificateRevocationList].
type UpdateCertificateRevocationListRequest struct {
	// Required. [CertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateRevocationList] with updated values.
	CertificateRevocationList *CertificateRevocationList `protobuf:"bytes,1,opt,name=certificate_revocation_list,json=certificateRevocationList,proto3" json:"certificate_revocation_list,omitempty"`
	// Required. A list of fields to be updated in this request.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Optional. An ID to identify requests. Specify a unique request ID so that if you must
	// retry your request, the server will know to ignore the request if it has
	// already been completed. The server will guarantee that for at least 60
	// minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and t
	// he request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId            string   `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateCertificateRevocationListRequest) Reset() {
	*m = UpdateCertificateRevocationListRequest{}
}
func (m *UpdateCertificateRevocationListRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateCertificateRevocationListRequest) ProtoMessage()    {}
func (*UpdateCertificateRevocationListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{17}
}

func (m *UpdateCertificateRevocationListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCertificateRevocationListRequest.Unmarshal(m, b)
}
func (m *UpdateCertificateRevocationListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCertificateRevocationListRequest.Marshal(b, m, deterministic)
}
func (m *UpdateCertificateRevocationListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCertificateRevocationListRequest.Merge(m, src)
}
func (m *UpdateCertificateRevocationListRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateCertificateRevocationListRequest.Size(m)
}
func (m *UpdateCertificateRevocationListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCertificateRevocationListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCertificateRevocationListRequest proto.InternalMessageInfo

func (m *UpdateCertificateRevocationListRequest) GetCertificateRevocationList() *CertificateRevocationList {
	if m != nil {
		return m.CertificateRevocationList
	}
	return nil
}

func (m *UpdateCertificateRevocationListRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateCertificateRevocationListRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// Request message for [CertificateAuthorityService.UpdateCertificate][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.UpdateCertificate].
type UpdateCertificateRequest struct {
	// Required. [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] with updated values.
	Certificate *Certificate `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// Required. A list of fields to be updated in this request.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Optional. An ID to identify requests. Specify a unique request ID so that if you must
	// retry your request, the server will know to ignore the request if it has
	// already been completed. The server will guarantee that for at least 60
	// minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and t
	// he request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId            string   `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateCertificateRequest) Reset()         { *m = UpdateCertificateRequest{} }
func (m *UpdateCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateCertificateRequest) ProtoMessage()    {}
func (*UpdateCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{18}
}

func (m *UpdateCertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCertificateRequest.Unmarshal(m, b)
}
func (m *UpdateCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCertificateRequest.Marshal(b, m, deterministic)
}
func (m *UpdateCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCertificateRequest.Merge(m, src)
}
func (m *UpdateCertificateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateCertificateRequest.Size(m)
}
func (m *UpdateCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCertificateRequest proto.InternalMessageInfo

func (m *UpdateCertificateRequest) GetCertificate() *Certificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *UpdateCertificateRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateCertificateRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// Request message for
// [CertificateAuthorityService.UpdateReusableConfig][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.UpdateReusableConfig].
type UpdateReusableConfigRequest struct {
	// Required. [ReusableConfig][google.cloud.security.privateca.v1alpha1.ReusableConfig] with updated values.
	ReusableConfig *ReusableConfig `protobuf:"bytes,1,opt,name=reusable_config,json=reusableConfig,proto3" json:"reusable_config,omitempty"`
	// Required. A list of fields to be updated in this request.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Optional. An ID to identify requests. Specify a unique request ID so that if you must
	// retry your request, the server will know to ignore the request if it has
	// already been completed. The server will guarantee that for at least 60
	// minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and t
	// he request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId            string   `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateReusableConfigRequest) Reset()         { *m = UpdateReusableConfigRequest{} }
func (m *UpdateReusableConfigRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateReusableConfigRequest) ProtoMessage()    {}
func (*UpdateReusableConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{19}
}

func (m *UpdateReusableConfigRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateReusableConfigRequest.Unmarshal(m, b)
}
func (m *UpdateReusableConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateReusableConfigRequest.Marshal(b, m, deterministic)
}
func (m *UpdateReusableConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReusableConfigRequest.Merge(m, src)
}
func (m *UpdateReusableConfigRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateReusableConfigRequest.Size(m)
}
func (m *UpdateReusableConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReusableConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReusableConfigRequest proto.InternalMessageInfo

func (m *UpdateReusableConfigRequest) GetReusableConfig() *ReusableConfig {
	if m != nil {
		return m.ReusableConfig
	}
	return nil
}

func (m *UpdateReusableConfigRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateReusableConfigRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// Request message for
// [CertificateAuthorityService.DeleteCertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.DeleteCertificateAuthority].
type DeleteCertificateAuthorityRequest struct {
	// Required. The resource name for this [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] in the
	// format `projects/*/locations/*/certificateAuthorities/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. An ID to identify requests. Specify a unique request ID so that if you must
	// retry your request, the server will know to ignore the request if it has
	// already been completed. The server will guarantee that for at least 60
	// minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and t
	// he request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId            string   `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCertificateAuthorityRequest) Reset()         { *m = DeleteCertificateAuthorityRequest{} }
func (m *DeleteCertificateAuthorityRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCertificateAuthorityRequest) ProtoMessage()    {}
func (*DeleteCertificateAuthorityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{20}
}

func (m *DeleteCertificateAuthorityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteCertificateAuthorityRequest.Unmarshal(m, b)
}
func (m *DeleteCertificateAuthorityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteCertificateAuthorityRequest.Marshal(b, m, deterministic)
}
func (m *DeleteCertificateAuthorityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCertificateAuthorityRequest.Merge(m, src)
}
func (m *DeleteCertificateAuthorityRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteCertificateAuthorityRequest.Size(m)
}
func (m *DeleteCertificateAuthorityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCertificateAuthorityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCertificateAuthorityRequest proto.InternalMessageInfo

func (m *DeleteCertificateAuthorityRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteCertificateAuthorityRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// Request message for
// [CertificateAuthorityService.GetCertificateAuthorityCsr][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.GetCertificateAuthorityCsr].
type GetCertificateAuthorityCsrRequest struct {
	// Required. The resource name for this [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] in the
	// format `projects/*/locations/*/certificateAuthorities/*`.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCertificateAuthorityCsrRequest) Reset()         { *m = GetCertificateAuthorityCsrRequest{} }
func (m *GetCertificateAuthorityCsrRequest) String() string { return proto.CompactTextString(m) }
func (*GetCertificateAuthorityCsrRequest) ProtoMessage()    {}
func (*GetCertificateAuthorityCsrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{21}
}

func (m *GetCertificateAuthorityCsrRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCertificateAuthorityCsrRequest.Unmarshal(m, b)
}
func (m *GetCertificateAuthorityCsrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCertificateAuthorityCsrRequest.Marshal(b, m, deterministic)
}
func (m *GetCertificateAuthorityCsrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCertificateAuthorityCsrRequest.Merge(m, src)
}
func (m *GetCertificateAuthorityCsrRequest) XXX_Size() int {
	return xxx_messageInfo_GetCertificateAuthorityCsrRequest.Size(m)
}
func (m *GetCertificateAuthorityCsrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCertificateAuthorityCsrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCertificateAuthorityCsrRequest proto.InternalMessageInfo

func (m *GetCertificateAuthorityCsrRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Response message for
// [CertificateAuthorityService.GetCertificateAuthorityCsr][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.GetCertificateAuthorityCsr].
type GetCertificateAuthorityCsrResponse struct {
	// Output only. The PEM-encoded signed certificate signing request (CSR).
	PemCsr               string   `protobuf:"bytes,1,opt,name=pem_csr,json=pemCsr,proto3" json:"pem_csr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCertificateAuthorityCsrResponse) Reset()         { *m = GetCertificateAuthorityCsrResponse{} }
func (m *GetCertificateAuthorityCsrResponse) String() string { return proto.CompactTextString(m) }
func (*GetCertificateAuthorityCsrResponse) ProtoMessage()    {}
func (*GetCertificateAuthorityCsrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{22}
}

func (m *GetCertificateAuthorityCsrResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCertificateAuthorityCsrResponse.Unmarshal(m, b)
}
func (m *GetCertificateAuthorityCsrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCertificateAuthorityCsrResponse.Marshal(b, m, deterministic)
}
func (m *GetCertificateAuthorityCsrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCertificateAuthorityCsrResponse.Merge(m, src)
}
func (m *GetCertificateAuthorityCsrResponse) XXX_Size() int {
	return xxx_messageInfo_GetCertificateAuthorityCsrResponse.Size(m)
}
func (m *GetCertificateAuthorityCsrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCertificateAuthorityCsrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCertificateAuthorityCsrResponse proto.InternalMessageInfo

func (m *GetCertificateAuthorityCsrResponse) GetPemCsr() string {
	if m != nil {
		return m.PemCsr
	}
	return ""
}

// Request message for
// [CertificateAuthorityService.ActivateCertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.ActivateCertificateAuthority].
type ActivateCertificateAuthorityRequest struct {
	// Required. The resource name for this [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] in the
	// format `projects/*/locations/*/certificateAuthorities/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The signed CA certificate issued from
	// [GetCertificateAuthorityCsrResponse.pem_csr][google.cloud.security.privateca.v1alpha1.GetCertificateAuthorityCsrResponse.pem_csr].
	PemCaCertificate string `protobuf:"bytes,2,opt,name=pem_ca_certificate,json=pemCaCertificate,proto3" json:"pem_ca_certificate,omitempty"`
	// Required. Must include the issuer of 'pem_ca_certificate', and any further issuers
	// until the self-signed CA. Expected to be in issuer-to-root order according
	// to RFC 5246.
	PemCaCertificateChain []string `protobuf:"bytes,3,rep,name=pem_ca_certificate_chain,json=pemCaCertificateChain,proto3" json:"pem_ca_certificate_chain,omitempty"`
	// Optional. An ID to identify requests. Specify a unique request ID so that if you must
	// retry your request, the server will know to ignore the request if it has
	// already been completed. The server will guarantee that for at least 60
	// minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and t
	// he request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId            string   `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActivateCertificateAuthorityRequest) Reset()         { *m = ActivateCertificateAuthorityRequest{} }
func (m *ActivateCertificateAuthorityRequest) String() string { return proto.CompactTextString(m) }
func (*ActivateCertificateAuthorityRequest) ProtoMessage()    {}
func (*ActivateCertificateAuthorityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{23}
}

func (m *ActivateCertificateAuthorityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActivateCertificateAuthorityRequest.Unmarshal(m, b)
}
func (m *ActivateCertificateAuthorityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActivateCertificateAuthorityRequest.Marshal(b, m, deterministic)
}
func (m *ActivateCertificateAuthorityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivateCertificateAuthorityRequest.Merge(m, src)
}
func (m *ActivateCertificateAuthorityRequest) XXX_Size() int {
	return xxx_messageInfo_ActivateCertificateAuthorityRequest.Size(m)
}
func (m *ActivateCertificateAuthorityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivateCertificateAuthorityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ActivateCertificateAuthorityRequest proto.InternalMessageInfo

func (m *ActivateCertificateAuthorityRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ActivateCertificateAuthorityRequest) GetPemCaCertificate() string {
	if m != nil {
		return m.PemCaCertificate
	}
	return ""
}

func (m *ActivateCertificateAuthorityRequest) GetPemCaCertificateChain() []string {
	if m != nil {
		return m.PemCaCertificateChain
	}
	return nil
}

func (m *ActivateCertificateAuthorityRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// Request message for
// [CertificateAuthorityService.DisableCertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.DisableCertificateAuthority].
type DisableCertificateAuthorityRequest struct {
	// Required. The resource name for this [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] in the
	// format `projects/*/locations/*/certificateAuthorities/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. An ID to identify requests. Specify a unique request ID so that if you must
	// retry your request, the server will know to ignore the request if it has
	// already been completed. The server will guarantee that for at least 60
	// minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and t
	// he request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId            string   `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisableCertificateAuthorityRequest) Reset()         { *m = DisableCertificateAuthorityRequest{} }
func (m *DisableCertificateAuthorityRequest) String() string { return proto.CompactTextString(m) }
func (*DisableCertificateAuthorityRequest) ProtoMessage()    {}
func (*DisableCertificateAuthorityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{24}
}

func (m *DisableCertificateAuthorityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisableCertificateAuthorityRequest.Unmarshal(m, b)
}
func (m *DisableCertificateAuthorityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisableCertificateAuthorityRequest.Marshal(b, m, deterministic)
}
func (m *DisableCertificateAuthorityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisableCertificateAuthorityRequest.Merge(m, src)
}
func (m *DisableCertificateAuthorityRequest) XXX_Size() int {
	return xxx_messageInfo_DisableCertificateAuthorityRequest.Size(m)
}
func (m *DisableCertificateAuthorityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisableCertificateAuthorityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisableCertificateAuthorityRequest proto.InternalMessageInfo

func (m *DisableCertificateAuthorityRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DisableCertificateAuthorityRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// Request message for
// [CertificateAuthorityService.EnableCertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.EnableCertificateAuthority].
type EnableCertificateAuthorityRequest struct {
	// Required. The resource name for this [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] in the
	// format `projects/*/locations/*/certificateAuthorities/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. An ID to identify requests. Specify a unique request ID so that if you must
	// retry your request, the server will know to ignore the request if it has
	// already been completed. The server will guarantee that for at least 60
	// minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and t
	// he request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId            string   `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnableCertificateAuthorityRequest) Reset()         { *m = EnableCertificateAuthorityRequest{} }
func (m *EnableCertificateAuthorityRequest) String() string { return proto.CompactTextString(m) }
func (*EnableCertificateAuthorityRequest) ProtoMessage()    {}
func (*EnableCertificateAuthorityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{25}
}

func (m *EnableCertificateAuthorityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnableCertificateAuthorityRequest.Unmarshal(m, b)
}
func (m *EnableCertificateAuthorityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnableCertificateAuthorityRequest.Marshal(b, m, deterministic)
}
func (m *EnableCertificateAuthorityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableCertificateAuthorityRequest.Merge(m, src)
}
func (m *EnableCertificateAuthorityRequest) XXX_Size() int {
	return xxx_messageInfo_EnableCertificateAuthorityRequest.Size(m)
}
func (m *EnableCertificateAuthorityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableCertificateAuthorityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnableCertificateAuthorityRequest proto.InternalMessageInfo

func (m *EnableCertificateAuthorityRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EnableCertificateAuthorityRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// Request message for
// [CertificateAuthorityService.ScheduleDeleteCertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.ScheduleDeleteCertificateAuthority].
type ScheduleDeleteCertificateAuthorityRequest struct {
	// Required. The resource name for this [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] in the
	// format `projects/*/locations/*/certificateAuthorities/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. An ID to identify requests. Specify a unique request ID so that if you must
	// retry your request, the server will know to ignore the request if it has
	// already been completed. The server will guarantee that for at least 60
	// minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and t
	// he request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId            string   `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScheduleDeleteCertificateAuthorityRequest) Reset() {
	*m = ScheduleDeleteCertificateAuthorityRequest{}
}
func (m *ScheduleDeleteCertificateAuthorityRequest) String() string {
	return proto.CompactTextString(m)
}
func (*ScheduleDeleteCertificateAuthorityRequest) ProtoMessage() {}
func (*ScheduleDeleteCertificateAuthorityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{26}
}

func (m *ScheduleDeleteCertificateAuthorityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScheduleDeleteCertificateAuthorityRequest.Unmarshal(m, b)
}
func (m *ScheduleDeleteCertificateAuthorityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScheduleDeleteCertificateAuthorityRequest.Marshal(b, m, deterministic)
}
func (m *ScheduleDeleteCertificateAuthorityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleDeleteCertificateAuthorityRequest.Merge(m, src)
}
func (m *ScheduleDeleteCertificateAuthorityRequest) XXX_Size() int {
	return xxx_messageInfo_ScheduleDeleteCertificateAuthorityRequest.Size(m)
}
func (m *ScheduleDeleteCertificateAuthorityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleDeleteCertificateAuthorityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleDeleteCertificateAuthorityRequest proto.InternalMessageInfo

func (m *ScheduleDeleteCertificateAuthorityRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ScheduleDeleteCertificateAuthorityRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// Request message for
// [CertificateAuthorityService.RestoreCertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.RestoreCertificateAuthority].
type RestoreCertificateAuthorityRequest struct {
	// Required. The resource name for this [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] in the
	// format `projects/*/locations/*/certificateAuthorities/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. An ID to identify requests. Specify a unique request ID so that if you must
	// retry your request, the server will know to ignore the request if it has
	// already been completed. The server will guarantee that for at least 60
	// minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and t
	// he request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId            string   `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestoreCertificateAuthorityRequest) Reset()         { *m = RestoreCertificateAuthorityRequest{} }
func (m *RestoreCertificateAuthorityRequest) String() string { return proto.CompactTextString(m) }
func (*RestoreCertificateAuthorityRequest) ProtoMessage()    {}
func (*RestoreCertificateAuthorityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{27}
}

func (m *RestoreCertificateAuthorityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestoreCertificateAuthorityRequest.Unmarshal(m, b)
}
func (m *RestoreCertificateAuthorityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestoreCertificateAuthorityRequest.Marshal(b, m, deterministic)
}
func (m *RestoreCertificateAuthorityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestoreCertificateAuthorityRequest.Merge(m, src)
}
func (m *RestoreCertificateAuthorityRequest) XXX_Size() int {
	return xxx_messageInfo_RestoreCertificateAuthorityRequest.Size(m)
}
func (m *RestoreCertificateAuthorityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestoreCertificateAuthorityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestoreCertificateAuthorityRequest proto.InternalMessageInfo

func (m *RestoreCertificateAuthorityRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RestoreCertificateAuthorityRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// Request message for
// [CertificateAuthorityService.RevokeCertificate][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.RevokeCertificate].
type RevokeCertificateRequest struct {
	// Required. The resource name for this [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] in the
	// format `projects/*/locations/*/certificateAuthorities/*/certificates/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The [RevocationReason][google.cloud.security.privateca.v1alpha1.RevocationReason] for revoking this certificate.
	Reason RevocationReason `protobuf:"varint,2,opt,name=reason,proto3,enum=google.cloud.security.privateca.v1alpha1.RevocationReason" json:"reason,omitempty"`
	// Optional. An ID to identify requests. Specify a unique request ID so that if you must
	// retry your request, the server will know to ignore the request if it has
	// already been completed. The server will guarantee that for at least 60
	// minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and t
	// he request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId            string   `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevokeCertificateRequest) Reset()         { *m = RevokeCertificateRequest{} }
func (m *RevokeCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*RevokeCertificateRequest) ProtoMessage()    {}
func (*RevokeCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{28}
}

func (m *RevokeCertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevokeCertificateRequest.Unmarshal(m, b)
}
func (m *RevokeCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevokeCertificateRequest.Marshal(b, m, deterministic)
}
func (m *RevokeCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevokeCertificateRequest.Merge(m, src)
}
func (m *RevokeCertificateRequest) XXX_Size() int {
	return xxx_messageInfo_RevokeCertificateRequest.Size(m)
}
func (m *RevokeCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RevokeCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RevokeCertificateRequest proto.InternalMessageInfo

func (m *RevokeCertificateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RevokeCertificateRequest) GetReason() RevocationReason {
	if m != nil {
		return m.Reason
	}
	return RevocationReason_REVOCATION_REASON_UNSPECIFIED
}

func (m *RevokeCertificateRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

// Request message for
// [CertificateAuthorityService.PublishCertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.PublishCertificateRevocationList].
type PublishCertificateRevocationListRequest struct {
	// Required. The resource name of the location and [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority], in the
	// format `projects/*/locations/*/certificateAuthorities/*`.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishCertificateRevocationListRequest) Reset() {
	*m = PublishCertificateRevocationListRequest{}
}
func (m *PublishCertificateRevocationListRequest) String() string { return proto.CompactTextString(m) }
func (*PublishCertificateRevocationListRequest) ProtoMessage()    {}
func (*PublishCertificateRevocationListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{29}
}

func (m *PublishCertificateRevocationListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishCertificateRevocationListRequest.Unmarshal(m, b)
}
func (m *PublishCertificateRevocationListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishCertificateRevocationListRequest.Marshal(b, m, deterministic)
}
func (m *PublishCertificateRevocationListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishCertificateRevocationListRequest.Merge(m, src)
}
func (m *PublishCertificateRevocationListRequest) XXX_Size() int {
	return xxx_messageInfo_PublishCertificateRevocationListRequest.Size(m)
}
func (m *PublishCertificateRevocationListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishCertificateRevocationListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishCertificateRevocationListRequest proto.InternalMessageInfo

func (m *PublishCertificateRevocationListRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Response message for
// [CertificateAuthorityService.PublishCertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateAuthorityService.PublishCertificateRevocationList].
type PublishCertificateRevocationListResponse struct {
	// Output only. The PEM-encoded signed certificate revocation list (CRL).
	PemCrl               string   `protobuf:"bytes,1,opt,name=pem_crl,json=pemCrl,proto3" json:"pem_crl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishCertificateRevocationListResponse) Reset() {
	*m = PublishCertificateRevocationListResponse{}
}
func (m *PublishCertificateRevocationListResponse) String() string { return proto.CompactTextString(m) }
func (*PublishCertificateRevocationListResponse) ProtoMessage()    {}
func (*PublishCertificateRevocationListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{30}
}

func (m *PublishCertificateRevocationListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishCertificateRevocationListResponse.Unmarshal(m, b)
}
func (m *PublishCertificateRevocationListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishCertificateRevocationListResponse.Marshal(b, m, deterministic)
}
func (m *PublishCertificateRevocationListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishCertificateRevocationListResponse.Merge(m, src)
}
func (m *PublishCertificateRevocationListResponse) XXX_Size() int {
	return xxx_messageInfo_PublishCertificateRevocationListResponse.Size(m)
}
func (m *PublishCertificateRevocationListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishCertificateRevocationListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishCertificateRevocationListResponse proto.InternalMessageInfo

func (m *PublishCertificateRevocationListResponse) GetPemCrl() string {
	if m != nil {
		return m.PemCrl
	}
	return ""
}

// Represents the metadata of the long-running operation.
type OperationMetadata struct {
	// Output only. The time the operation was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time the operation finished running.
	EndTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Output only. Server-defined resource path for the target of the operation.
	Target string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// Output only. Name of the verb executed by the operation.
	Verb string `protobuf:"bytes,4,opt,name=verb,proto3" json:"verb,omitempty"`
	// Output only. Human-readable status of the operation, if any.
	StatusMessage string `protobuf:"bytes,5,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// Output only. Identifies whether the user has requested cancellation
	// of the operation. Operations that have successfully been cancelled
	// have [Operation.error][] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
	// corresponding to `Code.CANCELLED`.
	RequestedCancellation bool `protobuf:"varint,6,opt,name=requested_cancellation,json=requestedCancellation,proto3" json:"requested_cancellation,omitempty"`
	// Output only. API version used to start the operation.
	ApiVersion           string   `protobuf:"bytes,7,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperationMetadata) Reset()         { *m = OperationMetadata{} }
func (m *OperationMetadata) String() string { return proto.CompactTextString(m) }
func (*OperationMetadata) ProtoMessage()    {}
func (*OperationMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a2d125abc43e0c9, []int{31}
}

func (m *OperationMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperationMetadata.Unmarshal(m, b)
}
func (m *OperationMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperationMetadata.Marshal(b, m, deterministic)
}
func (m *OperationMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationMetadata.Merge(m, src)
}
func (m *OperationMetadata) XXX_Size() int {
	return xxx_messageInfo_OperationMetadata.Size(m)
}
func (m *OperationMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_OperationMetadata proto.InternalMessageInfo

func (m *OperationMetadata) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *OperationMetadata) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *OperationMetadata) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *OperationMetadata) GetVerb() string {
	if m != nil {
		return m.Verb
	}
	return ""
}

func (m *OperationMetadata) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *OperationMetadata) GetRequestedCancellation() bool {
	if m != nil {
		return m.RequestedCancellation
	}
	return false
}

func (m *OperationMetadata) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func init() {
	proto.RegisterType((*ListCertificateAuthoritiesRequest)(nil), "google.cloud.security.privateca.v1alpha1.ListCertificateAuthoritiesRequest")
	proto.RegisterType((*ListCertificateRevocationListsRequest)(nil), "google.cloud.security.privateca.v1alpha1.ListCertificateRevocationListsRequest")
	proto.RegisterType((*ListCertificatesRequest)(nil), "google.cloud.security.privateca.v1alpha1.ListCertificatesRequest")
	proto.RegisterType((*ListReusableConfigsRequest)(nil), "google.cloud.security.privateca.v1alpha1.ListReusableConfigsRequest")
	proto.RegisterType((*ListCertificateAuthoritiesResponse)(nil), "google.cloud.security.privateca.v1alpha1.ListCertificateAuthoritiesResponse")
	proto.RegisterType((*ListCertificateRevocationListsResponse)(nil), "google.cloud.security.privateca.v1alpha1.ListCertificateRevocationListsResponse")
	proto.RegisterType((*ListCertificatesResponse)(nil), "google.cloud.security.privateca.v1alpha1.ListCertificatesResponse")
	proto.RegisterType((*ListReusableConfigsResponse)(nil), "google.cloud.security.privateca.v1alpha1.ListReusableConfigsResponse")
	proto.RegisterType((*GetCertificateAuthorityRequest)(nil), "google.cloud.security.privateca.v1alpha1.GetCertificateAuthorityRequest")
	proto.RegisterType((*GetCertificateRevocationListRequest)(nil), "google.cloud.security.privateca.v1alpha1.GetCertificateRevocationListRequest")
	proto.RegisterType((*GetCertificateRequest)(nil), "google.cloud.security.privateca.v1alpha1.GetCertificateRequest")
	proto.RegisterType((*GetReusableConfigRequest)(nil), "google.cloud.security.privateca.v1alpha1.GetReusableConfigRequest")
	proto.RegisterType((*CreateCertificateAuthorityRequest)(nil), "google.cloud.security.privateca.v1alpha1.CreateCertificateAuthorityRequest")
	proto.RegisterType((*CreateCertificateRevocationListRequest)(nil), "google.cloud.security.privateca.v1alpha1.CreateCertificateRevocationListRequest")
	proto.RegisterType((*CreateCertificateRequest)(nil), "google.cloud.security.privateca.v1alpha1.CreateCertificateRequest")
	proto.RegisterType((*CreateReusableConfigRequest)(nil), "google.cloud.security.privateca.v1alpha1.CreateReusableConfigRequest")
	proto.RegisterType((*UpdateCertificateAuthorityRequest)(nil), "google.cloud.security.privateca.v1alpha1.UpdateCertificateAuthorityRequest")
	proto.RegisterType((*UpdateCertificateRevocationListRequest)(nil), "google.cloud.security.privateca.v1alpha1.UpdateCertificateRevocationListRequest")
	proto.RegisterType((*UpdateCertificateRequest)(nil), "google.cloud.security.privateca.v1alpha1.UpdateCertificateRequest")
	proto.RegisterType((*UpdateReusableConfigRequest)(nil), "google.cloud.security.privateca.v1alpha1.UpdateReusableConfigRequest")
	proto.RegisterType((*DeleteCertificateAuthorityRequest)(nil), "google.cloud.security.privateca.v1alpha1.DeleteCertificateAuthorityRequest")
	proto.RegisterType((*GetCertificateAuthorityCsrRequest)(nil), "google.cloud.security.privateca.v1alpha1.GetCertificateAuthorityCsrRequest")
	proto.RegisterType((*GetCertificateAuthorityCsrResponse)(nil), "google.cloud.security.privateca.v1alpha1.GetCertificateAuthorityCsrResponse")
	proto.RegisterType((*ActivateCertificateAuthorityRequest)(nil), "google.cloud.security.privateca.v1alpha1.ActivateCertificateAuthorityRequest")
	proto.RegisterType((*DisableCertificateAuthorityRequest)(nil), "google.cloud.security.privateca.v1alpha1.DisableCertificateAuthorityRequest")
	proto.RegisterType((*EnableCertificateAuthorityRequest)(nil), "google.cloud.security.privateca.v1alpha1.EnableCertificateAuthorityRequest")
	proto.RegisterType((*ScheduleDeleteCertificateAuthorityRequest)(nil), "google.cloud.security.privateca.v1alpha1.ScheduleDeleteCertificateAuthorityRequest")
	proto.RegisterType((*RestoreCertificateAuthorityRequest)(nil), "google.cloud.security.privateca.v1alpha1.RestoreCertificateAuthorityRequest")
	proto.RegisterType((*RevokeCertificateRequest)(nil), "google.cloud.security.privateca.v1alpha1.RevokeCertificateRequest")
	proto.RegisterType((*PublishCertificateRevocationListRequest)(nil), "google.cloud.security.privateca.v1alpha1.PublishCertificateRevocationListRequest")
	proto.RegisterType((*PublishCertificateRevocationListResponse)(nil), "google.cloud.security.privateca.v1alpha1.PublishCertificateRevocationListResponse")
	proto.RegisterType((*OperationMetadata)(nil), "google.cloud.security.privateca.v1alpha1.OperationMetadata")
}

func init() {
	proto.RegisterFile("google/cloud/security/privateca/v1alpha1/service.proto", fileDescriptor_0a2d125abc43e0c9)
}

var fileDescriptor_0a2d125abc43e0c9 = []byte{
	// 2433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5b, 0xdd, 0x6f, 0xdc, 0x58,
	0xd9, 0xd7, 0xf1, 0x74, 0xd3, 0xf6, 0xc9, 0xdb, 0xb4, 0x3d, 0x6f, 0xbb, 0x9d, 0x7a, 0x4a, 0x3b,
	0x71, 0x97, 0x36, 0x89, 0xb2, 0x33, 0x4a, 0xa0, 0x68, 0x77, 0x96, 0x85, 0x3a, 0xd3, 0xd2, 0x84,
	0x4d, 0x36, 0xe9, 0xa4, 0x04, 0x95, 0xfd, 0x18, 0x1c, 0xcf, 0xc9, 0xc4, 0x1b, 0x8f, 0x6d, 0x6c,
	0x4f, 0xba, 0x59, 0x96, 0x0f, 0x01, 0x5b, 0xad, 0x00, 0xa9, 0x12, 0x7b, 0xc1, 0xc7, 0x0d, 0x20,
	0x96, 0x15, 0x02, 0x71, 0xc5, 0x1f, 0x80, 0xd0, 0x8a, 0x9b, 0x08, 0x21, 0x04, 0xe2, 0x82, 0x22,
	0xa1, 0x0a, 0x21, 0x01, 0x5a, 0x09, 0x71, 0x81, 0x04, 0x14, 0x21, 0x21, 0xfb, 0x78, 0x66, 0x6c,
	0xcf, 0xf1, 0xd8, 0x9e, 0x99, 0x44, 0xd1, 0x5e, 0xe6, 0x9c, 0xf3, 0x7c, 0xfd, 0x7c, 0x9e, 0xdf,
	0x39, 0xe7, 0x79, 0x32, 0xf0, 0x81, 0xba, 0xae, 0xd7, 0x55, 0x52, 0x94, 0x55, 0xbd, 0x59, 0x2b,
	0x5a, 0x44, 0x6e, 0x9a, 0x8a, 0xbd, 0x53, 0x34, 0x4c, 0x65, 0x5b, 0xb2, 0x89, 0x2c, 0x15, 0xb7,
	0x67, 0x24, 0xd5, 0xd8, 0x94, 0x66, 0x8a, 0x16, 0x31, 0xb7, 0x15, 0x99, 0x14, 0x0c, 0x53, 0xb7,
	0x75, 0x3c, 0x41, 0xe5, 0x0a, 0xae, 0x5c, 0xa1, 0x25, 0x57, 0x68, 0xcb, 0x15, 0x5a, 0x72, 0xfc,
	0x39, 0xcf, 0x82, 0x64, 0x28, 0x45, 0x49, 0xd3, 0x74, 0x5b, 0xb2, 0x15, 0x5d, 0xb3, 0xa8, 0x1e,
	0xfe, 0x8c, 0x6f, 0x56, 0x56, 0x15, 0xa2, 0xd9, 0xde, 0xc4, 0x05, 0xdf, 0xc4, 0x86, 0x42, 0xd4,
	0x5a, 0x75, 0x9d, 0x6c, 0x4a, 0xdb, 0x8a, 0x6e, 0x7a, 0x0b, 0xce, 0xfa, 0x16, 0x98, 0xc4, 0xd2,
	0x9b, 0x66, 0xcb, 0x39, 0xfe, 0x89, 0xc4, 0x41, 0xb5, 0x04, 0x5b, 0xee, 0x5c, 0xf4, 0x24, 0x55,
	0x5d, 0xab, 0x9b, 0x4d, 0x4d, 0x53, 0xb4, 0x7a, 0x51, 0x37, 0x88, 0x19, 0xf0, 0x39, 0xef, 0x2d,
	0x72, 0xff, 0x5a, 0x6f, 0x6e, 0x78, 0xfe, 0x35, 0x24, 0x6b, 0x2b, 0xe4, 0x7c, 0x7b, 0x85, 0xad,
	0x34, 0x88, 0x65, 0x4b, 0x0d, 0x83, 0x2e, 0x10, 0xfe, 0x8a, 0x60, 0x7c, 0x51, 0xb1, 0xec, 0x32,
	0x31, 0x6d, 0x65, 0x43, 0x91, 0x25, 0x9b, 0x88, 0x4d, 0x7b, 0x53, 0x37, 0x15, 0x5b, 0x21, 0x56,
	0x85, 0x7c, 0xaa, 0x49, 0x2c, 0x1b, 0x8b, 0x30, 0x62, 0x48, 0x26, 0xd1, 0xec, 0x2c, 0xca, 0xa3,
	0x89, 0xa3, 0x73, 0x93, 0x0f, 0x44, 0xee, 0xa1, 0x78, 0x11, 0xc6, 0x55, 0x5d, 0xf6, 0x3c, 0xa2,
	0x86, 0x24, 0x43, 0xb1, 0x0a, 0xb2, 0xde, 0x28, 0x2e, 0x7a, 0x13, 0x15, 0x4f, 0x10, 0xe7, 0xe1,
	0xa8, 0x21, 0xd5, 0x49, 0xd5, 0x52, 0x5e, 0x21, 0x59, 0x2e, 0x8f, 0x26, 0x1e, 0x99, 0xcb, 0x3c,
	0x10, 0x51, 0xe5, 0x88, 0x33, 0xba, 0xaa, 0xbc, 0x42, 0xb0, 0x00, 0xe0, 0xae, 0xb0, 0xf5, 0x2d,
	0xa2, 0x65, 0x33, 0xae, 0x21, 0x77, 0x89, 0x2b, 0x78, 0xcb, 0x19, 0xc5, 0x39, 0x18, 0xd9, 0x50,
	0x54, 0x9b, 0x98, 0xd9, 0x43, 0x9d, 0x79, 0x6f, 0x08, 0x9f, 0x87, 0x23, 0xba, 0x59, 0x23, 0x66,
	0x75, 0x7d, 0x27, 0xfb, 0x48, 0x67, 0xfa, 0xb0, 0x3b, 0x38, 0xb7, 0x23, 0xfc, 0x1b, 0xc1, 0x7b,
	0x43, 0xb1, 0x56, 0xc8, 0xb6, 0xe7, 0xa8, 0x33, 0xd1, 0x8e, 0x77, 0x29, 0x14, 0xef, 0x15, 0x37,
	0xde, 0x22, 0x3c, 0xde, 0xd9, 0x56, 0xa1, 0x78, 0x19, 0xf8, 0xed, 0x1c, 0xa4, 0xd8, 0xdf, 0x41,
	0x70, 0x26, 0x14, 0xfb, 0xbb, 0x38, 0xda, 0x3f, 0x22, 0xe0, 0x9d, 0x68, 0x2b, 0xa4, 0x69, 0x49,
	0xeb, 0x2a, 0x29, 0xeb, 0xda, 0x86, 0x52, 0x7f, 0x97, 0x6d, 0xe7, 0x3f, 0x23, 0x10, 0x7a, 0xa5,
	0xae, 0x65, 0xe8, 0x9a, 0x45, 0xf0, 0x1d, 0x38, 0x23, 0x77, 0x56, 0x54, 0xa5, 0xce, 0x92, 0x2c,
	0xca, 0x67, 0x26, 0x46, 0x67, 0x3f, 0x54, 0x48, 0x4a, 0xa1, 0x05, 0xe6, 0x77, 0x7f, 0x54, 0x66,
	0x3a, 0x80, 0x2f, 0xc1, 0x71, 0x8d, 0xbc, 0x6c, 0x57, 0x7d, 0x28, 0x38, 0x40, 0x1d, 0xad, 0x1c,
	0x73, 0x86, 0x57, 0xda, 0x20, 0xe4, 0x61, 0xb4, 0xa9, 0x99, 0x44, 0x92, 0x37, 0x9d, 0x4f, 0x95,
	0xcd, 0xe4, 0x33, 0x13, 0x47, 0x2b, 0xfe, 0x21, 0xe1, 0x21, 0x82, 0x4b, 0x71, 0x89, 0xeb, 0x45,
	0xfb, 0x1a, 0x82, 0x73, 0xfe, 0x70, 0xcd, 0xf6, 0xba, 0xaa, 0xea, 0x2c, 0xf4, 0x62, 0x2e, 0xf7,
	0x15, 0x73, 0xd0, 0x68, 0x85, 0x97, 0x23, 0xfd, 0x19, 0x62, 0xf0, 0x3f, 0x45, 0x90, 0xed, 0xce,
	0x5c, 0x2f, 0xdc, 0xdb, 0xf0, 0x7f, 0x3e, 0x27, 0x5a, 0xd1, 0x5d, 0xe9, 0x2f, 0xba, 0x80, 0xaa,
	0x21, 0x46, 0xf0, 0x0b, 0x04, 0x39, 0x66, 0x36, 0x7a, 0x41, 0xc8, 0x70, 0xc2, 0xf4, 0xa6, 0xaa,
	0x32, 0x9d, 0xf3, 0x02, 0x79, 0x22, 0x79, 0x20, 0x41, 0xe5, 0x95, 0xe3, 0x66, 0xd0, 0xd8, 0x10,
	0xc3, 0xd9, 0x82, 0xf3, 0x37, 0x88, 0xcd, 0x4c, 0x05, 0x8f, 0x5f, 0x16, 0xe0, 0x90, 0x26, 0x35,
	0xc8, 0x60, 0x74, 0xea, 0xaa, 0x10, 0x9a, 0x70, 0x31, 0x68, 0x2c, 0xb4, 0x07, 0x3d, 0x8b, 0xcf,
	0x06, 0x2c, 0x96, 0x5c, 0x8b, 0xef, 0x87, 0xd9, 0x24, 0x16, 0x43, 0x0a, 0xa9, 0xd9, 0xdb, 0x70,
	0x3a, 0x6c, 0x96, 0x1a, 0xba, 0x1a, 0x30, 0x34, 0xed, 0x1a, 0xba, 0x04, 0x8f, 0x25, 0x32, 0x44,
	0x55, 0x57, 0x21, 0x7b, 0x83, 0x84, 0xf6, 0x42, 0x4b, 0x7b, 0x39, 0xa0, 0xbd, 0xe8, 0x6a, 0x9f,
	0x84, 0xcb, 0x91, 0xda, 0x43, 0x5a, 0xa8, 0x81, 0xb7, 0x39, 0x18, 0x2f, 0x9b, 0x44, 0xb2, 0x49,
	0xaf, 0x6f, 0x34, 0x84, 0x33, 0xe0, 0x69, 0xc8, 0xb2, 0x98, 0x75, 0xa7, 0xaa, 0xd4, 0xe8, 0xde,
	0x72, 0x08, 0x9b, 0x63, 0xf2, 0xe3, 0xce, 0x42, 0x0d, 0xbf, 0x0c, 0xa7, 0x99, 0xe2, 0xee, 0x59,
	0x31, 0x30, 0x2d, 0x53, 0xdb, 0xa7, 0x58, 0xb6, 0x9d, 0xa3, 0xc9, 0xa4, 0x30, 0x38, 0xae, 0xfa,
	0x8e, 0x9e, 0xa3, 0xde, 0xf0, 0x42, 0x4d, 0xf8, 0x3b, 0x07, 0x97, 0xba, 0x50, 0x64, 0x6f, 0xbe,
	0x21, 0xdf, 0x1f, 0xe6, 0xe1, 0x7c, 0x0f, 0x06, 0x0f, 0x81, 0x9b, 0x8b, 0xe4, 0xe0, 0x85, 0x1a,
	0x7e, 0x1d, 0x41, 0xae, 0x87, 0x2a, 0x0f, 0xe8, 0x61, 0x9c, 0x05, 0xd4, 0x99, 0xb3, 0x91, 0xce,
	0x24, 0x82, 0xfc, 0xeb, 0x1c, 0x64, 0x19, 0x90, 0xef, 0x09, 0xc8, 0x53, 0x30, 0xe6, 0x47, 0x26,
	0x08, 0xea, 0x31, 0xdf, 0xd4, 0x42, 0x0d, 0x3f, 0x0f, 0xa3, 0xbe, 0x01, 0x0f, 0xb5, 0xfe, 0xce,
	0x18, 0xaa, 0xdf, 0xaf, 0x2e, 0x11, 0x32, 0xdf, 0xe6, 0x20, 0x47, 0x91, 0x61, 0xf3, 0xc6, 0x10,
	0x92, 0x79, 0x06, 0x70, 0xe8, 0x10, 0x0a, 0x81, 0x72, 0x22, 0x78, 0xa2, 0x2c, 0xd4, 0xf0, 0x06,
	0x1c, 0x0f, 0x89, 0x78, 0xd8, 0xf4, 0x7d, 0x6c, 0x51, 0x4b, 0x63, 0x41, 0x4b, 0x89, 0x10, 0xfa,
	0x22, 0x07, 0xe3, 0x1f, 0x33, 0x6a, 0x31, 0xa4, 0x17, 0x49, 0x39, 0x68, 0xaf, 0x29, 0xe7, 0x2a,
	0x8c, 0x36, 0x5d, 0xf7, 0xdc, 0xd7, 0xa9, 0x8b, 0xeb, 0xe8, 0x2c, 0xdf, 0xb2, 0xd7, 0x7a, 0x9e,
	0x16, 0x3e, 0xe2, 0x3c, 0x60, 0x97, 0x24, 0x6b, 0x8b, 0xea, 0x02, 0x2a, 0xe3, 0x0c, 0x84, 0x50,
	0xc8, 0x30, 0x51, 0xf8, 0x26, 0x07, 0x97, 0xba, 0x50, 0x60, 0x93, 0x56, 0x1c, 0x37, 0xa0, 0xfd,
	0xe3, 0x86, 0xfd, 0xc1, 0xe6, 0x0f, 0x08, 0xb2, 0x0c, 0x6c, 0x28, 0x1a, 0xa1, 0x14, 0x47, 0xc3,
	0x4d, 0xf1, 0xfd, 0x09, 0xf0, 0x1d, 0x04, 0x39, 0x1a, 0x20, 0x9b, 0x24, 0x18, 0xe9, 0x8a, 0xf6,
	0x22, 0x5d, 0xf7, 0x27, 0xda, 0xaf, 0x21, 0x18, 0xbf, 0x46, 0x54, 0xd2, 0x3b, 0xe1, 0x87, 0x77,
	0x13, 0x0d, 0x39, 0xc5, 0x31, 0x9d, 0xd2, 0x60, 0x3c, 0xe2, 0x6a, 0x5c, 0xb6, 0xcc, 0x3d, 0xb8,
	0x1d, 0xcf, 0x81, 0xd0, 0xcb, 0x9e, 0xf7, 0xbe, 0x38, 0x07, 0x87, 0x0d, 0xd2, 0xa8, 0xca, 0x96,
	0xe9, 0xd9, 0xcc, 0x3c, 0x10, 0x33, 0x95, 0x11, 0x83, 0x34, 0xca, 0x96, 0x29, 0xbc, 0xc6, 0xc1,
	0x45, 0x51, 0xb6, 0x5d, 0xe3, 0xfb, 0x04, 0xe5, 0x0c, 0x60, 0xd7, 0x21, 0xa9, 0xea, 0x4f, 0x3a,
	0xff, 0x59, 0xe3, 0xf8, 0x26, 0xf9, 0x34, 0xe0, 0x0f, 0x42, 0xb6, 0x5b, 0xa4, 0x2a, 0x6f, 0x4a,
	0x8a, 0x46, 0xdf, 0x28, 0x54, 0xf0, 0x74, 0x58, 0xb0, 0xec, 0xac, 0x48, 0x74, 0x82, 0xbc, 0x81,
	0x40, 0xb8, 0xa6, 0xd0, 0x8d, 0x7c, 0x70, 0x76, 0x94, 0xb3, 0xcd, 0xaf, 0x6b, 0x07, 0xcc, 0xa9,
	0x6f, 0x21, 0x98, 0x5c, 0x95, 0x37, 0x49, 0xad, 0xa9, 0x92, 0x03, 0x97, 0x83, 0xce, 0x77, 0xac,
	0x10, 0xcb, 0xd6, 0xcd, 0x83, 0xe4, 0xd5, 0xef, 0x10, 0x64, 0x9d, 0x63, 0x6f, 0x8b, 0xec, 0xc5,
	0xa3, 0x12, 0x7f, 0x1c, 0x46, 0x4c, 0x22, 0x59, 0x3a, 0x7d, 0xd4, 0x8f, 0xcd, 0x96, 0xd2, 0x50,
	0x7a, 0xeb, 0x30, 0xae, 0xb8, 0x1a, 0x68, 0x22, 0x79, 0xea, 0x12, 0x51, 0xb1, 0x0d, 0x97, 0x57,
	0x9a, 0xeb, 0xaa, 0x62, 0x6d, 0xc6, 0xde, 0x3a, 0x86, 0xc8, 0x7d, 0xf3, 0x30, 0x11, 0x6f, 0x35,
	0xc4, 0x80, 0xa6, 0xda, 0xc5, 0x80, 0xa6, 0x2a, 0xfc, 0x96, 0x83, 0x93, 0xcb, 0xad, 0xde, 0xc2,
	0x12, 0xb1, 0xa5, 0x9a, 0x64, 0x4b, 0xce, 0x31, 0x26, 0xbb, 0x57, 0xee, 0xaa, 0xad, 0x34, 0x5a,
	0x57, 0x82, 0xee, 0x63, 0xec, 0x56, 0xab, 0xa1, 0x40, 0x75, 0x02, 0x95, 0x71, 0x46, 0x71, 0x09,
	0x8e, 0x10, 0xad, 0x46, 0xc5, 0xb9, 0x64, 0xe2, 0x87, 0x89, 0x56, 0x73, 0x65, 0x73, 0x30, 0x62,
	0x4b, 0x66, 0x9d, 0xd8, 0x1d, 0xcc, 0x33, 0x15, 0x6f, 0x08, 0x9f, 0x81, 0x43, 0xdb, 0xc4, 0x5c,
	0xef, 0x10, 0x59, 0xa6, 0xe2, 0x0e, 0x38, 0xaf, 0x1a, 0xcb, 0x96, 0xec, 0xa6, 0x55, 0x6d, 0x10,
	0xcb, 0x92, 0xea, 0xa4, 0x53, 0x38, 0xcd, 0x54, 0x8e, 0xd1, 0xa9, 0x25, 0x3a, 0x83, 0x4b, 0xf0,
	0xa8, 0xf7, 0x09, 0x49, 0xad, 0x2a, 0x4b, 0x9a, 0x4c, 0x54, 0xd5, 0x45, 0x20, 0x3b, 0x92, 0x47,
	0x13, 0x47, 0xa8, 0xcc, 0xe9, 0xf6, 0x92, 0xb2, 0x6f, 0x05, 0x7e, 0x0c, 0x46, 0x25, 0x43, 0xa9,
	0x6e, 0x13, 0xd3, 0x72, 0x04, 0x0e, 0x77, 0x8c, 0x80, 0x64, 0x28, 0x6b, 0x74, 0x78, 0xf6, 0xee,
	0x93, 0x90, 0x63, 0x7d, 0xc0, 0x55, 0xda, 0xc0, 0xc2, 0x5f, 0xe6, 0x68, 0x95, 0x9a, 0x5d, 0xc0,
	0xc5, 0xcf, 0x24, 0xdf, 0xc3, 0xb1, 0x1d, 0x1c, 0x7e, 0x71, 0x38, 0xca, 0xe8, 0x7e, 0x12, 0x6e,
	0xde, 0x17, 0xbd, 0x77, 0xd3, 0x17, 0x7e, 0xf3, 0xa7, 0x37, 0xb8, 0x39, 0x7c, 0xb5, 0xd3, 0xc9,
	0xfa, 0x34, 0x9d, 0x78, 0xda, 0x30, 0xf5, 0x97, 0x88, 0x6c, 0x5b, 0xc5, 0xa9, 0x62, 0xfb, 0x15,
	0x56, 0x9c, 0xfa, 0x4c, 0x31, 0xa2, 0x5a, 0xfc, 0x13, 0x0e, 0xce, 0xf7, 0xae, 0xf1, 0xe2, 0xe5,
	0xbe, 0x63, 0x60, 0xb7, 0x79, 0xf8, 0x95, 0xe1, 0x29, 0xf4, 0x80, 0xd1, 0x82, 0xc0, 0x54, 0xf1,
	0x0b, 0x49, 0x81, 0x89, 0xc0, 0x25, 0x84, 0x58, 0x18, 0x92, 0xff, 0x20, 0x38, 0x11, 0x2e, 0x0e,
	0x63, 0xb1, 0xef, 0xb0, 0xda, 0xc8, 0xcc, 0x0d, 0xa2, 0xc2, 0xc3, 0xe2, 0x93, 0x41, 0x2c, 0x6e,
	0xe2, 0xe5, 0xe1, 0x62, 0x61, 0xe1, 0xbf, 0x21, 0xf8, 0x7f, 0x46, 0x61, 0x19, 0x5f, 0x4b, 0xe7,
	0x3d, 0xbb, 0x4b, 0xc4, 0x5f, 0x1f, 0x50, 0x8b, 0x07, 0xc3, 0x47, 0x83, 0x30, 0x3c, 0x85, 0x9f,
	0x4c, 0x9e, 0x2b, 0xe1, 0x22, 0xf6, 0x3f, 0x10, 0x9c, 0x89, 0xb8, 0xf0, 0xe2, 0xf9, 0xe4, 0xee,
	0xf6, 0x2e, 0x5f, 0xf3, 0x03, 0x96, 0x01, 0x84, 0xe5, 0xfb, 0xa2, 0x7b, 0x44, 0x31, 0xb8, 0xc1,
	0x19, 0x4e, 0xfd, 0xd1, 0xf1, 0x77, 0x38, 0x38, 0xd7, 0xab, 0x0a, 0x8e, 0x97, 0xfa, 0x8d, 0x9d,
	0x79, 0x4a, 0xf3, 0xc3, 0x78, 0xf5, 0x0b, 0xaa, 0x1f, 0x85, 0x20, 0x11, 0xf4, 0x83, 0x42, 0x0f,
	0x16, 0x70, 0x20, 0xfa, 0x0b, 0x82, 0xb1, 0x60, 0x68, 0xf8, 0xc3, 0xfd, 0x83, 0x42, 0x61, 0xe8,
	0xef, 0xfd, 0x2f, 0xbc, 0xe8, 0x0f, 0x3c, 0x98, 0xf5, 0x83, 0x06, 0xee, 0x86, 0xfa, 0x7b, 0x04,
	0x27, 0xbb, 0x3a, 0x08, 0x78, 0x2e, 0x55, 0xb4, 0xcc, 0x0a, 0x01, 0xdf, 0x77, 0x21, 0x40, 0x98,
	0xf7, 0xc7, 0x1c, 0x4c, 0xf1, 0x5e, 0x31, 0x87, 0xf2, 0xdb, 0x89, 0xee, 0x97, 0x1c, 0xf0, 0xd1,
	0xdd, 0x8b, 0x34, 0x97, 0x82, 0xd8, 0x1e, 0x08, 0xff, 0x9e, 0x96, 0x32, 0xdf, 0x7f, 0x99, 0x14,
	0xda, 0x37, 0x41, 0xe1, 0x6d, 0xb4, 0x2b, 0x4e, 0xc2, 0x29, 0xa6, 0x1f, 0xdd, 0x17, 0xc6, 0xfb,
	0xe2, 0x15, 0xca, 0x66, 0xd3, 0xcc, 0x12, 0xe3, 0x74, 0x54, 0xab, 0xc4, 0x85, 0xec, 0xb6, 0x30,
	0xf0, 0x0d, 0xa2, 0xc4, 0x2e, 0x6d, 0xe2, 0xaf, 0x66, 0xe0, 0x42, 0x4c, 0x23, 0x03, 0xaf, 0x0c,
	0x80, 0x2a, 0x9b, 0x42, 0x62, 0xa0, 0xfd, 0x27, 0xda, 0x15, 0x0b, 0x70, 0x36, 0xda, 0x23, 0x16,
	0xbe, 0x22, 0x03, 0xdf, 0x50, 0xd9, 0x72, 0xba, 0x77, 0xe7, 0xc4, 0xc5, 0xfa, 0x55, 0x61, 0x6f,
	0x2f, 0x25, 0xa5, 0x5e, 0x75, 0x55, 0xfc, 0x26, 0x07, 0x27, 0xbb, 0x30, 0x4c, 0x93, 0xbd, 0x51,
	0x1d, 0x92, 0x38, 0xc8, 0x7f, 0x84, 0x76, 0xc5, 0x3c, 0x8c, 0xfa, 0xad, 0xb2, 0x40, 0x1e, 0xef,
	0x06, 0x79, 0x3a, 0xd8, 0x29, 0x71, 0x41, 0x7c, 0x51, 0x18, 0xf6, 0x6d, 0xa6, 0x14, 0x28, 0x99,
	0x7e, 0x8f, 0x83, 0x53, 0xac, 0x8e, 0x07, 0xbe, 0x9e, 0x16, 0x29, 0x36, 0xd5, 0xc5, 0x80, 0xf5,
	0x26, 0xda, 0x15, 0x2f, 0xc2, 0x58, 0xc8, 0x36, 0x0b, 0xaf, 0x49, 0x0f, 0xaf, 0x50, 0x69, 0x75,
	0xba, 0xbb, 0x99, 0xe2, 0xe2, 0xb6, 0x28, 0xf4, 0x7f, 0xfd, 0x29, 0x85, 0xeb, 0xb7, 0xf8, 0x57,
	0x1c, 0xf0, 0xd1, 0x5d, 0x8f, 0x34, 0x64, 0x19, 0xdb, 0x3b, 0x89, 0x43, 0xec, 0xe7, 0x29, 0xc9,
	0x72, 0x9c, 0xcd, 0x92, 0xbe, 0xca, 0xb1, 0x8b, 0x97, 0x3e, 0xbb, 0xe6, 0xc3, 0x8b, 0x29, 0x53,
	0xe8, 0xeb, 0x52, 0x15, 0x45, 0x97, 0xf7, 0x32, 0x70, 0x21, 0xa6, 0x85, 0x92, 0x86, 0x2e, 0x93,
	0x75, 0x63, 0xe2, 0xc0, 0x7d, 0xd8, 0x0f, 0x5d, 0x5e, 0xee, 0xc5, 0x93, 0x61, 0x9c, 0xbf, 0x81,
	0x66, 0x77, 0x22, 0x80, 0x0e, 0x89, 0x16, 0x86, 0x7f, 0x7b, 0xeb, 0xcd, 0x98, 0x6f, 0x71, 0x70,
	0xb2, 0x0b, 0xc6, 0x34, 0x8c, 0x19, 0xd5, 0xf5, 0x89, 0x43, 0xfd, 0xc7, 0xc9, 0x18, 0xd3, 0xff,
	0xef, 0x65, 0x5d, 0xb8, 0xbe, 0x34, 0xfb, 0x1c, 0x1b, 0xd6, 0xc2, 0x30, 0xee, 0x82, 0x41, 0xce,
	0xfc, 0x3e, 0x07, 0xa7, 0x58, 0x0d, 0xa0, 0x34, 0x9c, 0xd9, 0xa3, 0x81, 0x14, 0x07, 0xd7, 0x5b,
	0x89, 0x39, 0x33, 0x17, 0x26, 0xcb, 0x30, 0x6a, 0xcf, 0xcf, 0x2e, 0xf8, 0x50, 0x0b, 0xad, 0x2e,
	0xa4, 0xbb, 0x51, 0x76, 0xb3, 0xe6, 0x5d, 0x0e, 0xf8, 0xe8, 0xb2, 0x75, 0x1a, 0xd6, 0x8c, 0x2d,
	0x7e, 0xc7, 0x61, 0xf6, 0xea, 0xae, 0x38, 0x05, 0xa7, 0xc3, 0x45, 0xc1, 0xeb, 0x0d, 0x23, 0x82,
	0x35, 0x7d, 0xef, 0xca, 0xa9, 0xc1, 0xdf, 0x95, 0xf7, 0x38, 0xe0, 0xa3, 0xfb, 0x47, 0x69, 0x80,
	0x88, 0xed, 0x7a, 0xa5, 0x29, 0xc0, 0xc5, 0xb7, 0xb4, 0x84, 0x35, 0x3f, 0x14, 0x0b, 0xf8, 0xc6,
	0xa0, 0x50, 0x94, 0xea, 0xc4, 0x76, 0x42, 0xbe, 0xc7, 0xc1, 0xb9, 0x5e, 0xcd, 0xb0, 0x34, 0x2f,
	0xed, 0x04, 0x4d, 0xb5, 0xb8, 0xed, 0xf1, 0xf9, 0x54, 0x87, 0xaa, 0x0b, 0xc6, 0xb3, 0xc2, 0xc2,
	0xc0, 0x60, 0x48, 0x9e, 0xe7, 0x25, 0x34, 0x85, 0xbf, 0xc2, 0x41, 0xae, 0x47, 0x5b, 0x0c, 0xa7,
	0xf8, 0xae, 0xf1, 0xdd, 0xb5, 0x38, 0x3c, 0x3e, 0x97, 0x1a, 0x8e, 0x25, 0x61, 0x7e, 0x60, 0x38,
	0x6a, 0xd4, 0x6f, 0x07, 0x8d, 0xd7, 0x39, 0xe0, 0xa3, 0xdb, 0x71, 0x69, 0x32, 0x26, 0xb6, 0xa9,
	0x17, 0x87, 0xc5, 0x67, 0x53, 0x63, 0xb1, 0x28, 0x0c, 0x9e, 0x27, 0x44, 0x6b, 0x41, 0xf1, 0x5d,
	0x0e, 0x84, 0xf8, 0x26, 0x20, 0x5e, 0x4d, 0x0e, 0x49, 0xe2, 0x96, 0x62, 0x1c, 0x34, 0x77, 0xd3,
	0xa7, 0xcd, 0x2d, 0x61, 0x79, 0x60, 0x6c, 0xac, 0x80, 0xff, 0xad, 0xe4, 0xe9, 0xd1, 0x8b, 0x4c,
	0x93, 0x3c, 0xf1, 0x2d, 0xcd, 0x83, 0x99, 0x3c, 0x26, 0xf5, 0xdb, 0x41, 0xe3, 0xbf, 0x08, 0x4e,
	0x76, 0xf5, 0x40, 0xd3, 0x5c, 0xe4, 0xa2, 0x1a, 0xa8, 0x71, 0x91, 0x7f, 0x29, 0xc9, 0x45, 0xce,
	0x8d, 0xf8, 0x39, 0x61, 0x6d, 0xc8, 0xe5, 0xba, 0x92, 0xe9, 0x3a, 0xed, 0xc4, 0xff, 0x03, 0x0e,
	0xf2, 0x71, 0x2d, 0x4b, 0x7c, 0x33, 0x39, 0x1c, 0x09, 0x9b, 0xae, 0x7c, 0x65, 0x98, 0x2a, 0xbd,
	0x03, 0xf8, 0x05, 0xff, 0x01, 0xbc, 0x22, 0x3c, 0x33, 0xf0, 0x3e, 0x31, 0x3c, 0xcb, 0xa6, 0x5a,
	0x42, 0x53, 0xfc, 0xe2, 0xae, 0x98, 0x8d, 0x6a, 0x0a, 0xff, 0x5a, 0x2c, 0x6c, 0xda, 0xb6, 0x61,
	0x95, 0x8a, 0xc5, 0x3b, 0x77, 0xee, 0x84, 0x3b, 0xc6, 0xce, 0x4b, 0x8e, 0xfe, 0xde, 0xec, 0x71,
	0x43, 0x95, 0xec, 0x0d, 0xdd, 0x6c, 0xcc, 0xfd, 0x0c, 0xc1, 0xb4, 0xac, 0x37, 0x12, 0xc3, 0x30,
	0x37, 0xb6, 0x42, 0xc7, 0xca, 0xd2, 0x8a, 0x73, 0x27, 0x5b, 0x41, 0x9f, 0xb8, 0xe9, 0xc9, 0xd6,
	0x75, 0x55, 0xd2, 0xea, 0x05, 0xdd, 0xac, 0x17, 0xeb, 0x44, 0x73, 0x6f, 0x6c, 0xc5, 0x8e, 0x07,
	0xf1, 0x3f, 0x74, 0x7b, 0xaa, 0x3d, 0xf4, 0x2f, 0x84, 0x7e, 0xc8, 0x4d, 0xdc, 0xa0, 0x6a, 0xcb,
	0xae, 0x4b, 0xab, 0x2d, 0x97, 0x5a, 0xe6, 0xc5, 0xc2, 0xda, 0x8c, 0xe8, 0xca, 0xad, 0x8f, 0xb8,
	0xb6, 0xde, 0xf7, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x3d, 0x47, 0xe8, 0x28, 0x38, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CertificateAuthorityServiceClient is the client API for CertificateAuthorityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CertificateAuthorityServiceClient interface {
	// Lists [CertificateAuthorities][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	ListCertificateAuthorities(ctx context.Context, in *ListCertificateAuthoritiesRequest, opts ...grpc.CallOption) (*ListCertificateAuthoritiesResponse, error)
	// Lists [CertificateRevocationLists][google.cloud.security.privateca.v1alpha1.CertificateRevocationList].
	ListCertificateRevocationLists(ctx context.Context, in *ListCertificateRevocationListsRequest, opts ...grpc.CallOption) (*ListCertificateRevocationListsResponse, error)
	// Lists [Certificates][google.cloud.security.privateca.v1alpha1.Certificate].
	ListCertificates(ctx context.Context, in *ListCertificatesRequest, opts ...grpc.CallOption) (*ListCertificatesResponse, error)
	// Lists [ReusableConfigs][google.cloud.security.privateca.v1alpha1.ReusableConfig].
	ListReusableConfigs(ctx context.Context, in *ListReusableConfigsRequest, opts ...grpc.CallOption) (*ListReusableConfigsResponse, error)
	// Returns a [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	GetCertificateAuthority(ctx context.Context, in *GetCertificateAuthorityRequest, opts ...grpc.CallOption) (*CertificateAuthority, error)
	// Returns a [CertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateRevocationList].
	GetCertificateRevocationList(ctx context.Context, in *GetCertificateRevocationListRequest, opts ...grpc.CallOption) (*CertificateRevocationList, error)
	// Returns a [Certificate][google.cloud.security.privateca.v1alpha1.Certificate].
	GetCertificate(ctx context.Context, in *GetCertificateRequest, opts ...grpc.CallOption) (*Certificate, error)
	// Returns a [ReusableConfig][google.cloud.security.privateca.v1alpha1.ReusableConfig].
	GetReusableConfig(ctx context.Context, in *GetReusableConfigRequest, opts ...grpc.CallOption) (*ReusableConfig, error)
	// Create a new [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] in a given Project and Location.
	CreateCertificateAuthority(ctx context.Context, in *CreateCertificateAuthorityRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Create a new [CertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateRevocationList] in a given Project, Location
	// for a particular [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	CreateCertificateRevocationList(ctx context.Context, in *CreateCertificateRevocationListRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Create a new [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] in a given Project, Location from a particular
	// [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	CreateCertificate(ctx context.Context, in *CreateCertificateRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Create a new [ReusableConfig][google.cloud.security.privateca.v1alpha1.ReusableConfig] in a given Project and Location.
	CreateReusableConfig(ctx context.Context, in *CreateReusableConfigRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Update a [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	UpdateCertificateAuthority(ctx context.Context, in *UpdateCertificateAuthorityRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Update a [CertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateRevocationList].
	UpdateCertificateRevocationList(ctx context.Context, in *UpdateCertificateRevocationListRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Update a [Certificate][google.cloud.security.privateca.v1alpha1.Certificate].
	UpdateCertificate(ctx context.Context, in *UpdateCertificateRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Update a [ReusableConfig][google.cloud.security.privateca.v1alpha1.ReusableConfig].
	UpdateReusableConfig(ctx context.Context, in *UpdateReusableConfigRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Deletes a specific [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority]. Once deleted, the
	// [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] will no longer issue [Certificates][google.cloud.security.privateca.v1alpha1.Certificate]
	// and [CertificateRevocationLists][google.cloud.security.privateca.v1alpha1.CertificateRevocationList].
	DeleteCertificateAuthority(ctx context.Context, in *DeleteCertificateAuthorityRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Get the CSR for a pending [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	GetCertificateAuthorityCsr(ctx context.Context, in *GetCertificateAuthorityCsrRequest, opts ...grpc.CallOption) (*GetCertificateAuthorityCsrResponse, error)
	// Activate a pending [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	ActivateCertificateAuthority(ctx context.Context, in *ActivateCertificateAuthorityRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Disable a [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	DisableCertificateAuthority(ctx context.Context, in *DisableCertificateAuthorityRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Enable a [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	EnableCertificateAuthority(ctx context.Context, in *EnableCertificateAuthorityRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Schedule a [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] for deletion.
	ScheduleDeleteCertificateAuthority(ctx context.Context, in *ScheduleDeleteCertificateAuthorityRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Restore a [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] that is scheduled for deletion.
	RestoreCertificateAuthority(ctx context.Context, in *RestoreCertificateAuthorityRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Revoke a [Certificate][google.cloud.security.privateca.v1alpha1.Certificate].
	RevokeCertificate(ctx context.Context, in *RevokeCertificateRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Publish a [CertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateRevocationList].
	PublishCertificateRevocationList(ctx context.Context, in *PublishCertificateRevocationListRequest, opts ...grpc.CallOption) (*PublishCertificateRevocationListResponse, error)
}

type certificateAuthorityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCertificateAuthorityServiceClient(cc grpc.ClientConnInterface) CertificateAuthorityServiceClient {
	return &certificateAuthorityServiceClient{cc}
}

func (c *certificateAuthorityServiceClient) ListCertificateAuthorities(ctx context.Context, in *ListCertificateAuthoritiesRequest, opts ...grpc.CallOption) (*ListCertificateAuthoritiesResponse, error) {
	out := new(ListCertificateAuthoritiesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/ListCertificateAuthorities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) ListCertificateRevocationLists(ctx context.Context, in *ListCertificateRevocationListsRequest, opts ...grpc.CallOption) (*ListCertificateRevocationListsResponse, error) {
	out := new(ListCertificateRevocationListsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/ListCertificateRevocationLists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) ListCertificates(ctx context.Context, in *ListCertificatesRequest, opts ...grpc.CallOption) (*ListCertificatesResponse, error) {
	out := new(ListCertificatesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/ListCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) ListReusableConfigs(ctx context.Context, in *ListReusableConfigsRequest, opts ...grpc.CallOption) (*ListReusableConfigsResponse, error) {
	out := new(ListReusableConfigsResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/ListReusableConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) GetCertificateAuthority(ctx context.Context, in *GetCertificateAuthorityRequest, opts ...grpc.CallOption) (*CertificateAuthority, error) {
	out := new(CertificateAuthority)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/GetCertificateAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) GetCertificateRevocationList(ctx context.Context, in *GetCertificateRevocationListRequest, opts ...grpc.CallOption) (*CertificateRevocationList, error) {
	out := new(CertificateRevocationList)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/GetCertificateRevocationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) GetCertificate(ctx context.Context, in *GetCertificateRequest, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/GetCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) GetReusableConfig(ctx context.Context, in *GetReusableConfigRequest, opts ...grpc.CallOption) (*ReusableConfig, error) {
	out := new(ReusableConfig)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/GetReusableConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) CreateCertificateAuthority(ctx context.Context, in *CreateCertificateAuthorityRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/CreateCertificateAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) CreateCertificateRevocationList(ctx context.Context, in *CreateCertificateRevocationListRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/CreateCertificateRevocationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) CreateCertificate(ctx context.Context, in *CreateCertificateRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/CreateCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) CreateReusableConfig(ctx context.Context, in *CreateReusableConfigRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/CreateReusableConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) UpdateCertificateAuthority(ctx context.Context, in *UpdateCertificateAuthorityRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/UpdateCertificateAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) UpdateCertificateRevocationList(ctx context.Context, in *UpdateCertificateRevocationListRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/UpdateCertificateRevocationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) UpdateCertificate(ctx context.Context, in *UpdateCertificateRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/UpdateCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) UpdateReusableConfig(ctx context.Context, in *UpdateReusableConfigRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/UpdateReusableConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) DeleteCertificateAuthority(ctx context.Context, in *DeleteCertificateAuthorityRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/DeleteCertificateAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) GetCertificateAuthorityCsr(ctx context.Context, in *GetCertificateAuthorityCsrRequest, opts ...grpc.CallOption) (*GetCertificateAuthorityCsrResponse, error) {
	out := new(GetCertificateAuthorityCsrResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/GetCertificateAuthorityCsr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) ActivateCertificateAuthority(ctx context.Context, in *ActivateCertificateAuthorityRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/ActivateCertificateAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) DisableCertificateAuthority(ctx context.Context, in *DisableCertificateAuthorityRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/DisableCertificateAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) EnableCertificateAuthority(ctx context.Context, in *EnableCertificateAuthorityRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/EnableCertificateAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) ScheduleDeleteCertificateAuthority(ctx context.Context, in *ScheduleDeleteCertificateAuthorityRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/ScheduleDeleteCertificateAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) RestoreCertificateAuthority(ctx context.Context, in *RestoreCertificateAuthorityRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/RestoreCertificateAuthority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) RevokeCertificate(ctx context.Context, in *RevokeCertificateRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/RevokeCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthorityServiceClient) PublishCertificateRevocationList(ctx context.Context, in *PublishCertificateRevocationListRequest, opts ...grpc.CallOption) (*PublishCertificateRevocationListResponse, error) {
	out := new(PublishCertificateRevocationListResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/PublishCertificateRevocationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificateAuthorityServiceServer is the server API for CertificateAuthorityService service.
type CertificateAuthorityServiceServer interface {
	// Lists [CertificateAuthorities][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	ListCertificateAuthorities(context.Context, *ListCertificateAuthoritiesRequest) (*ListCertificateAuthoritiesResponse, error)
	// Lists [CertificateRevocationLists][google.cloud.security.privateca.v1alpha1.CertificateRevocationList].
	ListCertificateRevocationLists(context.Context, *ListCertificateRevocationListsRequest) (*ListCertificateRevocationListsResponse, error)
	// Lists [Certificates][google.cloud.security.privateca.v1alpha1.Certificate].
	ListCertificates(context.Context, *ListCertificatesRequest) (*ListCertificatesResponse, error)
	// Lists [ReusableConfigs][google.cloud.security.privateca.v1alpha1.ReusableConfig].
	ListReusableConfigs(context.Context, *ListReusableConfigsRequest) (*ListReusableConfigsResponse, error)
	// Returns a [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	GetCertificateAuthority(context.Context, *GetCertificateAuthorityRequest) (*CertificateAuthority, error)
	// Returns a [CertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateRevocationList].
	GetCertificateRevocationList(context.Context, *GetCertificateRevocationListRequest) (*CertificateRevocationList, error)
	// Returns a [Certificate][google.cloud.security.privateca.v1alpha1.Certificate].
	GetCertificate(context.Context, *GetCertificateRequest) (*Certificate, error)
	// Returns a [ReusableConfig][google.cloud.security.privateca.v1alpha1.ReusableConfig].
	GetReusableConfig(context.Context, *GetReusableConfigRequest) (*ReusableConfig, error)
	// Create a new [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] in a given Project and Location.
	CreateCertificateAuthority(context.Context, *CreateCertificateAuthorityRequest) (*longrunning.Operation, error)
	// Create a new [CertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateRevocationList] in a given Project, Location
	// for a particular [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	CreateCertificateRevocationList(context.Context, *CreateCertificateRevocationListRequest) (*longrunning.Operation, error)
	// Create a new [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] in a given Project, Location from a particular
	// [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	CreateCertificate(context.Context, *CreateCertificateRequest) (*longrunning.Operation, error)
	// Create a new [ReusableConfig][google.cloud.security.privateca.v1alpha1.ReusableConfig] in a given Project and Location.
	CreateReusableConfig(context.Context, *CreateReusableConfigRequest) (*longrunning.Operation, error)
	// Update a [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	UpdateCertificateAuthority(context.Context, *UpdateCertificateAuthorityRequest) (*longrunning.Operation, error)
	// Update a [CertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateRevocationList].
	UpdateCertificateRevocationList(context.Context, *UpdateCertificateRevocationListRequest) (*longrunning.Operation, error)
	// Update a [Certificate][google.cloud.security.privateca.v1alpha1.Certificate].
	UpdateCertificate(context.Context, *UpdateCertificateRequest) (*longrunning.Operation, error)
	// Update a [ReusableConfig][google.cloud.security.privateca.v1alpha1.ReusableConfig].
	UpdateReusableConfig(context.Context, *UpdateReusableConfigRequest) (*longrunning.Operation, error)
	// Deletes a specific [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority]. Once deleted, the
	// [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] will no longer issue [Certificates][google.cloud.security.privateca.v1alpha1.Certificate]
	// and [CertificateRevocationLists][google.cloud.security.privateca.v1alpha1.CertificateRevocationList].
	DeleteCertificateAuthority(context.Context, *DeleteCertificateAuthorityRequest) (*longrunning.Operation, error)
	// Get the CSR for a pending [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	GetCertificateAuthorityCsr(context.Context, *GetCertificateAuthorityCsrRequest) (*GetCertificateAuthorityCsrResponse, error)
	// Activate a pending [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	ActivateCertificateAuthority(context.Context, *ActivateCertificateAuthorityRequest) (*longrunning.Operation, error)
	// Disable a [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	DisableCertificateAuthority(context.Context, *DisableCertificateAuthorityRequest) (*longrunning.Operation, error)
	// Enable a [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	EnableCertificateAuthority(context.Context, *EnableCertificateAuthorityRequest) (*longrunning.Operation, error)
	// Schedule a [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] for deletion.
	ScheduleDeleteCertificateAuthority(context.Context, *ScheduleDeleteCertificateAuthorityRequest) (*longrunning.Operation, error)
	// Restore a [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] that is scheduled for deletion.
	RestoreCertificateAuthority(context.Context, *RestoreCertificateAuthorityRequest) (*longrunning.Operation, error)
	// Revoke a [Certificate][google.cloud.security.privateca.v1alpha1.Certificate].
	RevokeCertificate(context.Context, *RevokeCertificateRequest) (*longrunning.Operation, error)
	// Publish a [CertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateRevocationList].
	PublishCertificateRevocationList(context.Context, *PublishCertificateRevocationListRequest) (*PublishCertificateRevocationListResponse, error)
}

// UnimplementedCertificateAuthorityServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCertificateAuthorityServiceServer struct {
}

func (*UnimplementedCertificateAuthorityServiceServer) ListCertificateAuthorities(ctx context.Context, req *ListCertificateAuthoritiesRequest) (*ListCertificateAuthoritiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCertificateAuthorities not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) ListCertificateRevocationLists(ctx context.Context, req *ListCertificateRevocationListsRequest) (*ListCertificateRevocationListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCertificateRevocationLists not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) ListCertificates(ctx context.Context, req *ListCertificatesRequest) (*ListCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCertificates not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) ListReusableConfigs(ctx context.Context, req *ListReusableConfigsRequest) (*ListReusableConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReusableConfigs not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) GetCertificateAuthority(ctx context.Context, req *GetCertificateAuthorityRequest) (*CertificateAuthority, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificateAuthority not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) GetCertificateRevocationList(ctx context.Context, req *GetCertificateRevocationListRequest) (*CertificateRevocationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificateRevocationList not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) GetCertificate(ctx context.Context, req *GetCertificateRequest) (*Certificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificate not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) GetReusableConfig(ctx context.Context, req *GetReusableConfigRequest) (*ReusableConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReusableConfig not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) CreateCertificateAuthority(ctx context.Context, req *CreateCertificateAuthorityRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCertificateAuthority not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) CreateCertificateRevocationList(ctx context.Context, req *CreateCertificateRevocationListRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCertificateRevocationList not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) CreateCertificate(ctx context.Context, req *CreateCertificateRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCertificate not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) CreateReusableConfig(ctx context.Context, req *CreateReusableConfigRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReusableConfig not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) UpdateCertificateAuthority(ctx context.Context, req *UpdateCertificateAuthorityRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCertificateAuthority not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) UpdateCertificateRevocationList(ctx context.Context, req *UpdateCertificateRevocationListRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCertificateRevocationList not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) UpdateCertificate(ctx context.Context, req *UpdateCertificateRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCertificate not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) UpdateReusableConfig(ctx context.Context, req *UpdateReusableConfigRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReusableConfig not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) DeleteCertificateAuthority(ctx context.Context, req *DeleteCertificateAuthorityRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCertificateAuthority not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) GetCertificateAuthorityCsr(ctx context.Context, req *GetCertificateAuthorityCsrRequest) (*GetCertificateAuthorityCsrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificateAuthorityCsr not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) ActivateCertificateAuthority(ctx context.Context, req *ActivateCertificateAuthorityRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateCertificateAuthority not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) DisableCertificateAuthority(ctx context.Context, req *DisableCertificateAuthorityRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableCertificateAuthority not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) EnableCertificateAuthority(ctx context.Context, req *EnableCertificateAuthorityRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableCertificateAuthority not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) ScheduleDeleteCertificateAuthority(ctx context.Context, req *ScheduleDeleteCertificateAuthorityRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleDeleteCertificateAuthority not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) RestoreCertificateAuthority(ctx context.Context, req *RestoreCertificateAuthorityRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreCertificateAuthority not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) RevokeCertificate(ctx context.Context, req *RevokeCertificateRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCertificate not implemented")
}
func (*UnimplementedCertificateAuthorityServiceServer) PublishCertificateRevocationList(ctx context.Context, req *PublishCertificateRevocationListRequest) (*PublishCertificateRevocationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishCertificateRevocationList not implemented")
}

func RegisterCertificateAuthorityServiceServer(s *grpc.Server, srv CertificateAuthorityServiceServer) {
	s.RegisterService(&_CertificateAuthorityService_serviceDesc, srv)
}

func _CertificateAuthorityService_ListCertificateAuthorities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCertificateAuthoritiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).ListCertificateAuthorities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/ListCertificateAuthorities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).ListCertificateAuthorities(ctx, req.(*ListCertificateAuthoritiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_ListCertificateRevocationLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCertificateRevocationListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).ListCertificateRevocationLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/ListCertificateRevocationLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).ListCertificateRevocationLists(ctx, req.(*ListCertificateRevocationListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_ListCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).ListCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/ListCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).ListCertificates(ctx, req.(*ListCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_ListReusableConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReusableConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).ListReusableConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/ListReusableConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).ListReusableConfigs(ctx, req.(*ListReusableConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_GetCertificateAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificateAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).GetCertificateAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/GetCertificateAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).GetCertificateAuthority(ctx, req.(*GetCertificateAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_GetCertificateRevocationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificateRevocationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).GetCertificateRevocationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/GetCertificateRevocationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).GetCertificateRevocationList(ctx, req.(*GetCertificateRevocationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_GetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).GetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/GetCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).GetCertificate(ctx, req.(*GetCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_GetReusableConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReusableConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).GetReusableConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/GetReusableConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).GetReusableConfig(ctx, req.(*GetReusableConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_CreateCertificateAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCertificateAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).CreateCertificateAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/CreateCertificateAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).CreateCertificateAuthority(ctx, req.(*CreateCertificateAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_CreateCertificateRevocationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCertificateRevocationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).CreateCertificateRevocationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/CreateCertificateRevocationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).CreateCertificateRevocationList(ctx, req.(*CreateCertificateRevocationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_CreateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).CreateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/CreateCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).CreateCertificate(ctx, req.(*CreateCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_CreateReusableConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReusableConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).CreateReusableConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/CreateReusableConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).CreateReusableConfig(ctx, req.(*CreateReusableConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_UpdateCertificateAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCertificateAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).UpdateCertificateAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/UpdateCertificateAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).UpdateCertificateAuthority(ctx, req.(*UpdateCertificateAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_UpdateCertificateRevocationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCertificateRevocationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).UpdateCertificateRevocationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/UpdateCertificateRevocationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).UpdateCertificateRevocationList(ctx, req.(*UpdateCertificateRevocationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_UpdateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).UpdateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/UpdateCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).UpdateCertificate(ctx, req.(*UpdateCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_UpdateReusableConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReusableConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).UpdateReusableConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/UpdateReusableConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).UpdateReusableConfig(ctx, req.(*UpdateReusableConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_DeleteCertificateAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCertificateAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).DeleteCertificateAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/DeleteCertificateAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).DeleteCertificateAuthority(ctx, req.(*DeleteCertificateAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_GetCertificateAuthorityCsr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificateAuthorityCsrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).GetCertificateAuthorityCsr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/GetCertificateAuthorityCsr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).GetCertificateAuthorityCsr(ctx, req.(*GetCertificateAuthorityCsrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_ActivateCertificateAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateCertificateAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).ActivateCertificateAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/ActivateCertificateAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).ActivateCertificateAuthority(ctx, req.(*ActivateCertificateAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_DisableCertificateAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableCertificateAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).DisableCertificateAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/DisableCertificateAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).DisableCertificateAuthority(ctx, req.(*DisableCertificateAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_EnableCertificateAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableCertificateAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).EnableCertificateAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/EnableCertificateAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).EnableCertificateAuthority(ctx, req.(*EnableCertificateAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_ScheduleDeleteCertificateAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleDeleteCertificateAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).ScheduleDeleteCertificateAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/ScheduleDeleteCertificateAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).ScheduleDeleteCertificateAuthority(ctx, req.(*ScheduleDeleteCertificateAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_RestoreCertificateAuthority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreCertificateAuthorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).RestoreCertificateAuthority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/RestoreCertificateAuthority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).RestoreCertificateAuthority(ctx, req.(*RestoreCertificateAuthorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_RevokeCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).RevokeCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/RevokeCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).RevokeCertificate(ctx, req.(*RevokeCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorityService_PublishCertificateRevocationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishCertificateRevocationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthorityServiceServer).PublishCertificateRevocationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.security.privateca.v1alpha1.CertificateAuthorityService/PublishCertificateRevocationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthorityServiceServer).PublishCertificateRevocationList(ctx, req.(*PublishCertificateRevocationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CertificateAuthorityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.security.privateca.v1alpha1.CertificateAuthorityService",
	HandlerType: (*CertificateAuthorityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCertificateAuthorities",
			Handler:    _CertificateAuthorityService_ListCertificateAuthorities_Handler,
		},
		{
			MethodName: "ListCertificateRevocationLists",
			Handler:    _CertificateAuthorityService_ListCertificateRevocationLists_Handler,
		},
		{
			MethodName: "ListCertificates",
			Handler:    _CertificateAuthorityService_ListCertificates_Handler,
		},
		{
			MethodName: "ListReusableConfigs",
			Handler:    _CertificateAuthorityService_ListReusableConfigs_Handler,
		},
		{
			MethodName: "GetCertificateAuthority",
			Handler:    _CertificateAuthorityService_GetCertificateAuthority_Handler,
		},
		{
			MethodName: "GetCertificateRevocationList",
			Handler:    _CertificateAuthorityService_GetCertificateRevocationList_Handler,
		},
		{
			MethodName: "GetCertificate",
			Handler:    _CertificateAuthorityService_GetCertificate_Handler,
		},
		{
			MethodName: "GetReusableConfig",
			Handler:    _CertificateAuthorityService_GetReusableConfig_Handler,
		},
		{
			MethodName: "CreateCertificateAuthority",
			Handler:    _CertificateAuthorityService_CreateCertificateAuthority_Handler,
		},
		{
			MethodName: "CreateCertificateRevocationList",
			Handler:    _CertificateAuthorityService_CreateCertificateRevocationList_Handler,
		},
		{
			MethodName: "CreateCertificate",
			Handler:    _CertificateAuthorityService_CreateCertificate_Handler,
		},
		{
			MethodName: "CreateReusableConfig",
			Handler:    _CertificateAuthorityService_CreateReusableConfig_Handler,
		},
		{
			MethodName: "UpdateCertificateAuthority",
			Handler:    _CertificateAuthorityService_UpdateCertificateAuthority_Handler,
		},
		{
			MethodName: "UpdateCertificateRevocationList",
			Handler:    _CertificateAuthorityService_UpdateCertificateRevocationList_Handler,
		},
		{
			MethodName: "UpdateCertificate",
			Handler:    _CertificateAuthorityService_UpdateCertificate_Handler,
		},
		{
			MethodName: "UpdateReusableConfig",
			Handler:    _CertificateAuthorityService_UpdateReusableConfig_Handler,
		},
		{
			MethodName: "DeleteCertificateAuthority",
			Handler:    _CertificateAuthorityService_DeleteCertificateAuthority_Handler,
		},
		{
			MethodName: "GetCertificateAuthorityCsr",
			Handler:    _CertificateAuthorityService_GetCertificateAuthorityCsr_Handler,
		},
		{
			MethodName: "ActivateCertificateAuthority",
			Handler:    _CertificateAuthorityService_ActivateCertificateAuthority_Handler,
		},
		{
			MethodName: "DisableCertificateAuthority",
			Handler:    _CertificateAuthorityService_DisableCertificateAuthority_Handler,
		},
		{
			MethodName: "EnableCertificateAuthority",
			Handler:    _CertificateAuthorityService_EnableCertificateAuthority_Handler,
		},
		{
			MethodName: "ScheduleDeleteCertificateAuthority",
			Handler:    _CertificateAuthorityService_ScheduleDeleteCertificateAuthority_Handler,
		},
		{
			MethodName: "RestoreCertificateAuthority",
			Handler:    _CertificateAuthorityService_RestoreCertificateAuthority_Handler,
		},
		{
			MethodName: "RevokeCertificate",
			Handler:    _CertificateAuthorityService_RevokeCertificate_Handler,
		},
		{
			MethodName: "PublishCertificateRevocationList",
			Handler:    _CertificateAuthorityService_PublishCertificateRevocationList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/security/privateca/v1alpha1/service.proto",
}
