// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/security/privateca/v1alpha1/resources.proto

package privateca

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A [RevocationReason][google.cloud.security.privateca.v1alpha1.RevocationReason] indicates whether a [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] has been revoked,
// and the reason for revocation. These are standard revocation reasons from RFC
// 5280.
type RevocationReason int32

const (
	// Default unspecified value. This value does indicate that a [Certificate][google.cloud.security.privateca.v1alpha1.Certificate]
	// has been revoked, but that a reason has not been recorded.
	RevocationReason_REVOCATION_REASON_UNSPECIFIED RevocationReason = 0
	// Key material for this [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] may have leaked.
	RevocationReason_KEY_COMPROMISE RevocationReason = 1
	// The key material for a certificate authority in the issuing path may have
	// leaked.
	RevocationReason_CERTIFICATE_AUTHORITY_COMPROMISE RevocationReason = 2
	// The subject or other attributes in this [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] have changed.
	RevocationReason_AFFILIATION_CHANGED RevocationReason = 3
	// This [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] has been superseded.
	RevocationReason_SUPERSEDED RevocationReason = 4
	// This [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] or entities in the issuing path have ceased to
	// operate.
	RevocationReason_CESSATION_OF_OPERATION RevocationReason = 5
	// This [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] should not be considered valid, it is expected that it
	// may become valid in the future.
	RevocationReason_CERTIFICATE_HOLD RevocationReason = 6
	// This [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] no longer has permission to assert the listed
	// attributes.
	RevocationReason_PRIVILEGE_WITHDRAWN RevocationReason = 7
	// The authority which determines appropriate attributes for a [Certificate][google.cloud.security.privateca.v1alpha1.Certificate]
	// may have been compromised.
	RevocationReason_ATTRIBUTE_AUTHORITY_COMPROMISE RevocationReason = 8
)

var RevocationReason_name = map[int32]string{
	0: "REVOCATION_REASON_UNSPECIFIED",
	1: "KEY_COMPROMISE",
	2: "CERTIFICATE_AUTHORITY_COMPROMISE",
	3: "AFFILIATION_CHANGED",
	4: "SUPERSEDED",
	5: "CESSATION_OF_OPERATION",
	6: "CERTIFICATE_HOLD",
	7: "PRIVILEGE_WITHDRAWN",
	8: "ATTRIBUTE_AUTHORITY_COMPROMISE",
}

var RevocationReason_value = map[string]int32{
	"REVOCATION_REASON_UNSPECIFIED":    0,
	"KEY_COMPROMISE":                   1,
	"CERTIFICATE_AUTHORITY_COMPROMISE": 2,
	"AFFILIATION_CHANGED":              3,
	"SUPERSEDED":                       4,
	"CESSATION_OF_OPERATION":           5,
	"CERTIFICATE_HOLD":                 6,
	"PRIVILEGE_WITHDRAWN":              7,
	"ATTRIBUTE_AUTHORITY_COMPROMISE":   8,
}

func (x RevocationReason) String() string {
	return proto.EnumName(RevocationReason_name, int32(x))
}

func (RevocationReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{0}
}

// The type of a [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority], indicating its issuing chain.
type CertificateAuthority_Type int32

const (
	// Not specified.
	CertificateAuthority_TYPE_UNSPECIFIED CertificateAuthority_Type = 0
	// Self-signed CA.
	CertificateAuthority_SELF_SIGNED CertificateAuthority_Type = 1
	// Subordinate CA. Could be issued by a Private CA [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority]
	// or an unmanaged CA.
	CertificateAuthority_SUBORDINATE CertificateAuthority_Type = 2
)

var CertificateAuthority_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "SELF_SIGNED",
	2: "SUBORDINATE",
}

var CertificateAuthority_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"SELF_SIGNED":      1,
	"SUBORDINATE":      2,
}

func (x CertificateAuthority_Type) String() string {
	return proto.EnumName(CertificateAuthority_Type_name, int32(x))
}

func (CertificateAuthority_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{0, 0}
}

// The state of a [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority], indicating if it can be used.
type CertificateAuthority_State int32

const (
	// Not specified.
	CertificateAuthority_STATE_UNSPECIFIED CertificateAuthority_State = 0
	// Certificates can be issued from this CA. CRLs will be generated for this
	// CA.
	CertificateAuthority_ENABLED CertificateAuthority_State = 1
	// Certificates cannot be issued from this CA. CRLs will still be generated.
	CertificateAuthority_DISABLED CertificateAuthority_State = 2
	// Certificates cannot be issued from this CA. CRLs will not be generated.
	CertificateAuthority_PENDING_ACTIVATION CertificateAuthority_State = 3
	// Certificates cannot be issued from this CA. CRLs will not be generated.
	CertificateAuthority_PENDING_DELETION CertificateAuthority_State = 4
)

var CertificateAuthority_State_name = map[int32]string{
	0: "STATE_UNSPECIFIED",
	1: "ENABLED",
	2: "DISABLED",
	3: "PENDING_ACTIVATION",
	4: "PENDING_DELETION",
}

var CertificateAuthority_State_value = map[string]int32{
	"STATE_UNSPECIFIED":  0,
	"ENABLED":            1,
	"DISABLED":           2,
	"PENDING_ACTIVATION": 3,
	"PENDING_DELETION":   4,
}

func (x CertificateAuthority_State) String() string {
	return proto.EnumName(CertificateAuthority_State_name, int32(x))
}

func (CertificateAuthority_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{0, 1}
}

// The state of a [CertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateRevocationList], indicating if it is current.
type CertificateRevocationList_State int32

const (
	// Not specified.
	CertificateRevocationList_STATE_UNSPECIFIED CertificateRevocationList_State = 0
	// The [CertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateRevocationList] is up to date.
	CertificateRevocationList_ACTIVE CertificateRevocationList_State = 1
	// The [CertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateRevocationList] is no longer current.
	CertificateRevocationList_SUPERSEDED CertificateRevocationList_State = 2
)

var CertificateRevocationList_State_name = map[int32]string{
	0: "STATE_UNSPECIFIED",
	1: "ACTIVE",
	2: "SUPERSEDED",
}

var CertificateRevocationList_State_value = map[string]int32{
	"STATE_UNSPECIFIED": 0,
	"ACTIVE":            1,
	"SUPERSEDED":        2,
}

func (x CertificateRevocationList_State) String() string {
	return proto.EnumName(CertificateRevocationList_State_name, int32(x))
}

func (CertificateRevocationList_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{1, 0}
}

// Types of public keys that are supported.
// At a minimum, we support RSA and ECDSA, for the key sizes or curves listed:
// https://cloud.google.com/kms/docs/algorithms#asymmetric_signing_algorithms
type PublicKey_KeyType int32

const (
	// Default unspecified value.
	PublicKey_KEY_TYPE_UNSPECIFIED PublicKey_KeyType = 0
	// A PEM-encoded PKCS#1/RFC 3447 RSAPrivateKey structure.
	PublicKey_PEM_RSA_KEY PublicKey_KeyType = 1
	// A PEM-encoded compressed NIST P-256/secp256r1/prime256v1 or P-384 key.
	PublicKey_PEM_EC_KEY PublicKey_KeyType = 2
)

var PublicKey_KeyType_name = map[int32]string{
	0: "KEY_TYPE_UNSPECIFIED",
	1: "PEM_RSA_KEY",
	2: "PEM_EC_KEY",
}

var PublicKey_KeyType_value = map[string]int32{
	"KEY_TYPE_UNSPECIFIED": 0,
	"PEM_RSA_KEY":          1,
	"PEM_EC_KEY":           2,
}

func (x PublicKey_KeyType) String() string {
	return proto.EnumName(PublicKey_KeyType_name, int32(x))
}

func (PublicKey_KeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{6, 0}
}

// A [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] represents an individual Certificate Authority.
// A [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] can be used to create [Certificates][google.cloud.security.privateca.v1alpha1.Certificate].
type CertificateAuthority struct {
	// Output only. The resource name for this [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] in the
	// format `projects/*/locations/*/certificateAuthorities/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Immutable. The [Type][google.cloud.security.privateca.v1alpha1.CertificateAuthority.Type] of this [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	Type CertificateAuthority_Type `protobuf:"varint,2,opt,name=type,proto3,enum=google.cloud.security.privateca.v1alpha1.CertificateAuthority_Type" json:"type,omitempty"`
	// Immutable. The config used to create a self-signed X.509 certificate or CSR.
	Config *CertificateConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	// Required. The desired lifetime of the CA certificate. Used to create the
	// "not_before_time" and "not_after_time" fields inside an X.509
	// certificate.
	Lifetime *duration.Duration `protobuf:"bytes,4,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	// Required. Immutable. The resource name for the Cloud KMS CryptoKeyVersion in the
	// format
	// `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`. Used
	// when issuing certificates for this [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority]. If this
	// [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] is a self-signed CertificateAuthority, this key
	// version is also used to sign the self-signed CA certificate. Otherwise,
	// it is used to sign a CSR.
	CloudKmsKeyVersion string `protobuf:"bytes,5,opt,name=cloud_kms_key_version,json=cloudKmsKeyVersion,proto3" json:"cloud_kms_key_version,omitempty"`
	// Optional. The [CertificateAuthorityPolicy][google.cloud.security.privateca.v1alpha1.CertificateAuthority.CertificateAuthorityPolicy] to enforce when issuing
	// [Certificates][google.cloud.security.privateca.v1alpha1.Certificate] from this [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	CertificatePolicy *CertificateAuthority_CertificateAuthorityPolicy `protobuf:"bytes,6,opt,name=certificate_policy,json=certificatePolicy,proto3" json:"certificate_policy,omitempty"`
	// Optional. The [IssuingOptions][google.cloud.security.privateca.v1alpha1.CertificateAuthority.IssuingOptions] to follow when issuing [Certificates][google.cloud.security.privateca.v1alpha1.Certificate]
	// from this [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	IssuingOptions *CertificateAuthority_IssuingOptions `protobuf:"bytes,7,opt,name=issuing_options,json=issuingOptions,proto3" json:"issuing_options,omitempty"`
	// Optional. This [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority]'s issuer chain. If self-signed, will be the
	// same as 'pem_cert'. This may be updated (e.g., if an issuer's cert was
	// replaced). Expected to be in issuer-to-root order according to RFC 5246.
	PemIssuerCertChain []string `protobuf:"bytes,8,rep,name=pem_issuer_cert_chain,json=pemIssuerCertChain,proto3" json:"pem_issuer_cert_chain,omitempty"`
	// Output only. The [State][google.cloud.security.privateca.v1alpha1.CertificateAuthority.State] for this [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	State CertificateAuthority_State `protobuf:"varint,9,opt,name=state,proto3,enum=google.cloud.security.privateca.v1alpha1.CertificateAuthority_State" json:"state,omitempty"`
	// Output only. This [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority]'s CA cert.
	PemCert string `protobuf:"bytes,10,opt,name=pem_cert,json=pemCert,proto3" json:"pem_cert,omitempty"`
	// Output only. A structured description of this [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority]'s CA cert.
	CaCertificateDescription *CertificateDescription `protobuf:"bytes,11,opt,name=ca_certificate_description,json=caCertificateDescription,proto3" json:"ca_certificate_description,omitempty"`
	// Required. Immutable. The name of a Cloud Storage bucket where this [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] will
	// publish content, such as the CA certificate and CRLs. This must be a bucket
	// name, without any prefixes (such as `gs://`) or suffixes (such as
	// `.googleapis.com`). For example, to use a bucket named `my-bucket`, you
	// would simply specify `my-bucket`.
	GcsBucket string `protobuf:"bytes,12,opt,name=gcs_bucket,json=gcsBucket,proto3" json:"gcs_bucket,omitempty"`
	// Output only. URLs for accessing content published by this CA, such as the CA certificate
	// and CRLs.
	AccessUrls *CertificateAuthority_AccessUrls `protobuf:"bytes,13,opt,name=access_urls,json=accessUrls,proto3" json:"access_urls,omitempty"`
	// Output only. The time at which this [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,14,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which this [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] was updated.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The time at which this [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] will be deleted, if
	// scheduled for deletion.
	DeletionTime *timestamp.Timestamp `protobuf:"bytes,17,opt,name=deletion_time,json=deletionTime,proto3" json:"deletion_time,omitempty"`
	// Optional. Labels with user-defined metadata.
	Labels               map[string]string `protobuf:"bytes,16,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CertificateAuthority) Reset()         { *m = CertificateAuthority{} }
func (m *CertificateAuthority) String() string { return proto.CompactTextString(m) }
func (*CertificateAuthority) ProtoMessage()    {}
func (*CertificateAuthority) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{0}
}

func (m *CertificateAuthority) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateAuthority.Unmarshal(m, b)
}
func (m *CertificateAuthority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateAuthority.Marshal(b, m, deterministic)
}
func (m *CertificateAuthority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateAuthority.Merge(m, src)
}
func (m *CertificateAuthority) XXX_Size() int {
	return xxx_messageInfo_CertificateAuthority.Size(m)
}
func (m *CertificateAuthority) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateAuthority.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateAuthority proto.InternalMessageInfo

func (m *CertificateAuthority) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CertificateAuthority) GetType() CertificateAuthority_Type {
	if m != nil {
		return m.Type
	}
	return CertificateAuthority_TYPE_UNSPECIFIED
}

func (m *CertificateAuthority) GetConfig() *CertificateConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *CertificateAuthority) GetLifetime() *duration.Duration {
	if m != nil {
		return m.Lifetime
	}
	return nil
}

func (m *CertificateAuthority) GetCloudKmsKeyVersion() string {
	if m != nil {
		return m.CloudKmsKeyVersion
	}
	return ""
}

func (m *CertificateAuthority) GetCertificatePolicy() *CertificateAuthority_CertificateAuthorityPolicy {
	if m != nil {
		return m.CertificatePolicy
	}
	return nil
}

func (m *CertificateAuthority) GetIssuingOptions() *CertificateAuthority_IssuingOptions {
	if m != nil {
		return m.IssuingOptions
	}
	return nil
}

func (m *CertificateAuthority) GetPemIssuerCertChain() []string {
	if m != nil {
		return m.PemIssuerCertChain
	}
	return nil
}

func (m *CertificateAuthority) GetState() CertificateAuthority_State {
	if m != nil {
		return m.State
	}
	return CertificateAuthority_STATE_UNSPECIFIED
}

func (m *CertificateAuthority) GetPemCert() string {
	if m != nil {
		return m.PemCert
	}
	return ""
}

func (m *CertificateAuthority) GetCaCertificateDescription() *CertificateDescription {
	if m != nil {
		return m.CaCertificateDescription
	}
	return nil
}

func (m *CertificateAuthority) GetGcsBucket() string {
	if m != nil {
		return m.GcsBucket
	}
	return ""
}

func (m *CertificateAuthority) GetAccessUrls() *CertificateAuthority_AccessUrls {
	if m != nil {
		return m.AccessUrls
	}
	return nil
}

func (m *CertificateAuthority) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *CertificateAuthority) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *CertificateAuthority) GetDeletionTime() *timestamp.Timestamp {
	if m != nil {
		return m.DeletionTime
	}
	return nil
}

func (m *CertificateAuthority) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// Options that affect all certificates issued by a [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
type CertificateAuthority_IssuingOptions struct {
	// Required. When true, includes a URL to the issuing CA certificate in the
	// "authority information access" X.509 extension.
	IncludeCaCertUrl bool `protobuf:"varint,1,opt,name=include_ca_cert_url,json=includeCaCertUrl,proto3" json:"include_ca_cert_url,omitempty"`
	// Required. When true, includes a URL to the CRL corresponding to certificates
	// issued from a [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
	// CRLs will expire 7 days from their creation. However, we will rebuild
	// daily. CRLs are also rebuilt shortly after a certificate is revoked.
	IncludeCrlAccessUrl  bool     `protobuf:"varint,2,opt,name=include_crl_access_url,json=includeCrlAccessUrl,proto3" json:"include_crl_access_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateAuthority_IssuingOptions) Reset()         { *m = CertificateAuthority_IssuingOptions{} }
func (m *CertificateAuthority_IssuingOptions) String() string { return proto.CompactTextString(m) }
func (*CertificateAuthority_IssuingOptions) ProtoMessage()    {}
func (*CertificateAuthority_IssuingOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{0, 0}
}

func (m *CertificateAuthority_IssuingOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateAuthority_IssuingOptions.Unmarshal(m, b)
}
func (m *CertificateAuthority_IssuingOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateAuthority_IssuingOptions.Marshal(b, m, deterministic)
}
func (m *CertificateAuthority_IssuingOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateAuthority_IssuingOptions.Merge(m, src)
}
func (m *CertificateAuthority_IssuingOptions) XXX_Size() int {
	return xxx_messageInfo_CertificateAuthority_IssuingOptions.Size(m)
}
func (m *CertificateAuthority_IssuingOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateAuthority_IssuingOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateAuthority_IssuingOptions proto.InternalMessageInfo

func (m *CertificateAuthority_IssuingOptions) GetIncludeCaCertUrl() bool {
	if m != nil {
		return m.IncludeCaCertUrl
	}
	return false
}

func (m *CertificateAuthority_IssuingOptions) GetIncludeCrlAccessUrl() bool {
	if m != nil {
		return m.IncludeCrlAccessUrl
	}
	return false
}

// The issuing policy for a [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
// [Certificates][google.cloud.security.privateca.v1alpha1.Certificate] will not be successfully issued from this
// [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] if they violate the policy.
type CertificateAuthority_CertificateAuthorityPolicy struct {
	// Allowed configurations or a single configuration for all issued
	// certificates.
	//
	// Types that are valid to be assigned to ConfigPolicy:
	//	*CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList_
	//	*CertificateAuthority_CertificateAuthorityPolicy_OverwriteConfigValues
	ConfigPolicy isCertificateAuthority_CertificateAuthorityPolicy_ConfigPolicy `protobuf_oneof:"config_policy"`
	// Optional. If any [Subject][google.cloud.security.privateca.v1alpha1.Subject] is specified here, then all
	// [Certificates][google.cloud.security.privateca.v1alpha1.Certificate] issued by the [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] must
	// match at least one listed [Subject][google.cloud.security.privateca.v1alpha1.Subject]. If a [Subject][google.cloud.security.privateca.v1alpha1.Subject] has an empty
	// field, any value will be allowed for that field.
	AllowedLocationsAndOrganizations []*Subject `protobuf:"bytes,2,rep,name=allowed_locations_and_organizations,json=allowedLocationsAndOrganizations,proto3" json:"allowed_locations_and_organizations,omitempty"`
	// Optional. If any value is specified here, then all
	// [Certificates][google.cloud.security.privateca.v1alpha1.Certificate] issued by the [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] must
	// match at least one listed value. If no value is specified, all values
	// will be allowed for this fied. Glob patterns are also supported.
	AllowedCommonNames []string `protobuf:"bytes,7,rep,name=allowed_common_names,json=allowedCommonNames,proto3" json:"allowed_common_names,omitempty"`
	// Optional. If a [AllowedSubjectAltNames][google.cloud.security.privateca.v1alpha1.CertificateAuthority.CertificateAuthorityPolicy.AllowedSubjectAltNames] is specified here, then all
	// [Certificates][google.cloud.security.privateca.v1alpha1.Certificate] issued by the [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] must
	// match [AllowedSubjectAltNames][google.cloud.security.privateca.v1alpha1.CertificateAuthority.CertificateAuthorityPolicy.AllowedSubjectAltNames]. If no value
	// is specified, any value will be allowed for the [SubjectAltNames][google.cloud.security.privateca.v1alpha1.SubjectAltNames]
	// field.
	AllowedSans *CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames `protobuf:"bytes,8,opt,name=allowed_sans,json=allowedSans,proto3" json:"allowed_sans,omitempty"`
	// Optional. The maximum lifetime allowed by the [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority]. Note that
	// if the any part if the issuing chain expires before a [Certificate][google.cloud.security.privateca.v1alpha1.Certificate]'s
	// requested maximum_lifetime, the effective lifetime will be explicitly
	// truncated.
	MaximumLifetime      *duration.Duration `protobuf:"bytes,4,opt,name=maximum_lifetime,json=maximumLifetime,proto3" json:"maximum_lifetime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CertificateAuthority_CertificateAuthorityPolicy) Reset() {
	*m = CertificateAuthority_CertificateAuthorityPolicy{}
}
func (m *CertificateAuthority_CertificateAuthorityPolicy) String() string {
	return proto.CompactTextString(m)
}
func (*CertificateAuthority_CertificateAuthorityPolicy) ProtoMessage() {}
func (*CertificateAuthority_CertificateAuthorityPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{0, 1}
}

func (m *CertificateAuthority_CertificateAuthorityPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateAuthority_CertificateAuthorityPolicy.Unmarshal(m, b)
}
func (m *CertificateAuthority_CertificateAuthorityPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateAuthority_CertificateAuthorityPolicy.Marshal(b, m, deterministic)
}
func (m *CertificateAuthority_CertificateAuthorityPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateAuthority_CertificateAuthorityPolicy.Merge(m, src)
}
func (m *CertificateAuthority_CertificateAuthorityPolicy) XXX_Size() int {
	return xxx_messageInfo_CertificateAuthority_CertificateAuthorityPolicy.Size(m)
}
func (m *CertificateAuthority_CertificateAuthorityPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateAuthority_CertificateAuthorityPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateAuthority_CertificateAuthorityPolicy proto.InternalMessageInfo

type isCertificateAuthority_CertificateAuthorityPolicy_ConfigPolicy interface {
	isCertificateAuthority_CertificateAuthorityPolicy_ConfigPolicy()
}

type CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList_ struct {
	AllowedConfigList *CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList `protobuf:"bytes,5,opt,name=allowed_config_list,json=allowedConfigList,proto3,oneof"`
}

type CertificateAuthority_CertificateAuthorityPolicy_OverwriteConfigValues struct {
	OverwriteConfigValues *ReusableConfigWrapper `protobuf:"bytes,6,opt,name=overwrite_config_values,json=overwriteConfigValues,proto3,oneof"`
}

func (*CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList_) isCertificateAuthority_CertificateAuthorityPolicy_ConfigPolicy() {
}

func (*CertificateAuthority_CertificateAuthorityPolicy_OverwriteConfigValues) isCertificateAuthority_CertificateAuthorityPolicy_ConfigPolicy() {
}

func (m *CertificateAuthority_CertificateAuthorityPolicy) GetConfigPolicy() isCertificateAuthority_CertificateAuthorityPolicy_ConfigPolicy {
	if m != nil {
		return m.ConfigPolicy
	}
	return nil
}

func (m *CertificateAuthority_CertificateAuthorityPolicy) GetAllowedConfigList() *CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList {
	if x, ok := m.GetConfigPolicy().(*CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList_); ok {
		return x.AllowedConfigList
	}
	return nil
}

func (m *CertificateAuthority_CertificateAuthorityPolicy) GetOverwriteConfigValues() *ReusableConfigWrapper {
	if x, ok := m.GetConfigPolicy().(*CertificateAuthority_CertificateAuthorityPolicy_OverwriteConfigValues); ok {
		return x.OverwriteConfigValues
	}
	return nil
}

func (m *CertificateAuthority_CertificateAuthorityPolicy) GetAllowedLocationsAndOrganizations() []*Subject {
	if m != nil {
		return m.AllowedLocationsAndOrganizations
	}
	return nil
}

func (m *CertificateAuthority_CertificateAuthorityPolicy) GetAllowedCommonNames() []string {
	if m != nil {
		return m.AllowedCommonNames
	}
	return nil
}

func (m *CertificateAuthority_CertificateAuthorityPolicy) GetAllowedSans() *CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames {
	if m != nil {
		return m.AllowedSans
	}
	return nil
}

func (m *CertificateAuthority_CertificateAuthorityPolicy) GetMaximumLifetime() *duration.Duration {
	if m != nil {
		return m.MaximumLifetime
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CertificateAuthority_CertificateAuthorityPolicy) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList_)(nil),
		(*CertificateAuthority_CertificateAuthorityPolicy_OverwriteConfigValues)(nil),
	}
}

type CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList struct {
	// Required. All [Certificates][google.cloud.security.privateca.v1alpha1.Certificate] issued by the [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority]
	// must match at least one listed [ReusableConfigWrapper][google.cloud.security.privateca.v1alpha1.ReusableConfigWrapper]. If a
	// [ReusableConfigWrapper][google.cloud.security.privateca.v1alpha1.ReusableConfigWrapper] has an empty field, any value will be
	// allowed for that field.
	AllowedConfigValues  []*ReusableConfigWrapper `protobuf:"bytes,1,rep,name=allowed_config_values,json=allowedConfigValues,proto3" json:"allowed_config_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList) Reset() {
	*m = CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList{}
}
func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList) String() string {
	return proto.CompactTextString(m)
}
func (*CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList) ProtoMessage() {}
func (*CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{0, 1, 0}
}

func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList.Unmarshal(m, b)
}
func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList.Marshal(b, m, deterministic)
}
func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList.Merge(m, src)
}
func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList) XXX_Size() int {
	return xxx_messageInfo_CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList.Size(m)
}
func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList proto.InternalMessageInfo

func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList) GetAllowedConfigValues() []*ReusableConfigWrapper {
	if m != nil {
		return m.AllowedConfigValues
	}
	return nil
}

// [AllowedSubjectAltNames][google.cloud.security.privateca.v1alpha1.CertificateAuthority.CertificateAuthorityPolicy.AllowedSubjectAltNames] specifies the allowed values for
// [SubjectAltNames][google.cloud.security.privateca.v1alpha1.SubjectAltNames] by the [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] when issuing
// [Certificates][google.cloud.security.privateca.v1alpha1.Certificate].
type CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames struct {
	// Contains valid, fully-qualified host names. Glob patterns are also
	// supported. To allow an explicit wildcard certificate, escape with
	// backlash (i.e. "\*").
	// E.g. for globbed entries: '*bar.com' will allow foo.bar.com, but not
	// *.bar.com, unless the [allow_globbing_dns_wildcards][google.cloud.security.privateca.v1alpha1.CertificateAuthority.CertificateAuthorityPolicy.AllowedSubjectAltNames.allow_globbing_dns_wildcards] field is set.
	// E.g. for wildcard entries: '\*.bar.com' will allow '*.bar.com', but not
	// 'foo.bar.com'.
	AllowedDnsNames []string `protobuf:"bytes,1,rep,name=allowed_dns_names,json=allowedDnsNames,proto3" json:"allowed_dns_names,omitempty"`
	// Contains valid RFC 3986 URIs. Glob patterns are also supported. To
	// match across path seperators (i.e. '/') use the double star glob
	// pattern (i.e. '**').
	AllowedUris []string `protobuf:"bytes,2,rep,name=allowed_uris,json=allowedUris,proto3" json:"allowed_uris,omitempty"`
	// Contains valid RFC 2822 E-mail addresses. Glob patterns are also
	// supported.
	AllowedEmailAddresses []string `protobuf:"bytes,3,rep,name=allowed_email_addresses,json=allowedEmailAddresses,proto3" json:"allowed_email_addresses,omitempty"`
	// Contains valid 32-bit IPv4 addresses and subnet ranges or RFC 4291 IPv6
	// addresses and subnet ranges. Subnet ranges are specified using the
	// '/' notation (e.g. 10.0.0.0/8, 2001:700:300:1800::/64). Glob patterns
	// are supported only for ip address entries (i.e. not for subnet ranges).
	AllowedIps []string `protobuf:"bytes,4,rep,name=allowed_ips,json=allowedIps,proto3" json:"allowed_ips,omitempty"`
	// Specifies if glob patterns used for [allowed_dns_names][google.cloud.security.privateca.v1alpha1.CertificateAuthority.CertificateAuthorityPolicy.AllowedSubjectAltNames.allowed_dns_names] allows
	// wildcard certificates.
	AllowGlobbingDnsWildcards bool `protobuf:"varint,5,opt,name=allow_globbing_dns_wildcards,json=allowGlobbingDnsWildcards,proto3" json:"allow_globbing_dns_wildcards,omitempty"`
	// Specifies if to allow custom X509Extension values.
	AllowCustomSans      bool     `protobuf:"varint,6,opt,name=allow_custom_sans,json=allowCustomSans,proto3" json:"allow_custom_sans,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames) Reset() {
	*m = CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames{}
}
func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames) String() string {
	return proto.CompactTextString(m)
}
func (*CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames) ProtoMessage() {}
func (*CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{0, 1, 1}
}

func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames.Unmarshal(m, b)
}
func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames.Marshal(b, m, deterministic)
}
func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames.Merge(m, src)
}
func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames) XXX_Size() int {
	return xxx_messageInfo_CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames.Size(m)
}
func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames proto.InternalMessageInfo

func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames) GetAllowedDnsNames() []string {
	if m != nil {
		return m.AllowedDnsNames
	}
	return nil
}

func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames) GetAllowedUris() []string {
	if m != nil {
		return m.AllowedUris
	}
	return nil
}

func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames) GetAllowedEmailAddresses() []string {
	if m != nil {
		return m.AllowedEmailAddresses
	}
	return nil
}

func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames) GetAllowedIps() []string {
	if m != nil {
		return m.AllowedIps
	}
	return nil
}

func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames) GetAllowGlobbingDnsWildcards() bool {
	if m != nil {
		return m.AllowGlobbingDnsWildcards
	}
	return false
}

func (m *CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames) GetAllowCustomSans() bool {
	if m != nil {
		return m.AllowCustomSans
	}
	return false
}

// URLs where a [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] will publish content.
type CertificateAuthority_AccessUrls struct {
	// The URL where this [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority]'s CA certificate is
	// published. This will only be set for CAs that have been activated.
	CaCertificateAccessUrl string `protobuf:"bytes,1,opt,name=ca_certificate_access_url,json=caCertificateAccessUrl,proto3" json:"ca_certificate_access_url,omitempty"`
	// The URL where this [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority]'s CRLs are published. This
	// will only be set for CAs that have been activated.
	CrlAccessUrl         string   `protobuf:"bytes,2,opt,name=crl_access_url,json=crlAccessUrl,proto3" json:"crl_access_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateAuthority_AccessUrls) Reset()         { *m = CertificateAuthority_AccessUrls{} }
func (m *CertificateAuthority_AccessUrls) String() string { return proto.CompactTextString(m) }
func (*CertificateAuthority_AccessUrls) ProtoMessage()    {}
func (*CertificateAuthority_AccessUrls) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{0, 2}
}

func (m *CertificateAuthority_AccessUrls) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateAuthority_AccessUrls.Unmarshal(m, b)
}
func (m *CertificateAuthority_AccessUrls) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateAuthority_AccessUrls.Marshal(b, m, deterministic)
}
func (m *CertificateAuthority_AccessUrls) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateAuthority_AccessUrls.Merge(m, src)
}
func (m *CertificateAuthority_AccessUrls) XXX_Size() int {
	return xxx_messageInfo_CertificateAuthority_AccessUrls.Size(m)
}
func (m *CertificateAuthority_AccessUrls) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateAuthority_AccessUrls.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateAuthority_AccessUrls proto.InternalMessageInfo

func (m *CertificateAuthority_AccessUrls) GetCaCertificateAccessUrl() string {
	if m != nil {
		return m.CaCertificateAccessUrl
	}
	return ""
}

func (m *CertificateAuthority_AccessUrls) GetCrlAccessUrl() string {
	if m != nil {
		return m.CrlAccessUrl
	}
	return ""
}

// A [CertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateRevocationList] corresponds to a signed X.509 certificate
// Revocation List (CRL). A CRL contains the serial numbers of certificates that
// should no longer be trusted.
type CertificateRevocationList struct {
	// Output only. The resource path for this [CertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateRevocationList] in
	// the format
	// `projects/*/locations/*/certificateAuthorities/*/
	//    certificateRevocationLists/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The CRL sequence number that appears in pem_crl.
	SequenceNumber int64 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Output only. The revoked serial numbers that appear in pem_crl.
	RevokedCertificates []*CertificateRevocationList_RevokedCertificate `protobuf:"bytes,3,rep,name=revoked_certificates,json=revokedCertificates,proto3" json:"revoked_certificates,omitempty"`
	// Output only. The PEM-encoded X.509 CRL.
	PemCrl string `protobuf:"bytes,4,opt,name=pem_crl,json=pemCrl,proto3" json:"pem_crl,omitempty"`
	// Output only. The location where 'pem_crl' can be accessed.
	AccessUrl string `protobuf:"bytes,5,opt,name=access_url,json=accessUrl,proto3" json:"access_url,omitempty"`
	// Output only. The [State][google.cloud.security.privateca.v1alpha1.CertificateRevocationList.State] for this [CertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateRevocationList].
	State CertificateRevocationList_State `protobuf:"varint,6,opt,name=state,proto3,enum=google.cloud.security.privateca.v1alpha1.CertificateRevocationList_State" json:"state,omitempty"`
	// Output only. The time at which this [CertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateRevocationList] was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which this [CertificateRevocationList][google.cloud.security.privateca.v1alpha1.CertificateRevocationList] was updated.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. Labels with user-defined metadata.
	Labels               map[string]string `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CertificateRevocationList) Reset()         { *m = CertificateRevocationList{} }
func (m *CertificateRevocationList) String() string { return proto.CompactTextString(m) }
func (*CertificateRevocationList) ProtoMessage()    {}
func (*CertificateRevocationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{1}
}

func (m *CertificateRevocationList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateRevocationList.Unmarshal(m, b)
}
func (m *CertificateRevocationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateRevocationList.Marshal(b, m, deterministic)
}
func (m *CertificateRevocationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateRevocationList.Merge(m, src)
}
func (m *CertificateRevocationList) XXX_Size() int {
	return xxx_messageInfo_CertificateRevocationList.Size(m)
}
func (m *CertificateRevocationList) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateRevocationList.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateRevocationList proto.InternalMessageInfo

func (m *CertificateRevocationList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CertificateRevocationList) GetSequenceNumber() int64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *CertificateRevocationList) GetRevokedCertificates() []*CertificateRevocationList_RevokedCertificate {
	if m != nil {
		return m.RevokedCertificates
	}
	return nil
}

func (m *CertificateRevocationList) GetPemCrl() string {
	if m != nil {
		return m.PemCrl
	}
	return ""
}

func (m *CertificateRevocationList) GetAccessUrl() string {
	if m != nil {
		return m.AccessUrl
	}
	return ""
}

func (m *CertificateRevocationList) GetState() CertificateRevocationList_State {
	if m != nil {
		return m.State
	}
	return CertificateRevocationList_STATE_UNSPECIFIED
}

func (m *CertificateRevocationList) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *CertificateRevocationList) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *CertificateRevocationList) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// Describes a revoked [Certificate][google.cloud.security.privateca.v1alpha1.Certificate].
type CertificateRevocationList_RevokedCertificate struct {
	// The resource path for the [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] in the format
	// `projects/*/locations/*/certificateAuthorities/*/certificates/*`.
	Certificate string `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// The serial number of the [Certificate][google.cloud.security.privateca.v1alpha1.Certificate].
	SerialNumber string `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// The reason the [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] was revoked.
	RevocationReason     RevocationReason `protobuf:"varint,3,opt,name=revocation_reason,json=revocationReason,proto3,enum=google.cloud.security.privateca.v1alpha1.RevocationReason" json:"revocation_reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CertificateRevocationList_RevokedCertificate) Reset() {
	*m = CertificateRevocationList_RevokedCertificate{}
}
func (m *CertificateRevocationList_RevokedCertificate) String() string {
	return proto.CompactTextString(m)
}
func (*CertificateRevocationList_RevokedCertificate) ProtoMessage() {}
func (*CertificateRevocationList_RevokedCertificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{1, 0}
}

func (m *CertificateRevocationList_RevokedCertificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateRevocationList_RevokedCertificate.Unmarshal(m, b)
}
func (m *CertificateRevocationList_RevokedCertificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateRevocationList_RevokedCertificate.Marshal(b, m, deterministic)
}
func (m *CertificateRevocationList_RevokedCertificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateRevocationList_RevokedCertificate.Merge(m, src)
}
func (m *CertificateRevocationList_RevokedCertificate) XXX_Size() int {
	return xxx_messageInfo_CertificateRevocationList_RevokedCertificate.Size(m)
}
func (m *CertificateRevocationList_RevokedCertificate) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateRevocationList_RevokedCertificate.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateRevocationList_RevokedCertificate proto.InternalMessageInfo

func (m *CertificateRevocationList_RevokedCertificate) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *CertificateRevocationList_RevokedCertificate) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *CertificateRevocationList_RevokedCertificate) GetRevocationReason() RevocationReason {
	if m != nil {
		return m.RevocationReason
	}
	return RevocationReason_REVOCATION_REASON_UNSPECIFIED
}

// A [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] corresponds to a signed X.509 certificate issued by a
// [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority].
type Certificate struct {
	// Output only. The resource path for this [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] in the format
	// `projects/*/locations/*/certificateAuthorities/*/certificates/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The config used to create a signed X.509 certificate.
	//
	// Types that are valid to be assigned to CertificateConfig:
	//	*Certificate_PemCsr
	//	*Certificate_Config
	CertificateConfig isCertificate_CertificateConfig `protobuf_oneof:"certificate_config"`
	// Required. The desired lifetime of a certificate. Used to create the
	// "not_before_time" and "not_after_time" fields inside an X.509
	// certificate. Note that the lifetime may be truncated if it would extend
	// past the life of any certificate authority in the issuing chain.
	Lifetime *duration.Duration `protobuf:"bytes,4,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	// Output only. Details regarding the revocation of this [Certificate][google.cloud.security.privateca.v1alpha1.Certificate]. This
	// [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] is considered revoked if and only if this field is present.
	RevocationDetails *Certificate_RevocationDetails `protobuf:"bytes,5,opt,name=revocation_details,json=revocationDetails,proto3" json:"revocation_details,omitempty"`
	// Output only. The pem-encoded, signed X.509 certificate.
	PemCertificate string `protobuf:"bytes,6,opt,name=pem_certificate,json=pemCertificate,proto3" json:"pem_certificate,omitempty"`
	// Output only. A structured description of the issued X.509 certificate.
	CertificateDescription *CertificateDescription `protobuf:"bytes,7,opt,name=certificate_description,json=certificateDescription,proto3" json:"certificate_description,omitempty"`
	// Output only. The chain that may be used to verify the X.509 certificate. Expected to be
	// in issuer-to-root order according to RFC 5246.
	PemCertificateChain []string `protobuf:"bytes,8,rep,name=pem_certificate_chain,json=pemCertificateChain,proto3" json:"pem_certificate_chain,omitempty"`
	// Output only. The time at which this [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which this [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] was updated.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. Labels with user-defined metadata.
	Labels               map[string]string `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Certificate) Reset()         { *m = Certificate{} }
func (m *Certificate) String() string { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()    {}
func (*Certificate) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{2}
}

func (m *Certificate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Certificate.Unmarshal(m, b)
}
func (m *Certificate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Certificate.Marshal(b, m, deterministic)
}
func (m *Certificate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certificate.Merge(m, src)
}
func (m *Certificate) XXX_Size() int {
	return xxx_messageInfo_Certificate.Size(m)
}
func (m *Certificate) XXX_DiscardUnknown() {
	xxx_messageInfo_Certificate.DiscardUnknown(m)
}

var xxx_messageInfo_Certificate proto.InternalMessageInfo

func (m *Certificate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type isCertificate_CertificateConfig interface {
	isCertificate_CertificateConfig()
}

type Certificate_PemCsr struct {
	PemCsr string `protobuf:"bytes,2,opt,name=pem_csr,json=pemCsr,proto3,oneof"`
}

type Certificate_Config struct {
	Config *CertificateConfig `protobuf:"bytes,3,opt,name=config,proto3,oneof"`
}

func (*Certificate_PemCsr) isCertificate_CertificateConfig() {}

func (*Certificate_Config) isCertificate_CertificateConfig() {}

func (m *Certificate) GetCertificateConfig() isCertificate_CertificateConfig {
	if m != nil {
		return m.CertificateConfig
	}
	return nil
}

func (m *Certificate) GetPemCsr() string {
	if x, ok := m.GetCertificateConfig().(*Certificate_PemCsr); ok {
		return x.PemCsr
	}
	return ""
}

func (m *Certificate) GetConfig() *CertificateConfig {
	if x, ok := m.GetCertificateConfig().(*Certificate_Config); ok {
		return x.Config
	}
	return nil
}

func (m *Certificate) GetLifetime() *duration.Duration {
	if m != nil {
		return m.Lifetime
	}
	return nil
}

func (m *Certificate) GetRevocationDetails() *Certificate_RevocationDetails {
	if m != nil {
		return m.RevocationDetails
	}
	return nil
}

func (m *Certificate) GetPemCertificate() string {
	if m != nil {
		return m.PemCertificate
	}
	return ""
}

func (m *Certificate) GetCertificateDescription() *CertificateDescription {
	if m != nil {
		return m.CertificateDescription
	}
	return nil
}

func (m *Certificate) GetPemCertificateChain() []string {
	if m != nil {
		return m.PemCertificateChain
	}
	return nil
}

func (m *Certificate) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Certificate) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *Certificate) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Certificate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Certificate_PemCsr)(nil),
		(*Certificate_Config)(nil),
	}
}

// Describes fields that are relavent to the revocation of a [Certificate][google.cloud.security.privateca.v1alpha1.Certificate].
type Certificate_RevocationDetails struct {
	// Indicates why a [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] was revoked.
	RevocationState RevocationReason `protobuf:"varint,1,opt,name=revocation_state,json=revocationState,proto3,enum=google.cloud.security.privateca.v1alpha1.RevocationReason" json:"revocation_state,omitempty"`
	// The time at which this [Certificate][google.cloud.security.privateca.v1alpha1.Certificate] was revoked.
	RevocationTime       *timestamp.Timestamp `protobuf:"bytes,2,opt,name=revocation_time,json=revocationTime,proto3" json:"revocation_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Certificate_RevocationDetails) Reset()         { *m = Certificate_RevocationDetails{} }
func (m *Certificate_RevocationDetails) String() string { return proto.CompactTextString(m) }
func (*Certificate_RevocationDetails) ProtoMessage()    {}
func (*Certificate_RevocationDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{2, 0}
}

func (m *Certificate_RevocationDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Certificate_RevocationDetails.Unmarshal(m, b)
}
func (m *Certificate_RevocationDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Certificate_RevocationDetails.Marshal(b, m, deterministic)
}
func (m *Certificate_RevocationDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Certificate_RevocationDetails.Merge(m, src)
}
func (m *Certificate_RevocationDetails) XXX_Size() int {
	return xxx_messageInfo_Certificate_RevocationDetails.Size(m)
}
func (m *Certificate_RevocationDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_Certificate_RevocationDetails.DiscardUnknown(m)
}

var xxx_messageInfo_Certificate_RevocationDetails proto.InternalMessageInfo

func (m *Certificate_RevocationDetails) GetRevocationState() RevocationReason {
	if m != nil {
		return m.RevocationState
	}
	return RevocationReason_REVOCATION_REASON_UNSPECIFIED
}

func (m *Certificate_RevocationDetails) GetRevocationTime() *timestamp.Timestamp {
	if m != nil {
		return m.RevocationTime
	}
	return nil
}

// A [ReusableConfig][google.cloud.security.privateca.v1alpha1.ReusableConfig] refers to a managed [ReusableConfigValues][google.cloud.security.privateca.v1alpha1.ReusableConfigValues]. Those, in
// turn, are used to describe certain fields of an X.509 certificate, such as
// the key usage fields, fields specific to CA certificates, certificate policy
// extensions and custom extensions.
type ReusableConfig struct {
	// Output only. The resource path for this [ReusableConfig][google.cloud.security.privateca.v1alpha1.ReusableConfig] in the format
	// `projects/*/locations/*/reusableConfigs/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The config values.
	Values *ReusableConfigValues `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
	// Optional. A human-readable description of scenarios these ReusableConfigValues may be
	// compatible with.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The time at which this [ReusableConfig][google.cloud.security.privateca.v1alpha1.ReusableConfig] was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time at which this [ReusableConfig][google.cloud.security.privateca.v1alpha1.ReusableConfig] was updated.
	UpdateTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. Labels with user-defined metadata.
	Labels               map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReusableConfig) Reset()         { *m = ReusableConfig{} }
func (m *ReusableConfig) String() string { return proto.CompactTextString(m) }
func (*ReusableConfig) ProtoMessage()    {}
func (*ReusableConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{3}
}

func (m *ReusableConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReusableConfig.Unmarshal(m, b)
}
func (m *ReusableConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReusableConfig.Marshal(b, m, deterministic)
}
func (m *ReusableConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReusableConfig.Merge(m, src)
}
func (m *ReusableConfig) XXX_Size() int {
	return xxx_messageInfo_ReusableConfig.Size(m)
}
func (m *ReusableConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ReusableConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ReusableConfig proto.InternalMessageInfo

func (m *ReusableConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReusableConfig) GetValues() *ReusableConfigValues {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *ReusableConfig) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ReusableConfig) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *ReusableConfig) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *ReusableConfig) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// A [ReusableConfigValues][google.cloud.security.privateca.v1alpha1.ReusableConfigValues] is used to describe certain fields of an
// X.509 certificate, such as the key usage fields, fields specific to CA
// certificates, certificate policy extensions and custom extensions.
type ReusableConfigValues struct {
	// Optional. Indicates the intended use for keys that correspond to a certificate.
	KeyUsage *KeyUsage `protobuf:"bytes,1,opt,name=key_usage,json=keyUsage,proto3" json:"key_usage,omitempty"`
	// Optional. Describes options in this [ReusableConfigValues][google.cloud.security.privateca.v1alpha1.ReusableConfigValues] that are
	// relevant in a CA certificate.
	CaOptions *ReusableConfigValues_CaOptions `protobuf:"bytes,2,opt,name=ca_options,json=caOptions,proto3" json:"ca_options,omitempty"`
	// Optional. Describes the X.509 certificate policy object identifiers, per
	// https://tools.ietf.org/html/rfc5280#section-4.2.1.4rfc5280
	PolicyIds []*ObjectId `protobuf:"bytes,3,rep,name=policy_ids,json=policyIds,proto3" json:"policy_ids,omitempty"`
	// Optional. Describes custom X.509 extensions.
	AdditionalExtensions []*X509Extension `protobuf:"bytes,4,rep,name=additional_extensions,json=additionalExtensions,proto3" json:"additional_extensions,omitempty"`
	// Optional. Describes a list of locations to obtain CRL information, i.e.
	// the DistributionPoint.fullName described by
	// https://tools.ietf.org/html/rfc5280#section-4.2.1.13
	CrlDistributionPoints []string `protobuf:"bytes,5,rep,name=crl_distribution_points,json=crlDistributionPoints,proto3" json:"crl_distribution_points,omitempty"`
	// Optional. Describes how to access information and services for the issuer of the
	//  certificate.
	AuthorityInformationAccess *ReusableConfigValues_AuthorityInformationAccess `protobuf:"bytes,6,opt,name=authority_information_access,json=authorityInformationAccess,proto3" json:"authority_information_access,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                                         `json:"-"`
	XXX_unrecognized           []byte                                           `json:"-"`
	XXX_sizecache              int32                                            `json:"-"`
}

func (m *ReusableConfigValues) Reset()         { *m = ReusableConfigValues{} }
func (m *ReusableConfigValues) String() string { return proto.CompactTextString(m) }
func (*ReusableConfigValues) ProtoMessage()    {}
func (*ReusableConfigValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{4}
}

func (m *ReusableConfigValues) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReusableConfigValues.Unmarshal(m, b)
}
func (m *ReusableConfigValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReusableConfigValues.Marshal(b, m, deterministic)
}
func (m *ReusableConfigValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReusableConfigValues.Merge(m, src)
}
func (m *ReusableConfigValues) XXX_Size() int {
	return xxx_messageInfo_ReusableConfigValues.Size(m)
}
func (m *ReusableConfigValues) XXX_DiscardUnknown() {
	xxx_messageInfo_ReusableConfigValues.DiscardUnknown(m)
}

var xxx_messageInfo_ReusableConfigValues proto.InternalMessageInfo

func (m *ReusableConfigValues) GetKeyUsage() *KeyUsage {
	if m != nil {
		return m.KeyUsage
	}
	return nil
}

func (m *ReusableConfigValues) GetCaOptions() *ReusableConfigValues_CaOptions {
	if m != nil {
		return m.CaOptions
	}
	return nil
}

func (m *ReusableConfigValues) GetPolicyIds() []*ObjectId {
	if m != nil {
		return m.PolicyIds
	}
	return nil
}

func (m *ReusableConfigValues) GetAdditionalExtensions() []*X509Extension {
	if m != nil {
		return m.AdditionalExtensions
	}
	return nil
}

func (m *ReusableConfigValues) GetCrlDistributionPoints() []string {
	if m != nil {
		return m.CrlDistributionPoints
	}
	return nil
}

func (m *ReusableConfigValues) GetAuthorityInformationAccess() *ReusableConfigValues_AuthorityInformationAccess {
	if m != nil {
		return m.AuthorityInformationAccess
	}
	return nil
}

// Describes values that are relevant in a CA certificate.
type ReusableConfigValues_CaOptions struct {
	// Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this
	// value is missing, the extension will be omitted from the CA certificate.
	IsCa *wrappers.BoolValue `protobuf:"bytes,1,opt,name=is_ca,json=isCa,proto3" json:"is_ca,omitempty"`
	// Optional. Refers to the path length restriction X.509 extension. For a CA
	// certificate, this value describes the depth of subordinate CA
	// certificates that are allowed.
	// If this value is less than 0, the request will fail.
	// If this value is missing, the max path length will be omitted from the
	// CA certificate.
	MaxIssuerPathLength  *wrappers.Int32Value `protobuf:"bytes,2,opt,name=max_issuer_path_length,json=maxIssuerPathLength,proto3" json:"max_issuer_path_length,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ReusableConfigValues_CaOptions) Reset()         { *m = ReusableConfigValues_CaOptions{} }
func (m *ReusableConfigValues_CaOptions) String() string { return proto.CompactTextString(m) }
func (*ReusableConfigValues_CaOptions) ProtoMessage()    {}
func (*ReusableConfigValues_CaOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{4, 0}
}

func (m *ReusableConfigValues_CaOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReusableConfigValues_CaOptions.Unmarshal(m, b)
}
func (m *ReusableConfigValues_CaOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReusableConfigValues_CaOptions.Marshal(b, m, deterministic)
}
func (m *ReusableConfigValues_CaOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReusableConfigValues_CaOptions.Merge(m, src)
}
func (m *ReusableConfigValues_CaOptions) XXX_Size() int {
	return xxx_messageInfo_ReusableConfigValues_CaOptions.Size(m)
}
func (m *ReusableConfigValues_CaOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReusableConfigValues_CaOptions.DiscardUnknown(m)
}

var xxx_messageInfo_ReusableConfigValues_CaOptions proto.InternalMessageInfo

func (m *ReusableConfigValues_CaOptions) GetIsCa() *wrappers.BoolValue {
	if m != nil {
		return m.IsCa
	}
	return nil
}

func (m *ReusableConfigValues_CaOptions) GetMaxIssuerPathLength() *wrappers.Int32Value {
	if m != nil {
		return m.MaxIssuerPathLength
	}
	return nil
}

// Describes how to access information and services for the issuer of the
// certificate, per https://tools.ietf.org/html/rfc5280#section-4.2.2.1
type ReusableConfigValues_AuthorityInformationAccess struct {
	// Optional. The referenced CA issuers description is intended to aid certificate
	// users in the selection of a certification path that terminates at a
	// point trusted by the certificate user.
	IssuingCertificateUrls []string `protobuf:"bytes,1,rep,name=issuing_certificate_urls,json=issuingCertificateUrls,proto3" json:"issuing_certificate_urls,omitempty"`
	// Optional. Used when revocation information for the
	// certificate containing this extension is available using the Online
	// Certificate Status Protocol (OCSP)
	OcspServers          []string `protobuf:"bytes,2,rep,name=ocsp_servers,json=ocspServers,proto3" json:"ocsp_servers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReusableConfigValues_AuthorityInformationAccess) Reset() {
	*m = ReusableConfigValues_AuthorityInformationAccess{}
}
func (m *ReusableConfigValues_AuthorityInformationAccess) String() string {
	return proto.CompactTextString(m)
}
func (*ReusableConfigValues_AuthorityInformationAccess) ProtoMessage() {}
func (*ReusableConfigValues_AuthorityInformationAccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{4, 1}
}

func (m *ReusableConfigValues_AuthorityInformationAccess) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReusableConfigValues_AuthorityInformationAccess.Unmarshal(m, b)
}
func (m *ReusableConfigValues_AuthorityInformationAccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReusableConfigValues_AuthorityInformationAccess.Marshal(b, m, deterministic)
}
func (m *ReusableConfigValues_AuthorityInformationAccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReusableConfigValues_AuthorityInformationAccess.Merge(m, src)
}
func (m *ReusableConfigValues_AuthorityInformationAccess) XXX_Size() int {
	return xxx_messageInfo_ReusableConfigValues_AuthorityInformationAccess.Size(m)
}
func (m *ReusableConfigValues_AuthorityInformationAccess) XXX_DiscardUnknown() {
	xxx_messageInfo_ReusableConfigValues_AuthorityInformationAccess.DiscardUnknown(m)
}

var xxx_messageInfo_ReusableConfigValues_AuthorityInformationAccess proto.InternalMessageInfo

func (m *ReusableConfigValues_AuthorityInformationAccess) GetIssuingCertificateUrls() []string {
	if m != nil {
		return m.IssuingCertificateUrls
	}
	return nil
}

func (m *ReusableConfigValues_AuthorityInformationAccess) GetOcspServers() []string {
	if m != nil {
		return m.OcspServers
	}
	return nil
}

// A [ReusableConfigWrapper][google.cloud.security.privateca.v1alpha1.ReusableConfigWrapper] describes values that may assist in creating an
// X.509 certificate, or a reference to a pre-defined set of values.
type ReusableConfigWrapper struct {
	// Reusable or inline config values.
	//
	// Types that are valid to be assigned to ConfigValues:
	//	*ReusableConfigWrapper_ReusableConfig
	//	*ReusableConfigWrapper_ReusableConfigValues
	ConfigValues         isReusableConfigWrapper_ConfigValues `protobuf_oneof:"config_values"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *ReusableConfigWrapper) Reset()         { *m = ReusableConfigWrapper{} }
func (m *ReusableConfigWrapper) String() string { return proto.CompactTextString(m) }
func (*ReusableConfigWrapper) ProtoMessage()    {}
func (*ReusableConfigWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{5}
}

func (m *ReusableConfigWrapper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReusableConfigWrapper.Unmarshal(m, b)
}
func (m *ReusableConfigWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReusableConfigWrapper.Marshal(b, m, deterministic)
}
func (m *ReusableConfigWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReusableConfigWrapper.Merge(m, src)
}
func (m *ReusableConfigWrapper) XXX_Size() int {
	return xxx_messageInfo_ReusableConfigWrapper.Size(m)
}
func (m *ReusableConfigWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_ReusableConfigWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_ReusableConfigWrapper proto.InternalMessageInfo

type isReusableConfigWrapper_ConfigValues interface {
	isReusableConfigWrapper_ConfigValues()
}

type ReusableConfigWrapper_ReusableConfig struct {
	ReusableConfig string `protobuf:"bytes,1,opt,name=reusable_config,json=reusableConfig,proto3,oneof"`
}

type ReusableConfigWrapper_ReusableConfigValues struct {
	ReusableConfigValues *ReusableConfigValues `protobuf:"bytes,2,opt,name=reusable_config_values,json=reusableConfigValues,proto3,oneof"`
}

func (*ReusableConfigWrapper_ReusableConfig) isReusableConfigWrapper_ConfigValues() {}

func (*ReusableConfigWrapper_ReusableConfigValues) isReusableConfigWrapper_ConfigValues() {}

func (m *ReusableConfigWrapper) GetConfigValues() isReusableConfigWrapper_ConfigValues {
	if m != nil {
		return m.ConfigValues
	}
	return nil
}

func (m *ReusableConfigWrapper) GetReusableConfig() string {
	if x, ok := m.GetConfigValues().(*ReusableConfigWrapper_ReusableConfig); ok {
		return x.ReusableConfig
	}
	return ""
}

func (m *ReusableConfigWrapper) GetReusableConfigValues() *ReusableConfigValues {
	if x, ok := m.GetConfigValues().(*ReusableConfigWrapper_ReusableConfigValues); ok {
		return x.ReusableConfigValues
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReusableConfigWrapper) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReusableConfigWrapper_ReusableConfig)(nil),
		(*ReusableConfigWrapper_ReusableConfigValues)(nil),
	}
}

// A [PublicKey][google.cloud.security.privateca.v1alpha1.PublicKey] describes a public key.
type PublicKey struct {
	// Required. The type of public key.
	Type PublicKey_KeyType `protobuf:"varint,1,opt,name=type,proto3,enum=google.cloud.security.privateca.v1alpha1.PublicKey_KeyType" json:"type,omitempty"`
	// Required. A public key. Padding and encoding varies by 'KeyType' and is described
	// along with the KeyType values.
	Key                  []byte   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicKey) Reset()         { *m = PublicKey{} }
func (m *PublicKey) String() string { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()    {}
func (*PublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{6}
}

func (m *PublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicKey.Unmarshal(m, b)
}
func (m *PublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicKey.Marshal(b, m, deterministic)
}
func (m *PublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicKey.Merge(m, src)
}
func (m *PublicKey) XXX_Size() int {
	return xxx_messageInfo_PublicKey.Size(m)
}
func (m *PublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_PublicKey proto.InternalMessageInfo

func (m *PublicKey) GetType() PublicKey_KeyType {
	if m != nil {
		return m.Type
	}
	return PublicKey_KEY_TYPE_UNSPECIFIED
}

func (m *PublicKey) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

// A [CertificateConfig][google.cloud.security.privateca.v1alpha1.CertificateConfig] describes an X.509 certificate or CSR that is to be
// created, as an alternative to using ASN.1.
type CertificateConfig struct {
	// Required. Specifies some of the values in a certificate that are related to the
	// subject.
	SubjectConfig *CertificateConfig_SubjectConfig `protobuf:"bytes,1,opt,name=subject_config,json=subjectConfig,proto3" json:"subject_config,omitempty"`
	// Required. Describes how some of the technical fields in a certificate should be
	// populated.
	ReusableConfig *ReusableConfigWrapper `protobuf:"bytes,2,opt,name=reusable_config,json=reusableConfig,proto3" json:"reusable_config,omitempty"`
	// Optional. The public key that corresponds to this config. This is, for example, used
	// when issuing [Certificates][google.cloud.security.privateca.v1alpha1.Certificate], but not when creating a
	// self-signed [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] or [CertificateAuthority][google.cloud.security.privateca.v1alpha1.CertificateAuthority] CSR.
	PublicKey            *PublicKey `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CertificateConfig) Reset()         { *m = CertificateConfig{} }
func (m *CertificateConfig) String() string { return proto.CompactTextString(m) }
func (*CertificateConfig) ProtoMessage()    {}
func (*CertificateConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{7}
}

func (m *CertificateConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateConfig.Unmarshal(m, b)
}
func (m *CertificateConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateConfig.Marshal(b, m, deterministic)
}
func (m *CertificateConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateConfig.Merge(m, src)
}
func (m *CertificateConfig) XXX_Size() int {
	return xxx_messageInfo_CertificateConfig.Size(m)
}
func (m *CertificateConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateConfig proto.InternalMessageInfo

func (m *CertificateConfig) GetSubjectConfig() *CertificateConfig_SubjectConfig {
	if m != nil {
		return m.SubjectConfig
	}
	return nil
}

func (m *CertificateConfig) GetReusableConfig() *ReusableConfigWrapper {
	if m != nil {
		return m.ReusableConfig
	}
	return nil
}

func (m *CertificateConfig) GetPublicKey() *PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

// These values are used to create the distinguished name and subject
// alternative name fields in an X.509 certificate.
type CertificateConfig_SubjectConfig struct {
	// Required. Contains distinguished name fields such as the location and organization.
	Subject *Subject `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// Optional. The "common name" of the distinguished name.
	CommonName string `protobuf:"bytes,2,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	// Optional. The subject alternative name fields.
	SubjectAltName       *SubjectAltNames `protobuf:"bytes,3,opt,name=subject_alt_name,json=subjectAltName,proto3" json:"subject_alt_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CertificateConfig_SubjectConfig) Reset()         { *m = CertificateConfig_SubjectConfig{} }
func (m *CertificateConfig_SubjectConfig) String() string { return proto.CompactTextString(m) }
func (*CertificateConfig_SubjectConfig) ProtoMessage()    {}
func (*CertificateConfig_SubjectConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{7, 0}
}

func (m *CertificateConfig_SubjectConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateConfig_SubjectConfig.Unmarshal(m, b)
}
func (m *CertificateConfig_SubjectConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateConfig_SubjectConfig.Marshal(b, m, deterministic)
}
func (m *CertificateConfig_SubjectConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateConfig_SubjectConfig.Merge(m, src)
}
func (m *CertificateConfig_SubjectConfig) XXX_Size() int {
	return xxx_messageInfo_CertificateConfig_SubjectConfig.Size(m)
}
func (m *CertificateConfig_SubjectConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateConfig_SubjectConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateConfig_SubjectConfig proto.InternalMessageInfo

func (m *CertificateConfig_SubjectConfig) GetSubject() *Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *CertificateConfig_SubjectConfig) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *CertificateConfig_SubjectConfig) GetSubjectAltName() *SubjectAltNames {
	if m != nil {
		return m.SubjectAltName
	}
	return nil
}

// A [CertificateDescription][google.cloud.security.privateca.v1alpha1.CertificateDescription] describes an X.509 certificate or CSR that has
// been issued, as an alternative to using ASN.1 / X.509.
type CertificateDescription struct {
	// Describes some of the values in a certificate that are related to the
	// subject and lifetime.
	SubjectDescription *CertificateDescription_SubjectDescription `protobuf:"bytes,1,opt,name=subject_description,json=subjectDescription,proto3" json:"subject_description,omitempty"`
	// Describes some of the technical fields in a certificate.
	ConfigValues *ReusableConfigValues `protobuf:"bytes,2,opt,name=config_values,json=configValues,proto3" json:"config_values,omitempty"`
	// The public key that corresponds to an issued certificate.
	PublicKey *PublicKey `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Provides a means of identifiying certificates that contain a particular
	// public key, per https://tools.ietf.org/html/rfc5280#section-4.2.1.2.
	SubjectKeyId *CertificateDescription_KeyId `protobuf:"bytes,4,opt,name=subject_key_id,json=subjectKeyId,proto3" json:"subject_key_id,omitempty"`
	// Identifies the subject_key_id of the parent certificate, per
	// https://tools.ietf.org/html/rfc5280#section-4.2.1.1
	AuthorityKeyId       *CertificateDescription_KeyId `protobuf:"bytes,5,opt,name=authority_key_id,json=authorityKeyId,proto3" json:"authority_key_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CertificateDescription) Reset()         { *m = CertificateDescription{} }
func (m *CertificateDescription) String() string { return proto.CompactTextString(m) }
func (*CertificateDescription) ProtoMessage()    {}
func (*CertificateDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{8}
}

func (m *CertificateDescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateDescription.Unmarshal(m, b)
}
func (m *CertificateDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateDescription.Marshal(b, m, deterministic)
}
func (m *CertificateDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateDescription.Merge(m, src)
}
func (m *CertificateDescription) XXX_Size() int {
	return xxx_messageInfo_CertificateDescription.Size(m)
}
func (m *CertificateDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateDescription.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateDescription proto.InternalMessageInfo

func (m *CertificateDescription) GetSubjectDescription() *CertificateDescription_SubjectDescription {
	if m != nil {
		return m.SubjectDescription
	}
	return nil
}

func (m *CertificateDescription) GetConfigValues() *ReusableConfigValues {
	if m != nil {
		return m.ConfigValues
	}
	return nil
}

func (m *CertificateDescription) GetPublicKey() *PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *CertificateDescription) GetSubjectKeyId() *CertificateDescription_KeyId {
	if m != nil {
		return m.SubjectKeyId
	}
	return nil
}

func (m *CertificateDescription) GetAuthorityKeyId() *CertificateDescription_KeyId {
	if m != nil {
		return m.AuthorityKeyId
	}
	return nil
}

// These values describe fields in an issued X.509 certificate such as the
// distinguished name, subject alternative names, serial number, and lifetime.
type CertificateDescription_SubjectDescription struct {
	// Contains distinguished name fields such as the location and organization.
	Subject *Subject `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// The "common name" of the distinguished name.
	CommonName string `protobuf:"bytes,2,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	// The subject alternative name fields.
	SubjectAltName *SubjectAltNames `protobuf:"bytes,3,opt,name=subject_alt_name,json=subjectAltName,proto3" json:"subject_alt_name,omitempty"`
	// The serial number encoded in lowercase hexadecimal.
	HexSerialNumber string `protobuf:"bytes,4,opt,name=hex_serial_number,json=hexSerialNumber,proto3" json:"hex_serial_number,omitempty"`
	// For convenience, the actual lifetime of an issued certificate.
	// Corresponds to 'not_after_time' - 'not_before_time'.
	Lifetime *duration.Duration `protobuf:"bytes,5,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	// The time at which the certificate becomes valid.
	NotBeforeTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=not_before_time,json=notBeforeTime,proto3" json:"not_before_time,omitempty"`
	// The time at which the certificate expires.
	NotAfterTime         *timestamp.Timestamp `protobuf:"bytes,7,opt,name=not_after_time,json=notAfterTime,proto3" json:"not_after_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CertificateDescription_SubjectDescription) Reset() {
	*m = CertificateDescription_SubjectDescription{}
}
func (m *CertificateDescription_SubjectDescription) String() string {
	return proto.CompactTextString(m)
}
func (*CertificateDescription_SubjectDescription) ProtoMessage() {}
func (*CertificateDescription_SubjectDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{8, 0}
}

func (m *CertificateDescription_SubjectDescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateDescription_SubjectDescription.Unmarshal(m, b)
}
func (m *CertificateDescription_SubjectDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateDescription_SubjectDescription.Marshal(b, m, deterministic)
}
func (m *CertificateDescription_SubjectDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateDescription_SubjectDescription.Merge(m, src)
}
func (m *CertificateDescription_SubjectDescription) XXX_Size() int {
	return xxx_messageInfo_CertificateDescription_SubjectDescription.Size(m)
}
func (m *CertificateDescription_SubjectDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateDescription_SubjectDescription.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateDescription_SubjectDescription proto.InternalMessageInfo

func (m *CertificateDescription_SubjectDescription) GetSubject() *Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *CertificateDescription_SubjectDescription) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *CertificateDescription_SubjectDescription) GetSubjectAltName() *SubjectAltNames {
	if m != nil {
		return m.SubjectAltName
	}
	return nil
}

func (m *CertificateDescription_SubjectDescription) GetHexSerialNumber() string {
	if m != nil {
		return m.HexSerialNumber
	}
	return ""
}

func (m *CertificateDescription_SubjectDescription) GetLifetime() *duration.Duration {
	if m != nil {
		return m.Lifetime
	}
	return nil
}

func (m *CertificateDescription_SubjectDescription) GetNotBeforeTime() *timestamp.Timestamp {
	if m != nil {
		return m.NotBeforeTime
	}
	return nil
}

func (m *CertificateDescription_SubjectDescription) GetNotAfterTime() *timestamp.Timestamp {
	if m != nil {
		return m.NotAfterTime
	}
	return nil
}

// A KeyId identifies a specific public key, usually by hashing the public
// key.
type CertificateDescription_KeyId struct {
	// Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most
	// likely the 160 bit SHA-1 hash of the public key.
	KeyId                string   `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateDescription_KeyId) Reset()         { *m = CertificateDescription_KeyId{} }
func (m *CertificateDescription_KeyId) String() string { return proto.CompactTextString(m) }
func (*CertificateDescription_KeyId) ProtoMessage()    {}
func (*CertificateDescription_KeyId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{8, 1}
}

func (m *CertificateDescription_KeyId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateDescription_KeyId.Unmarshal(m, b)
}
func (m *CertificateDescription_KeyId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateDescription_KeyId.Marshal(b, m, deterministic)
}
func (m *CertificateDescription_KeyId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateDescription_KeyId.Merge(m, src)
}
func (m *CertificateDescription_KeyId) XXX_Size() int {
	return xxx_messageInfo_CertificateDescription_KeyId.Size(m)
}
func (m *CertificateDescription_KeyId) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateDescription_KeyId.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateDescription_KeyId proto.InternalMessageInfo

func (m *CertificateDescription_KeyId) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

// An [ObjectId][google.cloud.security.privateca.v1alpha1.ObjectId] specifies an object identifier (OID). These provide context
// and describe types in ASN.1 messages.
type ObjectId struct {
	// Required. The parts of an OID path. The most significant parts of the path come
	// first.
	ObjectIdPath         []int32  `protobuf:"varint,1,rep,packed,name=object_id_path,json=objectIdPath,proto3" json:"object_id_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObjectId) Reset()         { *m = ObjectId{} }
func (m *ObjectId) String() string { return proto.CompactTextString(m) }
func (*ObjectId) ProtoMessage()    {}
func (*ObjectId) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{9}
}

func (m *ObjectId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectId.Unmarshal(m, b)
}
func (m *ObjectId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectId.Marshal(b, m, deterministic)
}
func (m *ObjectId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectId.Merge(m, src)
}
func (m *ObjectId) XXX_Size() int {
	return xxx_messageInfo_ObjectId.Size(m)
}
func (m *ObjectId) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectId.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectId proto.InternalMessageInfo

func (m *ObjectId) GetObjectIdPath() []int32 {
	if m != nil {
		return m.ObjectIdPath
	}
	return nil
}

// An [X509Extension][google.cloud.security.privateca.v1alpha1.X509Extension] specifies an X.509 extension, which may be used in
// different parts of X.509 objects like certificates, CSRs, and CRLs.
type X509Extension struct {
	// Required. The OID for this X.509 extension.
	ObjectId *ObjectId `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Required. Indicates whether or not this extension is critical (i.e., if the client
	// does not know how to handle this extension, the client should consider this
	// to be an error).
	Critical bool `protobuf:"varint,2,opt,name=critical,proto3" json:"critical,omitempty"`
	// Required. The value of this X.509 extension.
	Value                []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *X509Extension) Reset()         { *m = X509Extension{} }
func (m *X509Extension) String() string { return proto.CompactTextString(m) }
func (*X509Extension) ProtoMessage()    {}
func (*X509Extension) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{10}
}

func (m *X509Extension) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_X509Extension.Unmarshal(m, b)
}
func (m *X509Extension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_X509Extension.Marshal(b, m, deterministic)
}
func (m *X509Extension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_X509Extension.Merge(m, src)
}
func (m *X509Extension) XXX_Size() int {
	return xxx_messageInfo_X509Extension.Size(m)
}
func (m *X509Extension) XXX_DiscardUnknown() {
	xxx_messageInfo_X509Extension.DiscardUnknown(m)
}

var xxx_messageInfo_X509Extension proto.InternalMessageInfo

func (m *X509Extension) GetObjectId() *ObjectId {
	if m != nil {
		return m.ObjectId
	}
	return nil
}

func (m *X509Extension) GetCritical() bool {
	if m != nil {
		return m.Critical
	}
	return false
}

func (m *X509Extension) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// A [KeyUsage][google.cloud.security.privateca.v1alpha1.KeyUsage] describes key usage values that may appear in an X.509
// certificate.
type KeyUsage struct {
	// Describes high-level ways in which a key may be used.
	BaseKeyUsage *KeyUsage_KeyUsageOptions `protobuf:"bytes,1,opt,name=base_key_usage,json=baseKeyUsage,proto3" json:"base_key_usage,omitempty"`
	// Detailed scenarios in which a key may be used.
	ExtendedKeyUsage *KeyUsage_ExtendedKeyUsageOptions `protobuf:"bytes,2,opt,name=extended_key_usage,json=extendedKeyUsage,proto3" json:"extended_key_usage,omitempty"`
	// Used to describe extended key usages that are not listed in the
	// [KeyUsage.ExtendedKeyUsageOptions][google.cloud.security.privateca.v1alpha1.KeyUsage.ExtendedKeyUsageOptions] message.
	UnknownExtendedKeyUsages []*ObjectId `protobuf:"bytes,3,rep,name=unknown_extended_key_usages,json=unknownExtendedKeyUsages,proto3" json:"unknown_extended_key_usages,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}    `json:"-"`
	XXX_unrecognized         []byte      `json:"-"`
	XXX_sizecache            int32       `json:"-"`
}

func (m *KeyUsage) Reset()         { *m = KeyUsage{} }
func (m *KeyUsage) String() string { return proto.CompactTextString(m) }
func (*KeyUsage) ProtoMessage()    {}
func (*KeyUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{11}
}

func (m *KeyUsage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyUsage.Unmarshal(m, b)
}
func (m *KeyUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyUsage.Marshal(b, m, deterministic)
}
func (m *KeyUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyUsage.Merge(m, src)
}
func (m *KeyUsage) XXX_Size() int {
	return xxx_messageInfo_KeyUsage.Size(m)
}
func (m *KeyUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyUsage.DiscardUnknown(m)
}

var xxx_messageInfo_KeyUsage proto.InternalMessageInfo

func (m *KeyUsage) GetBaseKeyUsage() *KeyUsage_KeyUsageOptions {
	if m != nil {
		return m.BaseKeyUsage
	}
	return nil
}

func (m *KeyUsage) GetExtendedKeyUsage() *KeyUsage_ExtendedKeyUsageOptions {
	if m != nil {
		return m.ExtendedKeyUsage
	}
	return nil
}

func (m *KeyUsage) GetUnknownExtendedKeyUsages() []*ObjectId {
	if m != nil {
		return m.UnknownExtendedKeyUsages
	}
	return nil
}

// [KeyUsage.KeyUsageOptions][google.cloud.security.privateca.v1alpha1.KeyUsage.KeyUsageOptions] corresponds to the key usage values
// described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
type KeyUsage_KeyUsageOptions struct {
	// The key may be used for digital signatures.
	DigitalSignature bool `protobuf:"varint,1,opt,name=digital_signature,json=digitalSignature,proto3" json:"digital_signature,omitempty"`
	// The key may be used for cryptographic commitments. Note that this may
	// also be referred to as "non-repudiation".
	ContentCommitment bool `protobuf:"varint,2,opt,name=content_commitment,json=contentCommitment,proto3" json:"content_commitment,omitempty"`
	// The key may be used to encipher other keys.
	KeyEncipherment bool `protobuf:"varint,3,opt,name=key_encipherment,json=keyEncipherment,proto3" json:"key_encipherment,omitempty"`
	// The key may be used to encipher data.
	DataEncipherment bool `protobuf:"varint,4,opt,name=data_encipherment,json=dataEncipherment,proto3" json:"data_encipherment,omitempty"`
	// The key may be used in a key agreement protocol.
	KeyAgreement bool `protobuf:"varint,5,opt,name=key_agreement,json=keyAgreement,proto3" json:"key_agreement,omitempty"`
	// The key may be used to sign certificates.
	CertSign bool `protobuf:"varint,6,opt,name=cert_sign,json=certSign,proto3" json:"cert_sign,omitempty"`
	// The key may be used sign certificate revocation lists.
	CrlSign bool `protobuf:"varint,7,opt,name=crl_sign,json=crlSign,proto3" json:"crl_sign,omitempty"`
	// The key may be used to encipher only.
	EncipherOnly bool `protobuf:"varint,8,opt,name=encipher_only,json=encipherOnly,proto3" json:"encipher_only,omitempty"`
	// The key may be used to decipher only.
	DecipherOnly         bool     `protobuf:"varint,9,opt,name=decipher_only,json=decipherOnly,proto3" json:"decipher_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyUsage_KeyUsageOptions) Reset()         { *m = KeyUsage_KeyUsageOptions{} }
func (m *KeyUsage_KeyUsageOptions) String() string { return proto.CompactTextString(m) }
func (*KeyUsage_KeyUsageOptions) ProtoMessage()    {}
func (*KeyUsage_KeyUsageOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{11, 0}
}

func (m *KeyUsage_KeyUsageOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyUsage_KeyUsageOptions.Unmarshal(m, b)
}
func (m *KeyUsage_KeyUsageOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyUsage_KeyUsageOptions.Marshal(b, m, deterministic)
}
func (m *KeyUsage_KeyUsageOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyUsage_KeyUsageOptions.Merge(m, src)
}
func (m *KeyUsage_KeyUsageOptions) XXX_Size() int {
	return xxx_messageInfo_KeyUsage_KeyUsageOptions.Size(m)
}
func (m *KeyUsage_KeyUsageOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyUsage_KeyUsageOptions.DiscardUnknown(m)
}

var xxx_messageInfo_KeyUsage_KeyUsageOptions proto.InternalMessageInfo

func (m *KeyUsage_KeyUsageOptions) GetDigitalSignature() bool {
	if m != nil {
		return m.DigitalSignature
	}
	return false
}

func (m *KeyUsage_KeyUsageOptions) GetContentCommitment() bool {
	if m != nil {
		return m.ContentCommitment
	}
	return false
}

func (m *KeyUsage_KeyUsageOptions) GetKeyEncipherment() bool {
	if m != nil {
		return m.KeyEncipherment
	}
	return false
}

func (m *KeyUsage_KeyUsageOptions) GetDataEncipherment() bool {
	if m != nil {
		return m.DataEncipherment
	}
	return false
}

func (m *KeyUsage_KeyUsageOptions) GetKeyAgreement() bool {
	if m != nil {
		return m.KeyAgreement
	}
	return false
}

func (m *KeyUsage_KeyUsageOptions) GetCertSign() bool {
	if m != nil {
		return m.CertSign
	}
	return false
}

func (m *KeyUsage_KeyUsageOptions) GetCrlSign() bool {
	if m != nil {
		return m.CrlSign
	}
	return false
}

func (m *KeyUsage_KeyUsageOptions) GetEncipherOnly() bool {
	if m != nil {
		return m.EncipherOnly
	}
	return false
}

func (m *KeyUsage_KeyUsageOptions) GetDecipherOnly() bool {
	if m != nil {
		return m.DecipherOnly
	}
	return false
}

// [KeyUsage.ExtendedKeyUsageOptions][google.cloud.security.privateca.v1alpha1.KeyUsage.ExtendedKeyUsageOptions] has fields that correspond to
// certain common OIDs that could be specified as an extended key usage value.
type KeyUsage_ExtendedKeyUsageOptions struct {
	// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW
	// server authentication", though regularly used for non-WWW TLS.
	ServerAuth bool `protobuf:"varint,1,opt,name=server_auth,json=serverAuth,proto3" json:"server_auth,omitempty"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW
	// client authentication", though regularly used for non-WWW TLS.
	ClientAuth bool `protobuf:"varint,2,opt,name=client_auth,json=clientAuth,proto3" json:"client_auth,omitempty"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of
	// downloadable executable code client authentication".
	CodeSigning bool `protobuf:"varint,3,opt,name=code_signing,json=codeSigning,proto3" json:"code_signing,omitempty"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email
	// protection".
	EmailProtection bool `protobuf:"varint,4,opt,name=email_protection,json=emailProtection,proto3" json:"email_protection,omitempty"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding
	// the hash of an object to a time".
	TimeStamping bool `protobuf:"varint,5,opt,name=time_stamping,json=timeStamping,proto3" json:"time_stamping,omitempty"`
	// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing
	// OCSP responses".
	OcspSigning          bool     `protobuf:"varint,6,opt,name=ocsp_signing,json=ocspSigning,proto3" json:"ocsp_signing,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyUsage_ExtendedKeyUsageOptions) Reset()         { *m = KeyUsage_ExtendedKeyUsageOptions{} }
func (m *KeyUsage_ExtendedKeyUsageOptions) String() string { return proto.CompactTextString(m) }
func (*KeyUsage_ExtendedKeyUsageOptions) ProtoMessage()    {}
func (*KeyUsage_ExtendedKeyUsageOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{11, 1}
}

func (m *KeyUsage_ExtendedKeyUsageOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyUsage_ExtendedKeyUsageOptions.Unmarshal(m, b)
}
func (m *KeyUsage_ExtendedKeyUsageOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyUsage_ExtendedKeyUsageOptions.Marshal(b, m, deterministic)
}
func (m *KeyUsage_ExtendedKeyUsageOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyUsage_ExtendedKeyUsageOptions.Merge(m, src)
}
func (m *KeyUsage_ExtendedKeyUsageOptions) XXX_Size() int {
	return xxx_messageInfo_KeyUsage_ExtendedKeyUsageOptions.Size(m)
}
func (m *KeyUsage_ExtendedKeyUsageOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyUsage_ExtendedKeyUsageOptions.DiscardUnknown(m)
}

var xxx_messageInfo_KeyUsage_ExtendedKeyUsageOptions proto.InternalMessageInfo

func (m *KeyUsage_ExtendedKeyUsageOptions) GetServerAuth() bool {
	if m != nil {
		return m.ServerAuth
	}
	return false
}

func (m *KeyUsage_ExtendedKeyUsageOptions) GetClientAuth() bool {
	if m != nil {
		return m.ClientAuth
	}
	return false
}

func (m *KeyUsage_ExtendedKeyUsageOptions) GetCodeSigning() bool {
	if m != nil {
		return m.CodeSigning
	}
	return false
}

func (m *KeyUsage_ExtendedKeyUsageOptions) GetEmailProtection() bool {
	if m != nil {
		return m.EmailProtection
	}
	return false
}

func (m *KeyUsage_ExtendedKeyUsageOptions) GetTimeStamping() bool {
	if m != nil {
		return m.TimeStamping
	}
	return false
}

func (m *KeyUsage_ExtendedKeyUsageOptions) GetOcspSigning() bool {
	if m != nil {
		return m.OcspSigning
	}
	return false
}

// [Subject][google.cloud.security.privateca.v1alpha1.Subject] describes parts of a distinguished name that, in turn,
// describes the subject of the certificate.
type Subject struct {
	// The country code of the subject.
	CountryCode string `protobuf:"bytes,1,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	// The organization of the subject.
	Organization string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
	// The organizational_unit of the subject.
	OrganizationalUnit string `protobuf:"bytes,3,opt,name=organizational_unit,json=organizationalUnit,proto3" json:"organizational_unit,omitempty"`
	// The locality or city of the subject.
	Locality string `protobuf:"bytes,4,opt,name=locality,proto3" json:"locality,omitempty"`
	// The province, territory, or regional state of the subject.
	Province string `protobuf:"bytes,5,opt,name=province,proto3" json:"province,omitempty"`
	// The street address of the subject.
	StreetAddress string `protobuf:"bytes,6,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`
	// The postal code of the subject.
	PostalCode           string   `protobuf:"bytes,7,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subject) Reset()         { *m = Subject{} }
func (m *Subject) String() string { return proto.CompactTextString(m) }
func (*Subject) ProtoMessage()    {}
func (*Subject) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{12}
}

func (m *Subject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subject.Unmarshal(m, b)
}
func (m *Subject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subject.Marshal(b, m, deterministic)
}
func (m *Subject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subject.Merge(m, src)
}
func (m *Subject) XXX_Size() int {
	return xxx_messageInfo_Subject.Size(m)
}
func (m *Subject) XXX_DiscardUnknown() {
	xxx_messageInfo_Subject.DiscardUnknown(m)
}

var xxx_messageInfo_Subject proto.InternalMessageInfo

func (m *Subject) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *Subject) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *Subject) GetOrganizationalUnit() string {
	if m != nil {
		return m.OrganizationalUnit
	}
	return ""
}

func (m *Subject) GetLocality() string {
	if m != nil {
		return m.Locality
	}
	return ""
}

func (m *Subject) GetProvince() string {
	if m != nil {
		return m.Province
	}
	return ""
}

func (m *Subject) GetStreetAddress() string {
	if m != nil {
		return m.StreetAddress
	}
	return ""
}

func (m *Subject) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

// [SubjectAltNames][google.cloud.security.privateca.v1alpha1.SubjectAltNames] corresponds to a more modern way of listing what
// the asserted identity is in a certificate (i.e., compared to the "common
// name" in the distinguished name).
type SubjectAltNames struct {
	// Contains only valid, fully-qualified host names.
	DnsNames []string `protobuf:"bytes,1,rep,name=dns_names,json=dnsNames,proto3" json:"dns_names,omitempty"`
	// Contains only valid RFC 3986 URIs.
	Uris []string `protobuf:"bytes,2,rep,name=uris,proto3" json:"uris,omitempty"`
	// Contains only valid RFC 2822 E-mail addresses.
	EmailAddresses []string `protobuf:"bytes,3,rep,name=email_addresses,json=emailAddresses,proto3" json:"email_addresses,omitempty"`
	// Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
	IpAddresses []string `protobuf:"bytes,4,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	// Contains additional subject alternative name values.
	CustomSans           []*X509Extension `protobuf:"bytes,5,rep,name=custom_sans,json=customSans,proto3" json:"custom_sans,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SubjectAltNames) Reset()         { *m = SubjectAltNames{} }
func (m *SubjectAltNames) String() string { return proto.CompactTextString(m) }
func (*SubjectAltNames) ProtoMessage()    {}
func (*SubjectAltNames) Descriptor() ([]byte, []int) {
	return fileDescriptor_6299e860b09b0827, []int{13}
}

func (m *SubjectAltNames) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubjectAltNames.Unmarshal(m, b)
}
func (m *SubjectAltNames) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubjectAltNames.Marshal(b, m, deterministic)
}
func (m *SubjectAltNames) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubjectAltNames.Merge(m, src)
}
func (m *SubjectAltNames) XXX_Size() int {
	return xxx_messageInfo_SubjectAltNames.Size(m)
}
func (m *SubjectAltNames) XXX_DiscardUnknown() {
	xxx_messageInfo_SubjectAltNames.DiscardUnknown(m)
}

var xxx_messageInfo_SubjectAltNames proto.InternalMessageInfo

func (m *SubjectAltNames) GetDnsNames() []string {
	if m != nil {
		return m.DnsNames
	}
	return nil
}

func (m *SubjectAltNames) GetUris() []string {
	if m != nil {
		return m.Uris
	}
	return nil
}

func (m *SubjectAltNames) GetEmailAddresses() []string {
	if m != nil {
		return m.EmailAddresses
	}
	return nil
}

func (m *SubjectAltNames) GetIpAddresses() []string {
	if m != nil {
		return m.IpAddresses
	}
	return nil
}

func (m *SubjectAltNames) GetCustomSans() []*X509Extension {
	if m != nil {
		return m.CustomSans
	}
	return nil
}

func init() {
	proto.RegisterEnum("google.cloud.security.privateca.v1alpha1.RevocationReason", RevocationReason_name, RevocationReason_value)
	proto.RegisterEnum("google.cloud.security.privateca.v1alpha1.CertificateAuthority_Type", CertificateAuthority_Type_name, CertificateAuthority_Type_value)
	proto.RegisterEnum("google.cloud.security.privateca.v1alpha1.CertificateAuthority_State", CertificateAuthority_State_name, CertificateAuthority_State_value)
	proto.RegisterEnum("google.cloud.security.privateca.v1alpha1.CertificateRevocationList_State", CertificateRevocationList_State_name, CertificateRevocationList_State_value)
	proto.RegisterEnum("google.cloud.security.privateca.v1alpha1.PublicKey_KeyType", PublicKey_KeyType_name, PublicKey_KeyType_value)
	proto.RegisterType((*CertificateAuthority)(nil), "google.cloud.security.privateca.v1alpha1.CertificateAuthority")
	proto.RegisterMapType((map[string]string)(nil), "google.cloud.security.privateca.v1alpha1.CertificateAuthority.LabelsEntry")
	proto.RegisterType((*CertificateAuthority_IssuingOptions)(nil), "google.cloud.security.privateca.v1alpha1.CertificateAuthority.IssuingOptions")
	proto.RegisterType((*CertificateAuthority_CertificateAuthorityPolicy)(nil), "google.cloud.security.privateca.v1alpha1.CertificateAuthority.CertificateAuthorityPolicy")
	proto.RegisterType((*CertificateAuthority_CertificateAuthorityPolicy_AllowedConfigList)(nil), "google.cloud.security.privateca.v1alpha1.CertificateAuthority.CertificateAuthorityPolicy.AllowedConfigList")
	proto.RegisterType((*CertificateAuthority_CertificateAuthorityPolicy_AllowedSubjectAltNames)(nil), "google.cloud.security.privateca.v1alpha1.CertificateAuthority.CertificateAuthorityPolicy.AllowedSubjectAltNames")
	proto.RegisterType((*CertificateAuthority_AccessUrls)(nil), "google.cloud.security.privateca.v1alpha1.CertificateAuthority.AccessUrls")
	proto.RegisterType((*CertificateRevocationList)(nil), "google.cloud.security.privateca.v1alpha1.CertificateRevocationList")
	proto.RegisterMapType((map[string]string)(nil), "google.cloud.security.privateca.v1alpha1.CertificateRevocationList.LabelsEntry")
	proto.RegisterType((*CertificateRevocationList_RevokedCertificate)(nil), "google.cloud.security.privateca.v1alpha1.CertificateRevocationList.RevokedCertificate")
	proto.RegisterType((*Certificate)(nil), "google.cloud.security.privateca.v1alpha1.Certificate")
	proto.RegisterMapType((map[string]string)(nil), "google.cloud.security.privateca.v1alpha1.Certificate.LabelsEntry")
	proto.RegisterType((*Certificate_RevocationDetails)(nil), "google.cloud.security.privateca.v1alpha1.Certificate.RevocationDetails")
	proto.RegisterType((*ReusableConfig)(nil), "google.cloud.security.privateca.v1alpha1.ReusableConfig")
	proto.RegisterMapType((map[string]string)(nil), "google.cloud.security.privateca.v1alpha1.ReusableConfig.LabelsEntry")
	proto.RegisterType((*ReusableConfigValues)(nil), "google.cloud.security.privateca.v1alpha1.ReusableConfigValues")
	proto.RegisterType((*ReusableConfigValues_CaOptions)(nil), "google.cloud.security.privateca.v1alpha1.ReusableConfigValues.CaOptions")
	proto.RegisterType((*ReusableConfigValues_AuthorityInformationAccess)(nil), "google.cloud.security.privateca.v1alpha1.ReusableConfigValues.AuthorityInformationAccess")
	proto.RegisterType((*ReusableConfigWrapper)(nil), "google.cloud.security.privateca.v1alpha1.ReusableConfigWrapper")
	proto.RegisterType((*PublicKey)(nil), "google.cloud.security.privateca.v1alpha1.PublicKey")
	proto.RegisterType((*CertificateConfig)(nil), "google.cloud.security.privateca.v1alpha1.CertificateConfig")
	proto.RegisterType((*CertificateConfig_SubjectConfig)(nil), "google.cloud.security.privateca.v1alpha1.CertificateConfig.SubjectConfig")
	proto.RegisterType((*CertificateDescription)(nil), "google.cloud.security.privateca.v1alpha1.CertificateDescription")
	proto.RegisterType((*CertificateDescription_SubjectDescription)(nil), "google.cloud.security.privateca.v1alpha1.CertificateDescription.SubjectDescription")
	proto.RegisterType((*CertificateDescription_KeyId)(nil), "google.cloud.security.privateca.v1alpha1.CertificateDescription.KeyId")
	proto.RegisterType((*ObjectId)(nil), "google.cloud.security.privateca.v1alpha1.ObjectId")
	proto.RegisterType((*X509Extension)(nil), "google.cloud.security.privateca.v1alpha1.X509Extension")
	proto.RegisterType((*KeyUsage)(nil), "google.cloud.security.privateca.v1alpha1.KeyUsage")
	proto.RegisterType((*KeyUsage_KeyUsageOptions)(nil), "google.cloud.security.privateca.v1alpha1.KeyUsage.KeyUsageOptions")
	proto.RegisterType((*KeyUsage_ExtendedKeyUsageOptions)(nil), "google.cloud.security.privateca.v1alpha1.KeyUsage.ExtendedKeyUsageOptions")
	proto.RegisterType((*Subject)(nil), "google.cloud.security.privateca.v1alpha1.Subject")
	proto.RegisterType((*SubjectAltNames)(nil), "google.cloud.security.privateca.v1alpha1.SubjectAltNames")
}

func init() {
	proto.RegisterFile("google/cloud/security/privateca/v1alpha1/resources.proto", fileDescriptor_6299e860b09b0827)
}

var fileDescriptor_6299e860b09b0827 = []byte{
	// 3486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0x4d, 0x70, 0x1b, 0x47,
	0x76, 0xd6, 0x80, 0x04, 0x09, 0x3c, 0x80, 0x20, 0xd8, 0xfc, 0x03, 0x21, 0x45, 0xa2, 0x20, 0x39,
	0x96, 0x1d, 0x1b, 0x88, 0xe8, 0x28, 0xb6, 0xe4, 0x8a, 0x6d, 0x10, 0x18, 0x89, 0x30, 0x29, 0x12,
	0x19, 0x80, 0x94, 0xe5, 0xa4, 0x32, 0xd5, 0x9c, 0x69, 0x82, 0x13, 0x0e, 0x66, 0xa0, 0xe9, 0x01,
	0x45, 0x44, 0x25, 0x57, 0xa5, 0x9c, 0x94, 0x0f, 0x29, 0x27, 0x39, 0x3a, 0x87, 0x54, 0x25, 0x39,
	0xe4, 0x90, 0xaa, 0x54, 0xe5, 0x96, 0xdb, 0xee, 0xc5, 0xe5, 0xda, 0xf2, 0x69, 0x2f, 0x7b, 0xd8,
	0x9b, 0x8f, 0x5b, 0xaa, 0xbd, 0xec, 0x6d, 0x8f, 0x5b, 0xfd, 0x33, 0x83, 0x01, 0x48, 0x96, 0x48,
	0x82, 0xba, 0x61, 0x5e, 0xbf, 0x7e, 0xef, 0xf5, 0xeb, 0xd7, 0x5f, 0xbf, 0xf7, 0x1a, 0xf0, 0x51,
	0xcb, 0x75, 0x5b, 0x36, 0x29, 0x19, 0xb6, 0xdb, 0x35, 0x4b, 0x94, 0x18, 0x5d, 0xcf, 0xf2, 0x7b,
	0xa5, 0x8e, 0x67, 0x1d, 0x62, 0x9f, 0x18, 0xb8, 0x74, 0x78, 0x17, 0xdb, 0x9d, 0x7d, 0x7c, 0xb7,
	0xe4, 0x11, 0xea, 0x76, 0x3d, 0x83, 0xd0, 0x62, 0xc7, 0x73, 0x7d, 0x17, 0xdd, 0x11, 0x33, 0x8b,
	0x7c, 0x66, 0x31, 0x98, 0x59, 0x0c, 0x67, 0x16, 0x83, 0x99, 0xf9, 0x1b, 0x52, 0x07, 0xee, 0x58,
	0xa5, 0x3d, 0x8b, 0xd8, 0xa6, 0xbe, 0x4b, 0xf6, 0xf1, 0xa1, 0xe5, 0x7a, 0x42, 0x54, 0x7e, 0x29,
	0xc2, 0x10, 0xa8, 0x91, 0x43, 0xd7, 0xe5, 0x10, 0xff, 0xda, 0xed, 0xee, 0x95, 0xcc, 0xae, 0x87,
	0x7d, 0xcb, 0x75, 0xe4, 0xf8, 0x8d, 0xe1, 0x71, 0xdf, 0x6a, 0x13, 0xea, 0xe3, 0x76, 0xe7, 0x34,
	0x01, 0xcf, 0x3d, 0xdc, 0xe9, 0x10, 0x4f, 0x2e, 0x23, 0x7f, 0x2d, 0xa2, 0x1b, 0x3b, 0x8e, 0xeb,
	0x73, 0xe9, 0x72, 0xb4, 0xf0, 0xaf, 0x4b, 0x30, 0x57, 0x21, 0x9e, 0x6f, 0xed, 0x59, 0x06, 0xf6,
	0x49, 0xb9, 0xeb, 0xef, 0xbb, 0x6c, 0x99, 0x68, 0x11, 0xc6, 0x1d, 0xdc, 0x26, 0x39, 0x65, 0x59,
	0xb9, 0x93, 0x5c, 0x1d, 0xfb, 0xa9, 0x3c, 0xa6, 0x71, 0x02, 0xfa, 0x6b, 0x18, 0xf7, 0x7b, 0x1d,
	0x92, 0x8b, 0x2d, 0x2b, 0x77, 0x32, 0x2b, 0x95, 0xe2, 0x59, 0xbd, 0x54, 0x3c, 0x49, 0x4d, 0xb1,
	0xd9, 0xeb, 0x10, 0x26, 0x3d, 0xae, 0x71, 0xa9, 0xe8, 0x0b, 0x98, 0x30, 0x5c, 0x67, 0xcf, 0x6a,
	0xe5, 0xc6, 0x96, 0x95, 0x3b, 0xa9, 0x95, 0x8f, 0x2f, 0x24, 0xbf, 0xc2, 0x45, 0x08, 0xb9, 0x52,
	0x1e, 0x7a, 0x00, 0x09, 0xdb, 0xda, 0x23, 0xcc, 0x7d, 0xb9, 0x71, 0x2e, 0x7b, 0x29, 0x90, 0x1d,
	0xb8, 0xae, 0x58, 0x95, 0xbe, 0x67, 0x33, 0x63, 0x5a, 0xc8, 0x8f, 0xee, 0xc3, 0x3c, 0xd7, 0xaf,
	0x1f, 0xb4, 0xa9, 0x7e, 0x40, 0x7a, 0xfa, 0x21, 0xf1, 0xa8, 0xe5, 0x3a, 0xb9, 0x38, 0xf7, 0xce,
	0xc4, 0x4f, 0xe5, 0x38, 0x9b, 0x80, 0x38, 0xd3, 0x7a, 0x9b, 0xae, 0x93, 0xde, 0x8e, 0xe0, 0x40,
	0xdf, 0x2a, 0x80, 0x8c, 0xbe, 0x65, 0x7a, 0xc7, 0xb5, 0x2d, 0xa3, 0x97, 0x9b, 0xe0, 0x16, 0x3c,
	0x1d, 0xd1, 0x7b, 0x27, 0x11, 0xeb, 0x5c, 0x01, 0x5b, 0x81, 0xa2, 0xcd, 0x44, 0x34, 0x0b, 0x3a,
	0x7a, 0x01, 0xd3, 0x16, 0xa5, 0x5d, 0xcb, 0x69, 0xe9, 0x6e, 0x87, 0x47, 0x42, 0x6e, 0x92, 0xdb,
	0xf2, 0x78, 0x44, 0x5b, 0x6a, 0x42, 0xea, 0x96, 0x10, 0x2a, 0xf4, 0x67, 0xac, 0x01, 0x22, 0xfa,
	0x73, 0x98, 0xef, 0x90, 0xb6, 0xce, 0xa8, 0xc4, 0xd3, 0x99, 0x71, 0xba, 0xb1, 0x8f, 0x2d, 0x27,
	0x97, 0x58, 0x1e, 0x13, 0x51, 0xa6, 0x68, 0xa8, 0x43, 0xda, 0x35, 0xce, 0xc0, 0xd4, 0x54, 0xd8,
	0x30, 0xd2, 0x21, 0x4e, 0x7d, 0xec, 0x93, 0x5c, 0x92, 0x07, 0x5d, 0x75, 0x44, 0x53, 0x1b, 0x4c,
	0x96, 0x88, 0x69, 0x21, 0x17, 0x5d, 0x87, 0x04, 0x33, 0x8c, 0x59, 0x94, 0x83, 0x7e, 0xc4, 0x4f,
	0x76, 0x48, 0x9b, 0x49, 0x40, 0x5f, 0x2b, 0x90, 0x37, 0xb0, 0x1e, 0xdd, 0x48, 0x93, 0x50, 0xc3,
	0xb3, 0xf8, 0xc2, 0x72, 0x29, 0xee, 0xc1, 0xcf, 0x2e, 0x64, 0x56, 0xb5, 0x2f, 0x47, 0x28, 0xcd,
	0x19, 0xf8, 0xe4, 0x61, 0xf4, 0x16, 0x40, 0xcb, 0xa0, 0xfa, 0x6e, 0xd7, 0x38, 0x20, 0x7e, 0x2e,
	0x3d, 0x10, 0x7b, 0xc9, 0x96, 0x41, 0x57, 0xf9, 0x00, 0x72, 0x21, 0x85, 0x0d, 0x83, 0x50, 0xaa,
	0x77, 0x3d, 0x9b, 0xe6, 0xa6, 0xb8, 0x71, 0xb5, 0x11, 0x7d, 0x56, 0xe6, 0x12, 0xb7, 0x3d, 0x9b,
	0x0a, 0x2b, 0x01, 0x87, 0x04, 0xf4, 0x19, 0xa4, 0x0c, 0x8f, 0x30, 0xa7, 0xf0, 0xd3, 0x95, 0xe1,
	0x0a, 0xf3, 0xc7, 0x4e, 0x57, 0x33, 0x40, 0x2e, 0x29, 0x41, 0xcc, 0x61, 0x54, 0x26, 0xa1, 0xdb,
	0x31, 0x43, 0x09, 0xd3, 0x67, 0x94, 0x20, 0xe6, 0x70, 0x09, 0x55, 0x98, 0x32, 0x89, 0x4d, 0x98,
	0x9f, 0x84, 0x8c, 0x99, 0xb3, 0xc9, 0x48, 0x07, 0xb3, 0xb8, 0x94, 0x16, 0x4c, 0xd8, 0x78, 0x97,
	0xd8, 0x34, 0x97, 0x5d, 0x1e, 0xbb, 0x93, 0x5a, 0xf9, 0x7c, 0x44, 0xaf, 0x6d, 0x70, 0x61, 0xaa,
	0xe3, 0x7b, 0xf2, 0x44, 0x4a, 0xf1, 0xf9, 0xaf, 0x20, 0x33, 0x78, 0x60, 0xd0, 0x0a, 0xcc, 0x5a,
	0x8e, 0x61, 0x77, 0x4d, 0xa2, 0xcb, 0x48, 0x63, 0xdb, 0xc7, 0xf1, 0x37, 0x21, 0xf0, 0x28, 0x2b,
	0xc7, 0x2b, 0x3c, 0x3e, 0xb6, 0x3d, 0x1b, 0x7d, 0x04, 0x0b, 0xe1, 0x1c, 0xcf, 0xd6, 0xfb, 0xbb,
	0xce, 0xd1, 0x59, 0x4e, 0x0b, 0xc4, 0x56, 0x3c, 0x3b, 0xdc, 0xc4, 0xfc, 0xff, 0x27, 0x21, 0x7f,
	0x3a, 0x7a, 0xa0, 0xff, 0x52, 0x60, 0x16, 0xdb, 0xb6, 0xfb, 0x9c, 0x98, 0xba, 0xc0, 0x4f, 0xdd,
	0xb6, 0xa8, 0xcf, 0xf1, 0x2e, 0xb5, 0x72, 0xf0, 0xc6, 0x60, 0xab, 0x58, 0x16, 0x4a, 0x05, 0x80,
	0x6f, 0x58, 0xd4, 0xe7, 0x6e, 0x5b, 0xbb, 0xa2, 0xcd, 0xe0, 0xe1, 0x11, 0xf4, 0x15, 0x2c, 0xba,
	0x87, 0xc4, 0x7b, 0xee, 0x59, 0x3e, 0x09, 0xac, 0x3c, 0xc4, 0x76, 0x97, 0x50, 0x09, 0xaf, 0x9f,
	0x9e, 0xdd, 0x4e, 0x8d, 0x74, 0x29, 0xde, 0xb5, 0xe5, 0xcd, 0xf1, 0x44, 0x5c, 0xa1, 0x81, 0xee,
	0xf9, 0x50, 0x8d, 0x18, 0xde, 0xe1, 0x4a, 0xd0, 0x3f, 0x2a, 0x70, 0x2b, 0x70, 0x92, 0xed, 0x1a,
	0xe2, 0x5e, 0xd5, 0xb1, 0x63, 0xea, 0xae, 0xd7, 0xc2, 0x8e, 0xf5, 0x77, 0x82, 0x92, 0x8b, 0xf1,
	0x50, 0xba, 0x7b, 0x76, 0x63, 0x1a, 0xdd, 0xdd, 0xbf, 0x25, 0x86, 0x58, 0xba, 0xb6, 0x2c, 0x55,
	0x6c, 0x04, 0x1a, 0xca, 0x8e, 0xb9, 0x15, 0x95, 0x8f, 0xee, 0xc1, 0x5c, 0x7f, 0xaf, 0xda, 0x6d,
	0xd7, 0xd1, 0xd9, 0x45, 0xcd, 0x70, 0xbd, 0x0f, 0xaa, 0xa1, 0xf7, 0xd8, 0xf8, 0x26, 0x1b, 0x46,
	0xdf, 0x29, 0x90, 0x0e, 0xe6, 0x51, 0xec, 0xd0, 0x5c, 0x82, 0x3b, 0xad, 0xf3, 0xc6, 0x37, 0x57,
	0x2e, 0xaf, 0x6c, 0xfb, 0xdc, 0x10, 0x61, 0x61, 0x4a, 0x9a, 0xd2, 0xc0, 0x0e, 0x45, 0x35, 0xc8,
	0xb6, 0xf1, 0x91, 0xd5, 0xee, 0xb6, 0xf5, 0x73, 0xdd, 0xd9, 0x8a, 0x36, 0x2d, 0xe7, 0x6d, 0xc8,
	0x69, 0xf9, 0x6f, 0x15, 0x98, 0x39, 0x16, 0x54, 0xe8, 0x08, 0xe6, 0x87, 0xc2, 0x5b, 0x06, 0x8e,
	0xc2, 0xf7, 0xea, 0x32, 0x02, 0x27, 0xa6, 0xcd, 0x0e, 0x84, 0xac, 0x08, 0x9a, 0xfc, 0xff, 0xc6,
	0x60, 0xe1, 0x64, 0x3f, 0xa0, 0x77, 0x21, 0x08, 0x72, 0xdd, 0x74, 0xa8, 0xdc, 0x44, 0x66, 0x50,
	0x52, 0x9b, 0x96, 0x03, 0x55, 0x87, 0x0a, 0xde, 0x9b, 0xfd, 0xbd, 0xeb, 0x7a, 0x96, 0x88, 0xb1,
	0x64, 0xe8, 0xc4, 0x6d, 0xcf, 0x62, 0x97, 0xed, 0x62, 0xc0, 0x42, 0xda, 0xd8, 0xb2, 0x75, 0x6c,
	0x9a, 0x1e, 0xa1, 0x94, 0xd0, 0xdc, 0x18, 0xe7, 0x0e, 0x5c, 0xa0, 0xb2, 0xd1, 0x72, 0x30, 0x88,
	0x6e, 0x40, 0x20, 0x46, 0xb7, 0x3a, 0x34, 0x37, 0xce, 0x79, 0x41, 0x92, 0x6a, 0x1d, 0x8a, 0x3e,
	0x85, 0x6b, 0xfc, 0x4b, 0x6f, 0xd9, 0xee, 0xee, 0x2e, 0xcb, 0x24, 0x98, 0xb9, 0xcf, 0x2d, 0xdb,
	0x34, 0xb0, 0x67, 0x52, 0x0e, 0x12, 0x09, 0x6d, 0x89, 0xf3, 0x3c, 0x92, 0x2c, 0x55, 0x87, 0x3e,
	0x09, 0x18, 0xc2, 0x85, 0xea, 0x46, 0x97, 0xfa, 0x6e, 0x5b, 0x44, 0xdf, 0x04, 0x9f, 0x25, 0x16,
	0x5a, 0xe1, 0x74, 0x16, 0x0a, 0xab, 0xd3, 0x30, 0x25, 0x77, 0x48, 0x64, 0x4e, 0xf9, 0x36, 0x40,
	0xff, 0x2e, 0x42, 0xf7, 0x61, 0x69, 0xe8, 0x5e, 0x8e, 0x80, 0x20, 0xcf, 0x5d, 0xb5, 0x85, 0x81,
	0xfb, 0x34, 0x9c, 0x8b, 0x6e, 0x43, 0xe6, 0x04, 0xd0, 0x4c, 0x6a, 0x69, 0x23, 0x0a, 0x94, 0xf7,
	0x21, 0x15, 0x01, 0x71, 0x94, 0x85, 0xb1, 0x03, 0xd2, 0x93, 0x92, 0xd9, 0x4f, 0x34, 0x07, 0x71,
	0x1e, 0x3b, 0x72, 0xb6, 0xf8, 0x78, 0x10, 0xfb, 0x48, 0x29, 0x7c, 0x02, 0xe3, 0x2c, 0xbd, 0x45,
	0x73, 0x90, 0x6d, 0x3e, 0xad, 0xab, 0xfa, 0xf6, 0x66, 0xa3, 0xae, 0x56, 0x6a, 0x0f, 0x6b, 0x6a,
	0x35, 0x7b, 0x05, 0x4d, 0x43, 0xaa, 0xa1, 0x6e, 0x3c, 0xd4, 0x1b, 0xb5, 0x47, 0x9b, 0x6a, 0x35,
	0xab, 0x70, 0xc2, 0xf6, 0xea, 0x96, 0x56, 0xad, 0x6d, 0x96, 0x9b, 0x6a, 0x36, 0x56, 0x68, 0x41,
	0x9c, 0x67, 0x2a, 0x68, 0x1e, 0x66, 0x1a, 0xcd, 0x72, 0x73, 0x58, 0x42, 0x0a, 0x26, 0xd5, 0xcd,
	0xf2, 0xea, 0x06, 0x9f, 0x9d, 0x86, 0x44, 0xb5, 0xd6, 0x10, 0x5f, 0x31, 0xb4, 0x00, 0xa8, 0xae,
	0x6e, 0x56, 0x6b, 0x9b, 0x8f, 0xf4, 0x72, 0xa5, 0x59, 0xdb, 0x29, 0x37, 0x6b, 0x5b, 0x9b, 0xd9,
	0x31, 0x66, 0x4a, 0x40, 0xaf, 0xaa, 0x1b, 0x2a, 0xa7, 0x8e, 0x3f, 0xf8, 0x27, 0xe5, 0x55, 0xf9,
	0x1b, 0x05, 0xde, 0xef, 0x87, 0xb7, 0x08, 0x7f, 0xdc, 0xb1, 0x68, 0xd1, 0x70, 0xdb, 0xa5, 0x13,
	0x2b, 0x84, 0x9d, 0x8e, 0xe7, 0xb2, 0xf8, 0xa5, 0xa5, 0x17, 0xf2, 0xd7, 0xcb, 0x52, 0x08, 0x83,
	0xa5, 0x17, 0xc1, 0xcf, 0x97, 0x25, 0xe3, 0xf8, 0x6c, 0x8b, 0xd0, 0xd2, 0x8b, 0x81, 0x5d, 0x0b,
	0xc4, 0xbe, 0x2c, 0x7c, 0x97, 0x84, 0xa5, 0x88, 0x42, 0x8d, 0x1c, 0x4a, 0x49, 0xfc, 0xe4, 0x9e,
	0x5a, 0x97, 0xbc, 0x07, 0xd3, 0x94, 0x3c, 0xeb, 0x12, 0xc7, 0x20, 0xba, 0xd3, 0x6d, 0xef, 0x12,
	0x8f, 0xef, 0xc8, 0x98, 0xe0, 0xc9, 0x04, 0x63, 0x9b, 0x7c, 0x08, 0xfd, 0xb3, 0x02, 0x73, 0x1e,
	0x39, 0x74, 0x0f, 0x18, 0x02, 0xf4, 0x95, 0x89, 0xa3, 0x91, 0x5a, 0xd9, 0xb9, 0x10, 0x08, 0x0e,
	0x9a, 0x5a, 0xd4, 0x84, 0xfc, 0x08, 0x83, 0xb0, 0x65, 0xd6, 0x3b, 0x36, 0x40, 0xd1, 0x35, 0x98,
	0xe4, 0x19, 0xa8, 0x67, 0x73, 0xa4, 0x93, 0x4b, 0x9b, 0x60, 0x09, 0xa8, 0x67, 0xa3, 0x02, 0x40,
	0x24, 0x4e, 0xe3, 0x7d, 0x86, 0x64, 0x98, 0x86, 0x21, 0x33, 0x48, 0x92, 0x27, 0x78, 0x92, 0x5c,
	0xbb, 0x8c, 0x25, 0x1c, 0xcf, 0x94, 0x87, 0x72, 0xbd, 0xc9, 0x91, 0x73, 0xbd, 0xc4, 0xf9, 0x73,
	0x3d, 0x3b, 0xcc, 0xd2, 0x92, 0x7c, 0xb7, 0xb6, 0x2e, 0x63, 0xa9, 0xa7, 0xa6, 0x6a, 0xdf, 0x2b,
	0x80, 0x8e, 0x6f, 0x25, 0x5a, 0x86, 0x54, 0x24, 0x70, 0x24, 0x22, 0x44, 0x49, 0xe8, 0x16, 0x4c,
	0x51, 0xe2, 0x59, 0xd8, 0x8e, 0xc6, 0x63, 0x52, 0x4b, 0x0b, 0xa2, 0x0c, 0xc4, 0x16, 0xcc, 0x78,
	0xa1, 0x21, 0xba, 0x47, 0x30, 0x75, 0x1d, 0x5e, 0xfb, 0x66, 0x56, 0x1e, 0x9c, 0xe7, 0x16, 0x0a,
	0x44, 0x68, 0x5c, 0x82, 0x96, 0xf5, 0x86, 0x28, 0xa3, 0x00, 0xd9, 0x83, 0xd7, 0x00, 0x11, 0xc0,
	0x04, 0x47, 0x19, 0x35, 0xab, 0xa0, 0x0c, 0x40, 0x63, 0xbb, 0xae, 0x6a, 0x0d, 0xb5, 0xca, 0x90,
	0xe8, 0xc1, 0x8f, 0xca, 0xab, 0xf2, 0x0f, 0x0a, 0xac, 0x9c, 0x05, 0x5b, 0x86, 0x8e, 0xfa, 0xbf,
	0x28, 0x6f, 0x06, 0x61, 0xa2, 0xec, 0x83, 0x2a, 0x87, 0xa6, 0x44, 0x36, 0x86, 0x65, 0xbf, 0x2f,
	0x0b, 0xbf, 0x4e, 0x42, 0x2a, 0x1a, 0x03, 0xa7, 0x82, 0xd1, 0x75, 0x79, 0x9a, 0xa9, 0xdc, 0x74,
	0xde, 0x8a, 0x58, 0xbb, 0x22, 0xce, 0x33, 0xf5, 0xd0, 0x97, 0x97, 0xdd, 0xe6, 0x60, 0xb2, 0x2f,
	0xa1, 0xd1, 0xf1, 0x02, 0x50, 0x64, 0xd1, 0x26, 0xf1, 0xb1, 0x65, 0x53, 0x99, 0xf5, 0x3f, 0xba,
	0x90, 0x8d, 0x91, 0xd0, 0xac, 0x0a, 0x71, 0xc2, 0x4f, 0x91, 0xa8, 0x97, 0x74, 0x86, 0xe0, 0x41,
	0x11, 0x1e, 0x9c, 0xaa, 0x89, 0xbe, 0x63, 0x33, 0xb2, 0x16, 0x0f, 0x7c, 0xff, 0x15, 0x2c, 0x9e,
	0x56, 0x8e, 0x4f, 0x5e, 0x66, 0x39, 0xbe, 0x60, 0x9c, 0x5c, 0x8c, 0x7f, 0x28, 0x7a, 0x19, 0x51,
	0x1b, 0x86, 0x7a, 0x19, 0x63, 0xda, 0xec, 0xa0, 0xcd, 0xa2, 0x99, 0x31, 0x84, 0xa0, 0xc9, 0x91,
	0x11, 0x14, 0xce, 0x8f, 0xa0, 0x7f, 0x13, 0x22, 0x68, 0x8a, 0x23, 0x68, 0xf9, 0x62, 0x7b, 0x7b,
	0x2a, 0x66, 0xfe, 0x5c, 0x81, 0x99, 0x63, 0x1b, 0x8f, 0x08, 0x44, 0x60, 0x49, 0x17, 0x97, 0x95,
	0x32, 0x32, 0xd4, 0x4d, 0xf7, 0x65, 0x0a, 0x94, 0xaa, 0x40, 0x84, 0x24, 0x5c, 0x14, 0x7b, 0x9d,
	0x8b, 0xb4, 0x4c, 0x7f, 0x0a, 0x23, 0x8e, 0x00, 0x97, 0x0f, 0xfe, 0x5d, 0x79, 0x55, 0xfe, 0x37,
	0x05, 0x6e, 0x9f, 0x05, 0xf2, 0xd0, 0xb3, 0x37, 0x8f, 0x71, 0x83, 0x4c, 0x2f, 0x57, 0xe7, 0x06,
	0x3b, 0x92, 0x02, 0x36, 0x0a, 0xbf, 0x18, 0x87, 0xcc, 0x60, 0x31, 0x73, 0x3a, 0xbc, 0xfd, 0x15,
	0x4c, 0xc8, 0x7a, 0x49, 0x38, 0xf6, 0x93, 0x8b, 0xd6, 0x4b, 0xa2, 0x28, 0x12, 0x28, 0x24, 0x45,
	0xa2, 0xb7, 0x20, 0x15, 0x3d, 0xcc, 0x21, 0x04, 0x28, 0x5a, 0x94, 0x3e, 0x7c, 0x8c, 0xc6, 0x46,
	0x3e, 0x46, 0xe3, 0xe7, 0x3f, 0x46, 0x38, 0x3c, 0x46, 0x71, 0x7e, 0x8c, 0xaa, 0x17, 0xf5, 0xc3,
	0xe9, 0x27, 0x69, 0x84, 0x38, 0x7c, 0xfe, 0xaa, 0xec, 0xc3, 0xdb, 0xa7, 0x46, 0xe1, 0xd0, 0x66,
	0xd7, 0xce, 0x1a, 0x88, 0xde, 0xc0, 0x3c, 0x5a, 0x7a, 0x11, 0x10, 0x64, 0x24, 0xbd, 0x2c, 0xfc,
	0xf7, 0x24, 0xcc, 0x9d, 0xb4, 0xcf, 0xa8, 0x09, 0xc9, 0x03, 0xd2, 0xd3, 0xbb, 0x14, 0xb7, 0x44,
	0x54, 0xa5, 0x56, 0x56, 0xce, 0xee, 0xb2, 0x75, 0xd2, 0xdb, 0x66, 0x33, 0x85, 0x83, 0x12, 0x07,
	0xf2, 0x13, 0xd9, 0x00, 0x06, 0x0e, 0xbb, 0xd9, 0x22, 0x22, 0xd7, 0x46, 0x8b, 0xc8, 0x62, 0x05,
	0x0f, 0x34, 0xb2, 0x93, 0x46, 0xf0, 0x8d, 0x76, 0x00, 0x44, 0x25, 0xaa, 0x5b, 0x66, 0x50, 0x2e,
	0x9c, 0x63, 0x11, 0x5b, 0xbc, 0xe6, 0xaf, 0x99, 0x52, 0xae, 0x10, 0x55, 0x33, 0x29, 0x7a, 0x06,
	0xf3, 0xd8, 0x34, 0x2d, 0xa6, 0x04, 0xdb, 0x3a, 0x39, 0xf2, 0x89, 0x43, 0xf9, 0x82, 0xc6, 0xb9,
	0x8a, 0x0f, 0xcf, 0xae, 0xe2, 0x8b, 0x7b, 0x7f, 0x7a, 0x5f, 0x0d, 0xe6, 0x0b, 0x3d, 0x73, 0x7d,
	0xd1, 0xe1, 0x08, 0x45, 0x1f, 0xc3, 0x22, 0xab, 0x80, 0x4d, 0x8b, 0xfa, 0x9e, 0xb5, 0xdb, 0xe5,
	0x70, 0xd9, 0x71, 0x2d, 0xc7, 0x17, 0xf1, 0x2c, 0x4f, 0xdd, 0xbc, 0xe1, 0xd9, 0xd5, 0x08, 0x4b,
	0x9d, 0x73, 0xa0, 0xff, 0x50, 0xe0, 0x5a, 0x88, 0x37, 0xba, 0xe5, 0xec, 0xb9, 0x5e, 0x5b, 0x20,
	0xae, 0x28, 0x49, 0xce, 0xff, 0xc4, 0x71, 0xe2, 0x46, 0x84, 0xf5, 0x66, 0xad, 0xaf, 0x41, 0x54,
	0xe7, 0xc2, 0xba, 0x3c, 0x3e, 0x95, 0x21, 0xff, 0x9d, 0x02, 0xc9, 0x70, 0x23, 0xd1, 0x9f, 0x41,
	0xdc, 0xa2, 0xba, 0x81, 0x65, 0xe0, 0x1d, 0x3f, 0xe8, 0xab, 0xae, 0x6b, 0x73, 0xad, 0x42, 0xf2,
	0xb8, 0x45, 0x2b, 0x18, 0x6d, 0xc3, 0x42, 0x1b, 0x1f, 0x05, 0x4f, 0x16, 0x1d, 0xec, 0xef, 0xeb,
	0x36, 0x71, 0x5a, 0xfe, 0xbe, 0x0c, 0xb4, 0xab, 0xc7, 0xc4, 0xd4, 0x1c, 0xff, 0x83, 0x95, 0x88,
	0x9c, 0xd9, 0x36, 0x3e, 0x12, 0x0f, 0x1a, 0x75, 0xec, 0xef, 0x6f, 0xf0, 0xc9, 0xf9, 0xaf, 0x15,
	0xc8, 0x9f, 0xbe, 0x34, 0xf4, 0x17, 0x90, 0x0b, 0x5e, 0x69, 0xa2, 0x50, 0xcd, 0xfb, 0xf9, 0x4a,
	0x7f, 0x6b, 0x16, 0x24, 0x53, 0xe4, 0x42, 0xe1, 0x5d, 0x91, 0x3f, 0x86, 0xb4, 0x6b, 0xd0, 0x8e,
	0x4e, 0x89, 0x77, 0x48, 0x3c, 0xd9, 0x1d, 0x92, 0x18, 0xca, 0x06, 0x1a, 0x82, 0x5e, 0xf8, 0x95,
	0x02, 0xf3, 0x27, 0x36, 0xb0, 0x50, 0x91, 0xdd, 0xa1, 0x03, 0xc7, 0xba, 0x7f, 0x0b, 0xc4, 0xd6,
	0xae, 0xb0, 0xeb, 0x72, 0x00, 0x3d, 0x5e, 0xc0, 0xc2, 0x10, 0xbf, 0x7e, 0xe9, 0x37, 0xc4, 0xda,
	0x15, 0x6d, 0xce, 0x3b, 0x69, 0xb0, 0xdf, 0x23, 0x12, 0x3a, 0x0b, 0x3f, 0x53, 0x20, 0x59, 0xef,
	0xee, 0xda, 0x96, 0xb1, 0x4e, 0x7a, 0xa8, 0x29, 0x5f, 0x2c, 0x45, 0xaa, 0x71, 0x8e, 0x54, 0x3b,
	0x14, 0xc1, 0xa0, 0x27, 0x78, 0xa9, 0x8c, 0xc9, 0x97, 0xca, 0x79, 0x81, 0xc4, 0x6c, 0x79, 0x69,
	0x41, 0x67, 0xdf, 0x85, 0x2a, 0x4c, 0x4a, 0x66, 0x94, 0x83, 0xb9, 0x75, 0xf5, 0xa9, 0x7e, 0x72,
	0xef, 0xa7, 0xae, 0x3e, 0xd6, 0xb5, 0x46, 0x59, 0x5f, 0x57, 0x9f, 0x8a, 0xaa, 0x89, 0x11, 0xd4,
	0x0a, 0xff, 0x8e, 0x15, 0x7e, 0x18, 0x87, 0x99, 0x63, 0x89, 0x3e, 0xea, 0x42, 0x86, 0x8a, 0x9e,
	0x61, 0x74, 0x4f, 0x2e, 0xfa, 0xb6, 0x23, 0x6f, 0x1e, 0xd9, 0x85, 0xec, 0xd7, 0x12, 0x31, 0x6d,
	0x8a, 0x46, 0x69, 0xa8, 0x7d, 0x3c, 0x16, 0x62, 0x97, 0xd6, 0x5f, 0x8f, 0x1d, 0x0b, 0xa5, 0x27,
	0x00, 0x1d, 0xee, 0x78, 0x9d, 0xf9, 0x57, 0xdc, 0xeb, 0x1f, 0x5c, 0x60, 0xd3, 0x02, 0x84, 0x0d,
	0xbe, 0xf3, 0xbf, 0x53, 0x60, 0x6a, 0x60, 0xb5, 0xa8, 0x0e, 0x93, 0x72, 0xa9, 0xd2, 0x93, 0x17,
	0x6b, 0xd2, 0xc7, 0xb4, 0x40, 0x0c, 0xba, 0x0d, 0xa9, 0x48, 0x0f, 0xbe, 0x5f, 0xfc, 0x29, 0x1a,
	0x18, 0x61, 0xef, 0x1d, 0xed, 0x43, 0x36, 0xd8, 0x48, 0x6c, 0xfb, 0x82, 0x55, 0x2c, 0xf4, 0xfe,
	0xb9, 0x0d, 0x18, 0x6c, 0xa3, 0x07, 0x01, 0x22, 0xa9, 0x85, 0xff, 0x4b, 0xc0, 0xc2, 0x29, 0xaf,
	0x89, 0xff, 0xa0, 0xc0, 0x6c, 0x60, 0x45, 0x34, 0xe1, 0x12, 0x9e, 0x68, 0x8c, 0x5a, 0x3d, 0x05,
	0xf6, 0x45, 0x48, 0x1a, 0xa2, 0xc7, 0x68, 0xc8, 0x18, 0x3a, 0xbc, 0x97, 0x03, 0x18, 0x5a, 0xda,
	0x88, 0x26, 0x1e, 0xda, 0x25, 0xc5, 0x54, 0x24, 0x9c, 0x90, 0xdd, 0x3f, 0x8d, 0x2c, 0xa9, 0xb1,
	0x4c, 0x99, 0x41, 0x3e, 0x1c, 0xd9, 0x73, 0xeb, 0xa4, 0x57, 0x33, 0xb5, 0xb4, 0x94, 0xce, 0xbf,
	0x50, 0x07, 0xb2, 0xfd, 0xdb, 0x56, 0xea, 0x8b, 0x5f, 0xaa, 0xbe, 0x4c, 0x28, 0x9f, 0x7f, 0xe7,
	0x7f, 0x39, 0x06, 0xe8, 0xf8, 0x1e, 0xa2, 0xf5, 0xd1, 0xcf, 0x4c, 0xff, 0xb8, 0xdc, 0x38, 0xe1,
	0xb8, 0x0c, 0x9c, 0x14, 0xe3, 0x0d, 0x9c, 0x94, 0xe1, 0x43, 0x82, 0xde, 0x85, 0x99, 0x7d, 0x72,
	0xa4, 0x0f, 0x36, 0xeb, 0x78, 0x17, 0x56, 0x9b, 0xde, 0x27, 0x47, 0x8d, 0x68, 0xbf, 0xee, 0x5e,
	0xa4, 0xbb, 0x12, 0x7f, 0x4d, 0x77, 0x25, 0xd2, 0x58, 0x59, 0x85, 0x69, 0xc7, 0xf5, 0xf5, 0x5d,
	0xb2, 0xe7, 0x7a, 0xb2, 0xde, 0x98, 0x78, 0x6d, 0x4d, 0x3a, 0xe5, 0xb8, 0xfe, 0x2a, 0x9f, 0x21,
	0xeb, 0x95, 0x0c, 0x93, 0x81, 0xf7, 0x7c, 0xe2, 0x9d, 0xb1, 0xfb, 0xaa, 0xa5, 0x1d, 0xd7, 0x2f,
	0xb3, 0x09, 0xbc, 0xa8, 0xbd, 0x05, 0x71, 0x11, 0x4d, 0x79, 0x98, 0x90, 0x31, 0xa4, 0xf4, 0x11,
	0x2a, 0x7e, 0xc0, 0xc6, 0x0a, 0xf7, 0x20, 0x11, 0x24, 0xa9, 0xe8, 0x1d, 0xc8, 0xb8, 0xc2, 0xfb,
	0x96, 0xc9, 0x93, 0x1f, 0x9e, 0x7d, 0xc4, 0x05, 0xe8, 0xa5, 0x5d, 0xc9, 0xc6, 0xf2, 0x9a, 0xc2,
	0x7f, 0x2a, 0x30, 0x35, 0x90, 0x79, 0xb2, 0x6c, 0x3f, 0x9c, 0x7c, 0xfe, 0x6c, 0x3f, 0x9a, 0x28,
	0xc7, 0xb4, 0x44, 0xa0, 0x0b, 0xdd, 0x80, 0x84, 0xc1, 0x6a, 0x5f, 0x03, 0x0f, 0xbc, 0x72, 0x87,
	0x44, 0xb4, 0x14, 0x14, 0x44, 0x63, 0xfd, 0xab, 0x59, 0x50, 0x0a, 0xdf, 0x4f, 0x42, 0x22, 0xa8,
	0x22, 0xd0, 0x3e, 0x64, 0x76, 0x31, 0x25, 0xfa, 0x70, 0x45, 0xb2, 0x7a, 0xfe, 0x8a, 0x24, 0xfc,
	0x21, 0x73, 0x4d, 0x2d, 0xcd, 0x24, 0x87, 0x9a, 0x8e, 0x00, 0xf1, 0x7c, 0xde, 0x24, 0x66, 0x44,
	0x9b, 0xc0, 0xb9, 0xcf, 0x2f, 0xa0, 0x4d, 0x95, 0xc2, 0x86, 0xb5, 0x66, 0xc9, 0xd0, 0x00, 0x7a,
	0x06, 0x57, 0xbb, 0xce, 0x81, 0xe3, 0x3e, 0x77, 0xf4, 0xe3, 0x16, 0x8c, 0x50, 0xbd, 0x68, 0x39,
	0x29, 0x76, 0xd8, 0x14, 0x9a, 0xff, 0x6d, 0x0c, 0xa6, 0x87, 0x0c, 0x43, 0x7f, 0x02, 0x33, 0xa6,
	0xd5, 0xb2, 0x7c, 0x6c, 0xeb, 0xd4, 0x6a, 0x39, 0xd8, 0xef, 0x7a, 0xc2, 0xdb, 0x09, 0x2d, 0x2b,
	0x07, 0x1a, 0x01, 0x1d, 0xbd, 0x0f, 0xc8, 0x70, 0x1d, 0x9f, 0x38, 0x3e, 0x7f, 0xce, 0xb6, 0xfc,
	0x36, 0x71, 0x7c, 0xb1, 0xd5, 0xda, 0x8c, 0x1c, 0xa9, 0x84, 0x03, 0xe8, 0x1d, 0xc8, 0xb2, 0x15,
	0x11, 0xc7, 0xb0, 0x3a, 0xfb, 0xc4, 0xe3, 0xcc, 0x63, 0xe2, 0x2d, 0xf1, 0x80, 0xf4, 0xd4, 0x08,
	0x99, 0x9b, 0x81, 0x7d, 0x3c, 0xc8, 0x3b, 0x2e, 0xcd, 0xc0, 0x3e, 0x1e, 0x60, 0xbe, 0x05, 0x53,
	0x4c, 0x2e, 0x6e, 0x79, 0x84, 0x70, 0x46, 0xf1, 0xac, 0x99, 0x3e, 0x20, 0xbd, 0x72, 0x40, 0x43,
	0x57, 0x21, 0xc9, 0xff, 0xa9, 0xc1, 0x56, 0x25, 0x5f, 0x30, 0x13, 0x8c, 0xc0, 0x56, 0x83, 0x96,
	0x58, 0xa4, 0x8a, 0x15, 0xf3, 0x93, 0x9a, 0xd0, 0x26, 0x0d, 0x8f, 0x2f, 0x94, 0x09, 0x0f, 0x8c,
	0xd0, 0x5d, 0xc7, 0xee, 0xf1, 0x57, 0x90, 0x84, 0x96, 0x0e, 0x88, 0x5b, 0x8e, 0xdd, 0x63, 0x4c,
	0x26, 0x89, 0x32, 0x25, 0x05, 0x53, 0x40, 0x64, 0x4c, 0x2c, 0xa9, 0x59, 0x3c, 0x25, 0x1e, 0x18,
	0xba, 0x8a, 0x0a, 0x80, 0x37, 0x86, 0xa4, 0xc3, 0x41, 0x90, 0x58, 0xf1, 0xc1, 0xe1, 0xd7, 0xb6,
	0x98, 0xa7, 0x39, 0x83, 0xf0, 0x31, 0x08, 0x12, 0x67, 0xb8, 0x09, 0x69, 0xc3, 0x35, 0x09, 0x5f,
	0x83, 0xe5, 0xb4, 0xa4, 0x63, 0x53, 0x8c, 0xd6, 0x10, 0x24, 0xe6, 0x7f, 0xf1, 0xbc, 0xcc, 0xd0,
	0x87, 0x18, 0x3c, 0x85, 0x10, 0x3e, 0x9d, 0xe6, 0xf4, 0x7a, 0x48, 0x66, 0x0b, 0x62, 0xb0, 0xa5,
	0x73, 0x68, 0x62, 0xe2, 0xa4, 0x4b, 0x19, 0xb1, 0x21, 0x69, 0x4c, 0xa5, 0xa8, 0x5d, 0xa4, 0x4a,
	0xe1, 0x55, 0x51, 0xb6, 0x08, 0x52, 0xe1, 0xef, 0x63, 0x30, 0x29, 0x31, 0x5d, 0x58, 0xd8, 0x75,
	0x7c, 0xaf, 0xa7, 0x33, 0xab, 0xc2, 0x77, 0x18, 0x41, 0xab, 0xb8, 0x26, 0x41, 0x05, 0x48, 0x47,
	0xff, 0x90, 0x11, 0x3c, 0xc3, 0x44, 0x69, 0xa8, 0x04, 0xb3, 0xd1, 0x6f, 0x6c, 0xeb, 0x5d, 0xc7,
	0x12, 0x81, 0x94, 0xd4, 0xd0, 0xe0, 0xd0, 0xb6, 0x63, 0xf9, 0x28, 0x0f, 0x09, 0xdb, 0x35, 0xb0,
	0x6d, 0xf9, 0x3d, 0x79, 0x55, 0x84, 0xdf, 0x6c, 0xac, 0xe3, 0xb9, 0x87, 0x96, 0x63, 0x88, 0x3b,
	0x22, 0xa9, 0x85, 0xdf, 0xe8, 0x2d, 0xc8, 0x50, 0xdf, 0x23, 0xc4, 0x0f, 0x9e, 0xe3, 0x45, 0x83,
	0x4b, 0x9b, 0x12, 0x54, 0xf9, 0x0c, 0xcf, 0x76, 0xa6, 0xe3, 0x52, 0x76, 0x60, 0xf8, 0xaa, 0x26,
	0xc5, 0xc5, 0x28, 0x48, 0x6c, 0x51, 0x85, 0xdf, 0x28, 0x30, 0x3d, 0xfc, 0x07, 0x82, 0xab, 0x90,
	0x1c, 0xfe, 0xe3, 0x40, 0xc2, 0x0c, 0xfe, 0x31, 0x80, 0x60, 0x3c, 0xf2, 0x4f, 0x01, 0xfe, 0x1b,
	0xbd, 0x0d, 0xd3, 0x27, 0xff, 0x35, 0x20, 0x43, 0x06, 0xff, 0x13, 0x70, 0x13, 0xd2, 0x56, 0x27,
	0xc2, 0x25, 0xfe, 0x14, 0x90, 0xb2, 0x3a, 0x7d, 0x96, 0x2f, 0x20, 0x15, 0x7d, 0xce, 0x8f, 0x8f,
	0xd4, 0xb5, 0xd0, 0xc0, 0x08, 0xff, 0x02, 0xf0, 0xee, 0x37, 0x31, 0xc8, 0x0e, 0x77, 0x7d, 0xd1,
	0x4d, 0xf8, 0x23, 0x4d, 0xdd, 0xd9, 0xaa, 0xf0, 0x97, 0x6d, 0x5d, 0x53, 0xcb, 0x8d, 0xad, 0xcd,
	0xa1, 0x2a, 0x0b, 0x41, 0x86, 0xd5, 0x5f, 0x95, 0xad, 0xc7, 0x75, 0x6d, 0xeb, 0x71, 0xad, 0xa1,
	0x66, 0x15, 0x74, 0x1b, 0x96, 0x2b, 0xaa, 0xd6, 0xac, 0x3d, 0xac, 0x55, 0xca, 0x4d, 0x55, 0x2f,
	0x6f, 0x37, 0xd7, 0xb6, 0xb4, 0x5a, 0x73, 0x80, 0x2b, 0x86, 0x16, 0x61, 0xb6, 0xfc, 0xf0, 0x61,
	0x6d, 0xa3, 0x26, 0xa4, 0x57, 0xd6, 0xca, 0x9b, 0x8f, 0xd4, 0x6a, 0x76, 0x6c, 0xe8, 0x75, 0x6b,
	0x1c, 0xe5, 0x61, 0xa1, 0xa2, 0x36, 0x1a, 0x82, 0x6d, 0xeb, 0xa1, 0xbe, 0x55, 0x57, 0x35, 0xf1,
	0xd6, 0x1e, 0x47, 0x73, 0x90, 0x8d, 0xaa, 0x5a, 0xdb, 0xda, 0xa8, 0x66, 0x27, 0x98, 0xe8, 0xba,
	0x56, 0xdb, 0xa9, 0x6d, 0xa8, 0x8f, 0x54, 0xfd, 0x49, 0xad, 0xb9, 0x56, 0xd5, 0xca, 0x4f, 0x36,
	0xb3, 0x93, 0xa8, 0x00, 0xd7, 0xcb, 0xcd, 0xa6, 0x56, 0x5b, 0xdd, 0x3e, 0xcd, 0xae, 0xc4, 0xea,
	0x8f, 0x0a, 0xbc, 0x67, 0xb8, 0xed, 0x33, 0x3b, 0x75, 0x75, 0xb1, 0x2e, 0x68, 0x15, 0xac, 0x05,
	0xff, 0x6e, 0x66, 0xe7, 0xd1, 0xad, 0x2b, 0x5f, 0xfe, 0xa5, 0x14, 0xd2, 0x72, 0x6d, 0xec, 0xb4,
	0x8a, 0xae, 0xd7, 0x2a, 0xb5, 0x88, 0xc3, 0x53, 0x88, 0x52, 0xbf, 0x53, 0xf8, 0xfa, 0xff, 0x4d,
	0x7f, 0x1c, 0x92, 0x7e, 0xaf, 0x28, 0xff, 0x13, 0xbb, 0xf3, 0x48, 0x88, 0xad, 0x70, 0xdb, 0x1a,
	0x81, 0x6d, 0x81, 0x1d, 0xe5, 0xe2, 0xce, 0xdd, 0x32, 0x9f, 0xb7, 0x3b, 0xc1, 0x75, 0x7d, 0xf0,
	0x87, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x36, 0x95, 0xe4, 0xa2, 0x2d, 0x00, 0x00,
}
